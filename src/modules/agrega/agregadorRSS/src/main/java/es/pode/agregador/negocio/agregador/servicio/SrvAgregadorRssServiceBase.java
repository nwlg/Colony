// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.agregador.negocio.agregador.servicio;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService
 */
public abstract class SrvAgregadorRssServiceBase
    implements es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService
{

		 protected static final Logger logger = Logger.getLogger(SrvAgregadorRssServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
			
    protected final es.pode.publicacion.negocio.servicios.SrvAuditaPublicacionService getSrvAuditaPublicacionService()
	        throws java.lang.Exception
	    {
            String srvAuditaPublicacionServiceFile="importedServices.properties";	    
	          java.io.InputStream srvAuditaPublicacionServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvAuditaPublicacionServiceFile);
	          java.util.Properties srvAuditaPublicacionServiceProperties = new java.util.Properties();
	          srvAuditaPublicacionServiceProperties.load(srvAuditaPublicacionServiceInputStream);
	          String srvAuditaPublicacionServiceEndPointAddress="";
	          srvAuditaPublicacionServiceEndPointAddress=(String) srvAuditaPublicacionServiceProperties.get("srvAuditaPublicacionServicePort");
			  logger.debug("srvAuditaPublicacionServiceEndPointAddress del fichero --> " + srvAuditaPublicacionServiceEndPointAddress);
			  es.pode.publicacion.negocio.servicios.SrvAuditaPublicacionServiceService srvAuditaPublicacionService = new es.pode.publicacion.negocio.servicios.SrvAuditaPublicacionServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvAuditaPublicacionServiceEndPointAddress.length()>0) 
					  ((es.pode.publicacion.negocio.servicios.SrvAuditaPublicacionServiceServiceLocator)srvAuditaPublicacionService).setSrvAuditaPublicacionServiceEndpointAddress(srvAuditaPublicacionServiceEndPointAddress);
	    	    es.pode.publicacion.negocio.servicios.SrvAuditaPublicacionService port = srvAuditaPublicacionService.getSrvAuditaPublicacionService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.contenidos.negocio.noticias.servicio.SrvNoticiasService getSrvNoticiasService()
	        throws java.lang.Exception
	    {
            String srvNoticiasServiceFile="importedServices.properties";	    
	          java.io.InputStream srvNoticiasServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvNoticiasServiceFile);
	          java.util.Properties srvNoticiasServiceProperties = new java.util.Properties();
	          srvNoticiasServiceProperties.load(srvNoticiasServiceInputStream);
	          String srvNoticiasServiceEndPointAddress="";
	          srvNoticiasServiceEndPointAddress=(String) srvNoticiasServiceProperties.get("srvNoticiasServicePort");
			  logger.debug("srvNoticiasServiceEndPointAddress del fichero --> " + srvNoticiasServiceEndPointAddress);
			  es.pode.contenidos.negocio.noticias.servicio.SrvNoticiasServiceService srvNoticiasService = new es.pode.contenidos.negocio.noticias.servicio.SrvNoticiasServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvNoticiasServiceEndPointAddress.length()>0) 
					  ((es.pode.contenidos.negocio.noticias.servicio.SrvNoticiasServiceServiceLocator)srvNoticiasService).setSrvNoticiasServiceEndpointAddress(srvNoticiasServiceEndPointAddress);
	    	    es.pode.contenidos.negocio.noticias.servicio.SrvNoticiasService port = srvNoticiasService.getSrvNoticiasService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorService getSrvBuscadorService()
	        throws java.lang.Exception
	    {
            String srvBuscadorServiceFile="importedServices.properties";	    
	          java.io.InputStream srvBuscadorServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvBuscadorServiceFile);
	          java.util.Properties srvBuscadorServiceProperties = new java.util.Properties();
	          srvBuscadorServiceProperties.load(srvBuscadorServiceInputStream);
	          String srvBuscadorServiceEndPointAddress="";
	          srvBuscadorServiceEndPointAddress=(String) srvBuscadorServiceProperties.get("srvBuscadorServicePort");
			  logger.debug("srvBuscadorServiceEndPointAddress del fichero --> " + srvBuscadorServiceEndPointAddress);
			  es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorServiceService srvBuscadorService = new es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvBuscadorServiceEndPointAddress.length()>0) 
					  ((es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorServiceServiceLocator)srvBuscadorService).setSrvBuscadorServiceEndpointAddress(srvBuscadorServiceEndPointAddress);
	    	    es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorService port = srvBuscadorService.getSrvBuscadorService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.auditoria.negocio.servicios.SrvAuditoriaServicio getSrvAuditoriaServicio()
	        throws java.lang.Exception
	    {
            String srvAuditoriaServicioFile="importedServices.properties";	    
	          java.io.InputStream srvAuditoriaServicioInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvAuditoriaServicioFile);
	          java.util.Properties srvAuditoriaServicioProperties = new java.util.Properties();
	          srvAuditoriaServicioProperties.load(srvAuditoriaServicioInputStream);
	          String srvAuditoriaServicioEndPointAddress="";
	          srvAuditoriaServicioEndPointAddress=(String) srvAuditoriaServicioProperties.get("srvAuditoriaServicioPort");
			  logger.debug("srvAuditoriaServicioEndPointAddress del fichero --> " + srvAuditoriaServicioEndPointAddress);
			  es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioService srvAuditoriaServicio = new es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioServiceLocator();                                                                                                                                                                                                                                                    
            if (srvAuditoriaServicioEndPointAddress.length()>0) 
					  ((es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioServiceLocator)srvAuditoriaServicio).setSrvAuditoriaServicioEndpointAddress(srvAuditoriaServicioEndPointAddress);
	    	    es.pode.auditoria.negocio.servicios.SrvAuditoriaServicio port = srvAuditoriaServicio.getSrvAuditoriaServicio();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.buscar.negocio.administrar.servicio.SrvNodoService getSrvNodoService()
	        throws java.lang.Exception
	    {
            String srvNodoServiceFile="importedServices.properties";	    
	          java.io.InputStream srvNodoServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvNodoServiceFile);
	          java.util.Properties srvNodoServiceProperties = new java.util.Properties();
	          srvNodoServiceProperties.load(srvNodoServiceInputStream);
	          String srvNodoServiceEndPointAddress="";
	          srvNodoServiceEndPointAddress=(String) srvNodoServiceProperties.get("srvNodoServicePort");
			  logger.debug("srvNodoServiceEndPointAddress del fichero --> " + srvNodoServiceEndPointAddress);
			  es.pode.buscar.negocio.administrar.servicio.SrvNodoServiceService srvNodoService = new es.pode.buscar.negocio.administrar.servicio.SrvNodoServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvNodoServiceEndPointAddress.length()>0) 
					  ((es.pode.buscar.negocio.administrar.servicio.SrvNodoServiceServiceLocator)srvNodoService).setSrvNodoServiceEndpointAddress(srvNodoServiceEndPointAddress);
	    	    es.pode.buscar.negocio.administrar.servicio.SrvNodoService port = srvNodoService.getSrvNodoService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.buscar.negocio.buscar.servicios.SrvBuscarService getSrvBuscarService()
	        throws java.lang.Exception
	    {
            String srvBuscarServiceFile="importedServices.properties";	    
	          java.io.InputStream srvBuscarServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvBuscarServiceFile);
	          java.util.Properties srvBuscarServiceProperties = new java.util.Properties();
	          srvBuscarServiceProperties.load(srvBuscarServiceInputStream);
	          String srvBuscarServiceEndPointAddress="";
	          srvBuscarServiceEndPointAddress=(String) srvBuscarServiceProperties.get("srvBuscarServicePort");
			  logger.debug("srvBuscarServiceEndPointAddress del fichero --> " + srvBuscarServiceEndPointAddress);
			  es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceService srvBuscarService = new es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvBuscarServiceEndPointAddress.length()>0) 
					  ((es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceServiceLocator)srvBuscarService).setSrvBuscarServiceEndpointAddress(srvBuscarServiceEndPointAddress);
	    	    es.pode.buscar.negocio.buscar.servicios.SrvBuscarService port = srvBuscarService.getSrvBuscarService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.fuentestaxonomicas.negocio.servicio.SrvTaxonomiaService getSrvTaxonomiaService()
	        throws java.lang.Exception
	    {
            String srvTaxonomiaServiceFile="importedServices.properties";	    
	          java.io.InputStream srvTaxonomiaServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvTaxonomiaServiceFile);
	          java.util.Properties srvTaxonomiaServiceProperties = new java.util.Properties();
	          srvTaxonomiaServiceProperties.load(srvTaxonomiaServiceInputStream);
	          String srvTaxonomiaServiceEndPointAddress="";
	          srvTaxonomiaServiceEndPointAddress=(String) srvTaxonomiaServiceProperties.get("srvTaxonomiaServicePort");
			  logger.debug("srvTaxonomiaServiceEndPointAddress del fichero --> " + srvTaxonomiaServiceEndPointAddress);
			  es.pode.fuentestaxonomicas.negocio.servicio.SrvTaxonomiaServiceService srvTaxonomiaService = new es.pode.fuentestaxonomicas.negocio.servicio.SrvTaxonomiaServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvTaxonomiaServiceEndPointAddress.length()>0) 
					  ((es.pode.fuentestaxonomicas.negocio.servicio.SrvTaxonomiaServiceServiceLocator)srvTaxonomiaService).setSrvTaxonomiaServiceEndpointAddress(srvTaxonomiaServiceEndPointAddress);
	    	    es.pode.fuentestaxonomicas.negocio.servicio.SrvTaxonomiaService port = srvTaxonomiaService.getSrvTaxonomiaService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices getSrvTesaurosServices()
	        throws java.lang.Exception
	    {
            String srvTesaurosServicesFile="importedServices.properties";	    
	          java.io.InputStream srvTesaurosServicesInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvTesaurosServicesFile);
	          java.util.Properties srvTesaurosServicesProperties = new java.util.Properties();
	          srvTesaurosServicesProperties.load(srvTesaurosServicesInputStream);
	          String srvTesaurosServicesEndPointAddress="";
	          srvTesaurosServicesEndPointAddress=(String) srvTesaurosServicesProperties.get("srvTesaurosServicesPort");
			  logger.debug("srvTesaurosServicesEndPointAddress del fichero --> " + srvTesaurosServicesEndPointAddress);
			  es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesService srvTesaurosServices = new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesServiceLocator();                                                                                                                                                                                                                                                    
            if (srvTesaurosServicesEndPointAddress.length()>0) 
					  ((es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesServiceLocator)srvTesaurosServices).setSrvTesaurosServicesEndpointAddress(srvTesaurosServicesEndPointAddress);
	    	    es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices port = srvTesaurosServices.getSrvTesaurosServices();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.fuentestaxonomicas.negocio.servicio.SrvVocabulariosControladosService getSrvVocabulariosControladosService()
	        throws java.lang.Exception
	    {
            String srvVocabulariosControladosServiceFile="importedServices.properties";	    
	          java.io.InputStream srvVocabulariosControladosServiceInputStream=SrvAgregadorRssServiceBase.class.getClassLoader().getResourceAsStream(srvVocabulariosControladosServiceFile);
	          java.util.Properties srvVocabulariosControladosServiceProperties = new java.util.Properties();
	          srvVocabulariosControladosServiceProperties.load(srvVocabulariosControladosServiceInputStream);
	          String srvVocabulariosControladosServiceEndPointAddress="";
	          srvVocabulariosControladosServiceEndPointAddress=(String) srvVocabulariosControladosServiceProperties.get("srvVocabulariosControladosServicePort");
			  logger.debug("srvVocabulariosControladosServiceEndPointAddress del fichero --> " + srvVocabulariosControladosServiceEndPointAddress);
			  es.pode.fuentestaxonomicas.negocio.servicio.SrvVocabulariosControladosServiceService srvVocabulariosControladosService = new es.pode.fuentestaxonomicas.negocio.servicio.SrvVocabulariosControladosServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvVocabulariosControladosServiceEndPointAddress.length()>0) 
					  ((es.pode.fuentestaxonomicas.negocio.servicio.SrvVocabulariosControladosServiceServiceLocator)srvVocabulariosControladosService).setSrvVocabulariosControladosServiceEndpointAddress(srvVocabulariosControladosServiceEndPointAddress);
	    	    es.pode.fuentestaxonomicas.negocio.servicio.SrvVocabulariosControladosService port = srvVocabulariosControladosService.getSrvVocabulariosControladosService();	    
	          return port;
	    }

    
    

    /**
     * @see es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService#crearXML()
     */
    public void crearXML()
    {
        try
        {
            this.handleCrearXML();
        }
        catch (Throwable th)
        {
            throw new es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceException(
                "Error performing 'es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.crearXML()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearXML()}
      */
    protected abstract void handleCrearXML()
        throws java.lang.Exception;

    /**
     * @see es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService#devuelveFeeds()
     */
    public es.pode.agregador.negocio.agregador.servicio.FeedVO[] devuelveFeeds()
    {
        try
        {
            return this.handleDevuelveFeeds();
        }
        catch (Throwable th)
        {
            throw new es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceException(
                "Error performing 'es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.devuelveFeeds()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #devuelveFeeds()}
      */
    protected abstract es.pode.agregador.negocio.agregador.servicio.FeedVO[] handleDevuelveFeeds()
        throws java.lang.Exception;

    /**
     * @see es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService#devuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO)
     */
    public javax.activation.DataHandler devuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO parametrosBusqueda)
    {
        if (parametrosBusqueda == null)
        {
            throw new IllegalArgumentException(
                "es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.devuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO parametrosBusqueda) - 'parametrosBusqueda' can not be null");
        }
        try
        {
            return this.handleDevuelveRssBusqueda(parametrosBusqueda);
        }
        catch (Throwable th)
        {
            throw new es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceException(
                "Error performing 'es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.devuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO parametrosBusqueda)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #devuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO)}
      */
    protected abstract javax.activation.DataHandler handleDevuelveRssBusqueda(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO parametrosBusqueda)
        throws java.lang.Exception;

    /**
     * @see es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService#eliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO)
     */
    public void eliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO param)
    {
        if (param == null)
        {
            throw new IllegalArgumentException(
                "es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.eliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO param) - 'param' can not be null");
        }
        try
        {
            this.handleEliminarFichero(param);
        }
        catch (Throwable th)
        {
            throw new es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceException(
                "Error performing 'es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService.eliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO param)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO)}
      */
    protected abstract void handleEliminarFichero(es.pode.agregador.negocio.agregador.servicio.ParametrosBusquedaAgregadorVO param)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.agregadorRSS.PrincipalStore.get();
    }
}