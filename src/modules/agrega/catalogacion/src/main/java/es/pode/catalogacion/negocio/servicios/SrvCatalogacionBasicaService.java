// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.catalogacion.negocio.servicios;

/**
 * <p>
 * Servicio encargado de transformar un metadato LOM-ES a un
 * subconjunto de este llamado LomBasico, recogiendo unicamente los
 * campos necesarios para utilizar el catalogador basico.
 * </p>
 */
public interface SrvCatalogacionBasicaService
{
  /**
   * <p>
   * Metodo que recupera un objeto LOM completo y recoge los valores
   * necesarios para mostrar en el catalogador basico.
   * </p>
   * <p>
   * Devuelve un objeto LomBasicoVO con los valores requeridos desde
   * el catalogador (Titulo, descripcion, edad y los identificadores
   * de los valores elegidos de los vocabularios controlados). Para
   * recoger los identificadores de los terminos, se recogera el
   * valor en ingles desde el objeto LOM completo, y mediante el
   * servicio de vocabularios controlados, se obtendra el
   * identificador asociado. Con los identificadores, el catalogador
   * en la interfaz de usuario cargara el combo con el valor
   * seleccionado.
   * </p>
      * @param identificador  Identificador del metadato LOM-ES almacenado en una hashmap pendiente de edicion.
         * @param usuario  Usuario propietario del objeto LOM-ES.
         * @param idioma  Idioma en el que el usuario ha accedido al catalogador.
      * @return es.pode.catalogacion.negocio.servicios.LomBasicoVO
   */
    public es.pode.catalogacion.negocio.servicios.LomBasicoVO obtenerLomBasico(java.lang.String identificador, java.lang.String usuario, java.lang.String idioma);

  /**
   * <p>
   * Recupera los valores introducidos por el usuario mediante el
   * catalogador en un LomBasicoVO. Traspasa los valores recogidos a
   * un LOM completo almacenado en la tabla hash de objetos LOM.
   * </p>
      * @param identificador  Identificador del metadato LOM-ES almacenado en una hashmap pendiente de edicion.
         * @param usuario  Usuario propietario del objeto que contiene el metadato LOM-ES.
         * @param lomBasico  ValueObject que representa un subconjunto de datos de LOM-ES recogidos desde el catalogador basico.
         * @return es.pode.catalogacion.negocio.servicios.LomBasicoVO
   */
    public es.pode.catalogacion.negocio.servicios.LomBasicoVO generarMetadatos(java.lang.String identificador, java.lang.String usuario, es.pode.catalogacion.negocio.servicios.LomBasicoVO lomBasico, java.lang.String idioma);

  /**
   * <p>
   * Mediante el servicio de fuentes taxonomicas se recupera toda el
   * path hasta el taxon seleccionado y se introduce este en el
   * objeto LOM completo introducido en la hash map. La asociacion de
   * la taxonomia se hace directamente sobre el objeto LOM completo,
   * no sobre un LomBasicoVO.
   * </p>
      * @param identificador  Identificador del metadato LOM-ES almacenado en una hashmap pendiente de edicion.
         * @param nomTaxonomia  Nombre de la taxonomia que se va a introducir en el metadato LOM-ES.
         * @param taxonList  Lista de taxones que conforman la ruta elegida en la taxonomia.
         * @param idioma  Idioma en el que se inserta la nueva taxonomia.
      */
    public void asociarTaxonomia(java.lang.String identificador, java.lang.String nomTaxonomia, es.pode.catalogacion.negocio.servicios.CBTaxonVO[] taxonList, java.lang.String idioma);

  /**
   * <p>
   * Metodo que recoge un objeto LOM y lo introduce en una hash map
   * global al servicio.
   * </p>
   * <p>
   * Devuelve el identificador del objeto LOM que se ha introducido
   * en la tabla hash.
   * </p>
      * @param identificador  Identificador del objeto educativo o componente del ODE que posee el metadato. Se introduce como clave en la hashmap.
         * @param usuario  Usuario propietario del objeto educativo que posee el metadato LOM-ES.
         * @param lom  Representacion del metadato LOM-ES para almacenarlo en la tabla hash.
      * @return java.lang.String
   */
    public java.lang.String cargarObjLom(java.lang.String identificador, java.lang.String usuario, javax.activation.DataHandler lom);

  /**
   * <p>
   * Metodo para eliminar objetos LOM de la tabla hash del servicio
   * de catalogacion.
   * </p>
      * @param ids  Lista de identificadores de objetos LOM para eliminar de la tabla hash.
      */
    public void eliminarObjLoms(java.lang.String[] ids);

  /**
   * <p>
   * Metodo para obtener uno o varios objetos LOM almacenados en la
   * tabla hash del servicio.
   * </p>
   * <p>
   * Devuelve una lista de IdLomVO, donde cada uno contiene un
   * identificador del objeto y una representacion mediante un
   * datahandler del metadato LOM-ES.
   * </p>
      * @param ids  Lista de identificadores de objetos LOM que se desean recuperar de la tabla hash.
      * @return es.pode.catalogacion.negocio.servicios.IdLomVO[]
   */
    public es.pode.catalogacion.negocio.servicios.IdLomVO[] obtenerObjLoms(java.lang.String[] ids);

  /**
   * <p>
   * Elimina directamente una taxonomia dada de un objeto LOM
   * almacenado en la tabla hash.
   * </p>
      * @param identificador  Identificador del metadato LOM-ES almacenado en una hashmap pendiente de edicion.
         * @param nomTaxonomia  Nombre de la taxonomia a eliminar.
         * @param idArbol  Posicion de la taxonomia dentro del metadato LOM-ES.
      */
    public void eliminarTaxonomia(java.lang.String identificador, java.lang.String nomTaxonomia, int idArbol);

  /**
   * <p>
   * Metodo para asociar una nueva ruta taxonomica (de un arbol
   * curricular) a un LomBasicoVO.
   * </p>
   * <p>
   * Devuelve el objeto LomBasicoVO pasado como parametro modificado
   * con la nueva ruta asociada.
   * </p>
      * @param identificador  Identificador del metadato LOM-ES almacenado en una hashmap pendiente de edicion.
         * @param lomBasico  Objeto que contiene los metadatos basicos recuperados del objeto LOM-ES almacenado en la tabla hash.
         * @param taxonList  Lista de taxones recuperados de la ruta seleccionada en el arbol curricular.
      * @return es.pode.catalogacion.negocio.servicios.LomBasicoVO
   */
    public es.pode.catalogacion.negocio.servicios.LomBasicoVO asociarTaxonomiaEnLomBasico(java.lang.String identificador, es.pode.catalogacion.negocio.servicios.LomBasicoVO lomBasico, es.pode.catalogacion.negocio.servicios.CBTaxonVO[] taxonList);

  /**
   * <p>
   * Metodo para eliminar una ruta taxonomica (arbol curricular) de
   * un LomBasicoVO.
   * </p>
   * <p>
   * Devuelve el objeto LomBasicoVO pasado como parametro sin la ruta
   * curricular indicada.
   * </p>
      * @param lomBasico  Objeto lomBasicoVO donde eliminar la ruta curricular deseada.
         * @param idArbol  Posicion del arbol curricular que se desea eliminar dentro del metadato LOM
      * @return es.pode.catalogacion.negocio.servicios.LomBasicoVO
   */
    public es.pode.catalogacion.negocio.servicios.LomBasicoVO eliminarTaxonomiasEnLomBasico(es.pode.catalogacion.negocio.servicios.LomBasicoVO lomBasico, java.lang.String[] idArbol);

    public javax.activation.DataHandler exportarLomes(java.lang.String identificador, java.lang.String usuario, es.pode.catalogacion.negocio.servicios.LomBasicoVO lomBasico, java.lang.String idioma);

    public es.pode.catalogacion.negocio.servicios.LomBasicoVO importarLomes(javax.activation.DataHandler ficheroLomes, java.lang.String idioma);

}
