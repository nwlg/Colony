<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_1.dtd">

<form-validation>

   <global>
      <validator name="decimalNumerFormat"
            classname="es.indra.npa.common.validator.DecimalFieldChecksNPA"
               method="validateDecimalNumerFormat"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       javax.servlet.http.HttpServletRequest"
                  msg="errors.decimalFormat"/>
      <validator name="doubleRange"                                               
           classname="org.apache.struts.validator.FieldChecks"                
              method="validateDoubleRange"                                         
        methodParams="java.lang.Object,                                     
                      org.apache.commons.validator.ValidatorAction,                        
                      org.apache.commons.validator.Field,                                  
                      org.apache.struts.action.ActionMessages,                             
                      org.apache.commons.validator.Validator,                              
                      javax.servlet.http.HttpServletRequest"
             depends="double"
                  msg="errors.range"/>
                  
      <validator name="required"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateRequired"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
                  msg="errors.required"/>

      <validator name="requiredif"
                 classname="org.apache.struts.validator.FieldChecks"
                 method="validateRequiredIf"
                 methodParams="java.lang.Object,
                               org.apache.commons.validator.ValidatorAction,
                               org.apache.commons.validator.Field,
                               org.apache.struts.action.ActionMessages,
                               org.apache.commons.validator.Validator,
                               javax.servlet.http.HttpServletRequest"
                 msg="errors.required"/>

      <validator name="validwhen"
          msg="errors.required"
                 classname="org.apache.struts.validator.validwhen.ValidWhen"
                 method="validateValidWhen"
                 methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"/>


      <validator name="minlength"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMinLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.minlength"
           jsFunction="org.apache.commons.validator.javascript.validateMinLength"/>


      <validator name="maxlength"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMaxLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.maxlength"
           jsFunction="org.apache.commons.validator.javascript.validateMaxLength"/>



      <validator name="mask"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMask"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.invalid"/>


      <validator name="byte"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateByte"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.byte"
       jsFunctionName="ByteValidations"/>


      <validator name="short"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateShort"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.short"
       jsFunctionName="ShortValidations"/>


      <validator name="integer"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateInteger"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.integer"
       jsFunctionName="IntegerValidations"/>



      <validator name="long"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateLong"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.long"/>


      <validator name="float"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateFloat"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.float"
       jsFunctionName="FloatValidations"/>

<validator name="double"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateDouble"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.double"
       jsFunctionName="DoubleValidations">
       <javascript><![CDATA[
   function validateDouble(form) {
        var bValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
         var formName = form.getAttributeNode("name");

        oFloat = eval('new ' + formName.value + '_DoubleValidations()');
        for (x in oFloat) {
        	var field = form[oFloat[x][0]];
        	
            if ((field.type == 'hidden' ||
                field.type == 'text' ||
                field.type == 'textarea' ||
                field.type == 'select-one' ||
                field.type == 'radio') &&
                field.disabled == false) {
        
            	var value = '';
                // get field's value
                if (field.type == "select-one") {
                    var si = field.selectedIndex;
                    if (si >= 0) {
                        value = field.options[si].value;
                    }
                } else {
                    value = field.value;
                }
        
                if (value.length > 0) {
                    // remove '.' before checking digits
                    var tempArray = value.split('.');
                    //Strip off leading '0'
                    var zeroIndex = 0;
                    var joinedString= tempArray.join('');
                    while (joinedString.charAt(zeroIndex) == '0') {
                        zeroIndex++;
                    }
                    var noZeroString = joinedString.substring(zeroIndex,joinedString.length);

                    if (!isAllDigits(noZeroString)) {
                        bValid = false;
                        if (i == 0) {
                            focusField = field;
                        }
                        fields[i++] = oFloat[x][1];

                    } else {
	                var iValue = parseFloat(value);
	                if (isNaN(iValue)) {
	                    if (i == 0) {
	                        focusField = field;
	                    }
	                    fields[i++] = oFloat[x][1];
	                    bValid = false;
	                }
                    }
                }
            }
        }
        if (fields.length > 0) {
           focusField.focus();
           alert(fields.join('\n'));
        }
        return bValid;
    }    
]]>
        </javascript>
      </validator>


      <validator name="date"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateDate"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.date"
                  jsFunctionName="DateValidations">
        <javascript><![CDATA[
    /**
     * We include our own date validation algorithm
     * because the default one in commons-validator
     * supports a very limited subset of the expected
     * functionality.
     */
    function validateDate(form)
    {
       var focusField = null;
       var fieldIndex = 0;
       var fields = new Array();
       var formName = form.getAttributeNode("name");

       oDate = eval('new ' + formName.value + '_DateValidations()');

       for (x in oDate)
       {
       	   if (x == 'extend') //Fix prototype
       	       continue;
           var field = form[oDate[x][0]];
           var value = field.value;
           var datePattern = oDate[x][2]("datePatternStrict");
           //var strict = (datePattern!=null);
           var strict = true;
           // try loose pattern
           //if (!strict) datePattern = oDate[x][2]("datePattern");
					 datePattern = oDate[x][2]("datePattern");
           if ((field.type == 'hidden' || field.type == 'text' || field.type == 'textarea') &&
               (value.length > 0) && (datePattern.length > 0) && field.disabled == false)
           {
                // all possible date/time character sequences
                var matches = datePattern.match( /(y+|M+|d+|H+|m+|s+)*/g );
                var matchedTokens = new Array();    // we will keep track of the matches

                var datePatternSub = datePattern;   // keeps track of the remaining pattern to process
                var datePatternRegExp = "^";        // keeps track of the constructed regular expression

                for (var i=0; i<matches.length; i++)
                {
                    var match = matches[i];
                    var matchLength = match.length;

                    // JavaScript returns empty matches too (ie. the delimiters that could not be matched)
                    if (matchLength > 0)
                    {
                        // store this token
                        matchedTokens.push(match);

                        // locate the match in the remaining pattern
                        var matchSubIndex = datePatternSub.indexOf(match);

                        // if there are characters before the match was found
                        if (matchSubIndex > 0)
                        {
                            // append those characters to the resulting regular expression too
                            datePatternRegExp = datePatternRegExp.concat("[",datePatternSub.substring(0,matchSubIndex),"]");
                        }

                        // append the regular expression fragment for this match
                        datePatternRegExp = datePatternRegExp.concat("(\\d{",(strict)?matchLength:("1,"+matchLength),"})");

                        // substring the remaining fragment
                        datePatternSub = datePatternSub.substring(matchSubIndex+matchLength);
                    }
                }

                // close the regular expression
                datePatternRegExp = datePatternRegExp.concat("$");

                // construct an actual regular expression instance
                datePatternRegExp = new RegExp(datePatternRegExp);

                var valid = datePatternRegExp.test(value);
                // attempt to match the user value
                if (valid)
                {
                    // attempt to check for a valid date and time
                    var matched = datePatternRegExp.exec(value);

                    var year = 0;
                    var month = 1;
                    var day = 1;
                    var hour = 0;
                    var minute = 0;
                    var second = 0;

                    for (var i=0; i<matchedTokens.length; i++)
                    {
                        var match = matchedTokens[i];
                        switch (match.charAt(0))
                        {
                            case 'y' : year = matched[i+1]; break;
                            case 'M' : month = matched[i+1]; break;
                            case 'd' : day = matched[i+1]; break;
                            case 'H' : hour = matched[i+1]; break;
                            case 'm' : minute = matched[i+1]; break;
                            case 's' : second = matched[i+1]; break;
                        }
                    }

                    valid = isValidDate(day,month,year) && isValidTime(second,minute,hour);
                }

                if (!valid)
                {
                    fields[fieldIndex] = oDate[x][1];           // record this field as invalid
                    if (fieldIndex == 0) focusField = field;    // the first invalid field is the one getting focus
                    fieldIndex++;                               // increment the field counter
                }
            }
        }
        
        var bValid = true;
        if (fields.length > 0)
        {
            bValid = false;
            focusField.focus();
            alert(fields.join('\n'));
        }

        return bValid;
    }

    function isValidDate(day, month, year) {
        if (month < 1 || month > 12) {
            return false;
        }
        if (day < 1 || day > 31) {
            return false;
        }
        if ((month == 4 || month == 6 || month == 9 || month == 11) &&
            (day == 31)) {
            return false;
        }
        if (month == 2) {
            var leap = (year % 4 == 0 &&
               (year % 100 != 0 || year % 400 == 0));
            if (day>29 || (day == 29 && !leap)) {
                return false;
            }
        }
        return true;
    }

    function isValidTime(second, minute, hour) {
        return (0<=hour && hour<24 && 0<=minute && minute<60 && 0<=second && second<60);
    }
]]>
        </javascript>
      </validator>

      <validator name="time"
            classname="org.andromda.presentation.bpm4struts.StrutsValidator"
               method="validateTime"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.time"
                  jsFunctionName="TimeValidations">
        <javascript><![CDATA[
    /**
     * Provides validation of time without a date.
     */
    function validateTime(form)
    {
       var bValid = true;
       var focusField = null;
       var fieldIndex = 0;
       var fields = new Array();
       var formName = form.getAttributeNode("name");

       oTime = eval('new ' + formName.value + '_TimeValidations()');

       for (x in oTime)
       {
           if (x == 'extend') //Fix prototype
       	       continue;
           var field = form[oTime[x][0]];
           var value = field.value;
           var timePattern = oTime[x][2]("timePattern");

           if ((field.type == 'hidden' || field.type == 'text' || field.type == 'textarea') &&
               (value.length > 0) && (timePattern.length > 0) && field.disabled == false)
           {
                // all possible time character sequences
                var matches = timePattern.match( /(y+|H+|m+|s+|S+)*/g );
                var matchedTokens = new Array();    // we will keep track of the matches

                var timePatternSub = timePattern;   // keeps track of the remaining pattern to process
                var timePatternRegExp = "^";        // keeps track of the constructed regular expression

                for (var i=0; i < matches.length; i++)
                {
                    var match = matches[i];
                    var matchLength = match.length;

                    // JavaScript returns empty matches too (ie. the delimiters that could not be matched)
                    if (matchLength > 0)
                    {
                        // store this token
                        matchedTokens.push(match);

                        // locate the match in the remaining pattern
                        var matchSubIndex = timePatternSub.indexOf(match);

                        // if there are characters before the match was found
                        if (matchSubIndex > 0)
                        {
                            // append those characters to the resulting regular expression too
                            timePatternRegExp = timePatternRegExp.concat("[",timePatternSub.substring(0,matchSubIndex),"]");
                        }

                        // append the regular expression fragment for this match
                        timePatternRegExp = timePatternRegExp.concat("(\\d{",("1,"+matchLength),"})");

                        // substring the remaining fragment
                        timePatternSub = timePatternSub.substring(matchSubIndex+matchLength);
                    }
                }

                // close the regular expression
                timePatternRegExp = timePatternRegExp.concat("$");

                // construct an actual regular expression instance
                timePatternRegExp = new RegExp(timePatternRegExp);

                var valid = timePatternRegExp.test(value);
                // attempt to match the user value since validation failed
                if (valid)
                {
                    // attempt to check for a valid time
                    var matched = timePatternRegExp.exec(value);

                    var hour = 0;
                    var minute = 0;
                    var second = 0;
                    var millisecond = 0;

                    for (var i = 0; i < matchedTokens.length; i++)
                    {
                        var match = matchedTokens[i];
                        switch (match.charAt(0))
                        {
                            case 'H' : hour = matched[i+1]; break;
                            case 'm' : minute = matched[i+1]; break;
                            case 's' : second = matched[i+1]; break;
                            case 'M' : millisecond = matched[i+1]; break;
                        }
                    }

                    valid = isValidTime(second,minute,hour,millisecond);
                }

                if (!valid)
                {
                    fields[fieldIndex] = oTime[x][1];           // record this field as invalid
                    if (fieldIndex == 0) focusField = field;    // the first invalid field is the one getting focus
                    fieldIndex++;                               // increment the field counter
                }
            }
        }

        if (fields.length > 0)
        {
            bValid = false;
            focusField.focus();
            alert(fields.join('\n'));
        }

        return bValid;
    }

    function isValidTime(second, minute, hour, millisecond)
    {
		if (millisecond==null){
		  return (0<=hour && hour<24 && 0<=minute && minute<60 && 0<=second && second<60);
		}else
		{
		return (0 <= hour && hour < 24 && 0 <= minute && minute < 60 && 0 <= second && second < 60 && 0 <= millisecond && millisecond < 1000);
		}      
    }
]]>
        </javascript>
      </validator>

      <!-- This replaces the default intRange validator
           bundled with struts (since it does not handle long values) -->
      <validator name="intRange"
            classname="org.andromda.presentation.bpm4struts.StrutsValidator"
               method="validateRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.range"
                  jsFunctionName="intRange">
        <javascript><![CDATA[
     /**
      * Check to see if fields is in a valid integer range.
      * Fields are not checked if they are disabled.
      * <p>
      * @param form The form validation is taking place on.
      */
     function validateRange(form)
     {
        var isValid = true;
        var focusField = null;
        var i = 0;
        var fields = new Array();
        var formName = form.getAttributeNode("name");

        oRange = eval('new ' + formName.value + '_intRange()');
        for (x in oRange)
        {
            if (x == 'extend') //Fix prototype
       	       continue;
            var field = form[oRange[x][0]];
            if (field.disabled == false)
            {
                var value = '';
                if (field.type == 'hidden' ||
                    field.type == 'text' || field.type == 'textarea' ||
                    field.type == 'radio' )
                {
                    value = field.value;
                }
                if (field.type == 'select-one')
                {
                    var si = field.selectedIndex;
                    if (si >= 0)
                    {
                        value = field.options[si].value;
                    }
                }
                if (value.length > 0)
                {
                    var iMin = parseInt(oRange[x][2]("min"));
                    var iMax = parseInt(oRange[x][2]("max"));
                    var iValue = parseInt(value);
                    if (!(iValue >= iMin && iValue <= iMax))
                    {
                        if (i == 0)
                        {
                            focusField = field;
                        }
                        fields[i++] = oRange[x][1];
                        isValid = false;
                    }
                }
            }
        }
        if (fields.length > 0)
        {
            focusField.focus();
            alert(fields.join('\n'));
        }
        return isValid;
    }
]]>
        </javascript>
      </validator>


      <validator name="floatRange"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateFloatRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends="float"
                  msg="errors.range"/>


      <validator name="creditCard"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateCreditCard"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.creditcard"/>


      <validator name="email"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateEmail"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.email"/>

      <!-- This replaces the default URL validator
           bundled with struts, to use the default
           struts validator for URL validation just use this
           'org.apache.struts.validator.FieldChecks' for the
           class name below -->
      <validator name="url"
            classname="org.andromda.presentation.bpm4struts.StrutsValidator"
               method="validateUrl"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.url"/>

     <!-- validator-rules merge-point -->

     <!--
       This simply allows struts to include the validateUtilities into a page, it should
       not be used as a validation rule.
     -->
     <validator name="includeJavaScriptUtilities"
            classname=""
               method=""
         methodParams=""
              depends=""
                  msg=""
           jsFunction="org.apache.commons.validator.javascript.validateUtilities"/>

   </global>

</form-validation>
