// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ValueObject.vsl in andromda-java-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * Clase que encapsula un fichero subido desde la capa de
 * presentacion.
 * </p>
 */
public class FicheroVO
    implements java.io.Serializable
{

    /**
     * Constructor por defecto
     */        
    public FicheroVO()
    {
    }

    /**
     * Constructor taking all properties.
     * @param nombre  Nombre de archivo (sin ruta).
     * @param tipoMime  Tipo MIME del archivo.
     * @param datos  Datahandler que contiene los datos del fichero.
     * @param ruta  Ruta relativa en la que se ha de almacenar el fichero.
     */
    public FicheroVO(
        java.lang.String nombre,
        java.lang.String tipoMime,
        javax.activation.DataHandler datos,
        java.lang.String ruta)

    {
        this.nombre = nombre;
        this.tipoMime = tipoMime;
        this.datos = datos;
        this.ruta = ruta;
    }

    /**
     * Copies constructor from other FicheroVO
     * @param otherBean FicheroVO 
     */
    public FicheroVO(FicheroVO otherBean)
    {
        if (otherBean != null)
        {
            this.nombre = otherBean.getNombre();
            this.tipoMime = otherBean.getTipoMime();
            this.datos = otherBean.getDatos();
            this.ruta = otherBean.getRuta();
        }
    }

    private java.lang.String nombre;

    /**
     * <p>
     * Nombre de archivo (sin ruta).
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getNombre()
    {
        return this.nombre;
    }

    /**
   * <p>
   * Nombre de archivo (sin ruta).
   * </p>
     *  @param nombre  Nombre de archivo (sin ruta).  
     */
    public void setNombre(java.lang.String nombre)
    {
        this.nombre = nombre;
    }

    private java.lang.String tipoMime;

    /**
     * <p>
     * Tipo MIME del archivo.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getTipoMime()
    {
        return this.tipoMime;
    }

    /**
   * <p>
   * Tipo MIME del archivo.
   * </p>
     *  @param tipoMime  Tipo MIME del archivo.  
     */
    public void setTipoMime(java.lang.String tipoMime)
    {
        this.tipoMime = tipoMime;
    }

    private javax.activation.DataHandler datos;

    /**
     * <p>
     * Datahandler que contiene los datos del fichero.
     * </p>
     * @return javax.activation.DataHandler
     */
    public javax.activation.DataHandler getDatos()
    {
        return this.datos;
    }

    /**
   * <p>
   * Datahandler que contiene los datos del fichero.
   * </p>
     *  @param datos  Datahandler que contiene los datos del fichero.  
     */
    public void setDatos(javax.activation.DataHandler datos)
    {
        this.datos = datos;
    }

    private java.lang.String ruta;

    /**
     * <p>
     * Ruta relativa en la que se ha de almacenar el fichero.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getRuta()
    {
        return this.ruta;
    }

    /**
   * <p>
   * Ruta relativa en la que se ha de almacenar el fichero.
   * </p>
     *  @param ruta  Ruta relativa en la que se ha de almacenar el fichero.  
     */
    public void setRuta(java.lang.String ruta)
    {
        this.ruta = ruta;
    }

}