// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ValueObject.vsl in andromda-java-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * Value Object representado un fichero o carpeta en la
 * localización del ODE.
 * </p>
 */
public class ArchivoVO
    implements java.io.Serializable
{

    /**
     * Constructor por defecto
     */        
    public ArchivoVO()
    {
    }

    /**
     * Constructor taking all properties.
     * @param nombre  Nombre del fichero o carpeta.
     * @param esFichero  Distingue entre ficheros y carpetas: true = fichero, false = carpeta.
     * @param href  URL que da acceso al fichero.
     * @param carpetaPadre  Especifica la ruta relativa a la localizacion del ODE donde se encuentra el fichero / carpeta.
     * @param mime  Tipo MIME del fichero, en caso de que este ArchivoVO se corresponda con un fichero.
     * @param esProtegido  True si fichero está en lista de protegidos
     * @param contenidos  
     */
    public ArchivoVO(
        java.lang.String nombre,
        java.lang.Boolean esFichero,
        java.lang.String href,
        java.lang.String carpetaPadre,
        java.lang.String mime,
        java.lang.Boolean esProtegido,
        es.pode.empaquetador.negocio.servicio.ArchivoVO[] contenidos)

    {
        this.nombre = nombre;
        this.esFichero = esFichero;
        this.href = href;
        this.carpetaPadre = carpetaPadre;
        this.mime = mime;
        this.esProtegido = esProtegido;
        this.contenidos = contenidos;
    }

    /**
     * Copies constructor from other ArchivoVO
     * @param otherBean ArchivoVO 
     */
    public ArchivoVO(ArchivoVO otherBean)
    {
        if (otherBean != null)
        {
            this.nombre = otherBean.getNombre();
            this.esFichero = otherBean.getEsFichero();
            this.href = otherBean.getHref();
            this.carpetaPadre = otherBean.getCarpetaPadre();
            this.mime = otherBean.getMime();
            this.esProtegido = otherBean.getEsProtegido();
            this.contenidos = otherBean.getContenidos();
        }
    }

    private java.lang.String nombre;

    /**
     * <p>
     * Nombre del fichero o carpeta.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getNombre()
    {
        return this.nombre;
    }

    /**
   * <p>
   * Nombre del fichero o carpeta.
   * </p>
     *  @param nombre  Nombre del fichero o carpeta.  
     */
    public void setNombre(java.lang.String nombre)
    {
        this.nombre = nombre;
    }

    private java.lang.Boolean esFichero;

    /**
     * <p>
     * Distingue entre ficheros y carpetas: true = fichero, false =
     * carpeta.
     * </p>
     * @return java.lang.Boolean
     */
    public java.lang.Boolean getEsFichero()
    {
        return this.esFichero;
    }

    /**
   * <p>
   * Distingue entre ficheros y carpetas: true = fichero, false =
   * carpeta.
   * </p>
     *  @param esFichero  Distingue entre ficheros y carpetas: true = fichero, false = carpeta.  
     */
    public void setEsFichero(java.lang.Boolean esFichero)
    {
        this.esFichero = esFichero;
    }

    private java.lang.String href;

    /**
     * <p>
     * URL que da acceso al fichero.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getHref()
    {
        return this.href;
    }

    /**
   * <p>
   * URL que da acceso al fichero.
   * </p>
     *  @param href  URL que da acceso al fichero.  
     */
    public void setHref(java.lang.String href)
    {
        this.href = href;
    }

    private java.lang.String carpetaPadre;

    /**
     * <p>
     * Especifica la ruta relativa a la localizacion del ODE donde se
     * encuentra el fichero / carpeta.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getCarpetaPadre()
    {
        return this.carpetaPadre;
    }

    /**
   * <p>
   * Especifica la ruta relativa a la localizacion del ODE donde se
   * encuentra el fichero / carpeta.
   * </p>
     *  @param carpetaPadre  Especifica la ruta relativa a la localizacion del ODE donde se encuentra el fichero / carpeta.  
     */
    public void setCarpetaPadre(java.lang.String carpetaPadre)
    {
        this.carpetaPadre = carpetaPadre;
    }

    private java.lang.String mime;

    /**
     * <p>
     * Tipo MIME del fichero, en caso de que este ArchivoVO se
     * corresponda con un fichero.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getMime()
    {
        return this.mime;
    }

    /**
   * <p>
   * Tipo MIME del fichero, en caso de que este ArchivoVO se
   * corresponda con un fichero.
   * </p>
     *  @param mime  Tipo MIME del fichero, en caso de que este ArchivoVO se corresponda con un fichero.  
     */
    public void setMime(java.lang.String mime)
    {
        this.mime = mime;
    }

    private java.lang.Boolean esProtegido;

    /**
     * <p>
     * True si fichero está en lista de protegidos
     * </p>
     * @return java.lang.Boolean
     */
    public java.lang.Boolean getEsProtegido()
    {
        return this.esProtegido;
    }

    /**
   * <p>
   * True si fichero está en lista de protegidos
   * </p>
     *  @param esProtegido  True si fichero está en lista de protegidos  
     */
    public void setEsProtegido(java.lang.Boolean esProtegido)
    {
        this.esProtegido = esProtegido;
    }

    /**
   * <p>
   * Value Object representado un fichero o carpeta en la
   * localización del ODE.
   * </p>
     */
    private es.pode.empaquetador.negocio.servicio.ArchivoVO[] contenidos;

    /**
     * Getter of contenidos.  
     * @return es.pode.empaquetador.negocio.servicio.ArchivoVO[]  Value Object representado un fichero o carpeta en la localización del ODE.
     */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO[] getContenidos()
    {
        return this.contenidos;
    }

  /**
   * Setter of contenidos  
   *  @param contenidos  Value Object representado un fichero o carpeta en la localización del ODE. 
   */
    public void setContenidos(es.pode.empaquetador.negocio.servicio.ArchivoVO[] contenidos)
    {
        this.contenidos = contenidos;
    }

}