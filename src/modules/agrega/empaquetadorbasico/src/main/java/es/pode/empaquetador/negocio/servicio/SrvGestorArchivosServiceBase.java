// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService
 */
public abstract class SrvGestorArchivosServiceBase
    implements es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService
{

		 protected static final Logger logger = Logger.getLogger(SrvGestorArchivosServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    	    
		    private es.pode.soporte.zip.TrueZipDaoImpl zipDao;
		
		    /**
		     * Sets the reference to <code>zipDao</code>.
		     */
		    public void setZipDao(es.pode.soporte.zip.TrueZipDaoImpl zipDao)
		    {
		        this.zipDao = zipDao;
		    }
		
		    /**
		     * Gets the reference to <code>zipDao</code>.
		     */
		    protected es.pode.soporte.zip.TrueZipDaoImpl getZipDao()
		    {
		        return this.zipDao;
		    }
	    
	        
	
			
    protected final es.pode.localizador.negocio.servicios.SrvLocalizadorService getSrvLocalizadorService()
	        throws java.lang.Exception
	    {
            String srvLocalizadorServiceFile="importedServices.properties";	    
	          java.io.InputStream srvLocalizadorServiceInputStream=SrvGestorArchivosServiceBase.class.getClassLoader().getResourceAsStream(srvLocalizadorServiceFile);
	          java.util.Properties srvLocalizadorServiceProperties = new java.util.Properties();
	          srvLocalizadorServiceProperties.load(srvLocalizadorServiceInputStream);
	          String srvLocalizadorServiceEndPointAddress="";
	          srvLocalizadorServiceEndPointAddress=(String) srvLocalizadorServiceProperties.get("srvLocalizadorServicePort");
			  logger.debug("srvLocalizadorServiceEndPointAddress del fichero --> " + srvLocalizadorServiceEndPointAddress);
			  es.pode.localizador.negocio.servicios.SrvLocalizadorServiceService srvLocalizadorService = new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvLocalizadorServiceEndPointAddress.length()>0) 
					  ((es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator)srvLocalizadorService).setSrvLocalizadorServiceEndpointAddress(srvLocalizadorServiceEndPointAddress);
	    	    es.pode.localizador.negocio.servicios.SrvLocalizadorService port = srvLocalizadorService.getSrvLocalizadorService();	    
	          return port;
	    }

    
    

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#crearCarpeta(java.lang.String, java.lang.String, java.lang.String)
     */
    public void crearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta) - 'identificador' can not be null");
        }
        if (nombreCarpeta == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta) - 'nombreCarpeta' can not be null");
        }
        try
        {
            this.handleCrearCarpeta(identificador, carpetaPadre, nombreCarpeta);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearCarpeta(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleCrearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#crearArchivo(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO)
     */
    public void crearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero)
        throws es.pode.empaquetador.negocio.servicio.SobreescrituraException
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero) - 'identificador' can not be null");
        }
        if (fichero == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero) - 'fichero' can not be null");
        }
        try
        {
            this.handleCrearArchivo(identificador, carpetaPadre, fichero);
        }
        catch (es.pode.empaquetador.negocio.servicio.SobreescrituraException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.crearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearArchivo(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO)}
      */
    protected abstract void handleCrearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#renombrar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public void renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'identificador' can not be null");
        }
        if (nombre == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'nombre' can not be null");
        }
        if (nuevoNombre == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'nuevoNombre' can not be null");
        }
        try
        {
            this.handleRenombrar(identificador, carpetaPadre, nombre, nuevoNombre);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #renombrar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleRenombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#descomprimirArchivo(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO)
     */
    public void descomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo)
        throws es.pode.empaquetador.negocio.servicio.FicheroInexistenteException, es.pode.empaquetador.negocio.servicio.NoEsZipException
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.descomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo) - 'identificador' can not be null");
        }
        if (archivo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.descomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo) - 'archivo' can not be null");
        }
        try
        {
            this.handleDescomprimirArchivo(identificador, carpetaPadre, archivo);
        }
        catch (es.pode.empaquetador.negocio.servicio.FicheroInexistenteException ex)
        {
            throw ex;
        }
        catch (es.pode.empaquetador.negocio.servicio.NoEsZipException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.descomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #descomprimirArchivo(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO)}
      */
    protected abstract void handleDescomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#eliminar(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])
     */
    public void eliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.eliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'identificador' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.eliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'ficheros' can not be null");
        }
        try
        {
            this.handleEliminar(identificador, ficheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.eliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminar(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])}
      */
    protected abstract void handleEliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#listar(java.lang.String, java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO[] listar(java.lang.String identificador, java.lang.String carpetaPadre)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.listar(java.lang.String identificador, java.lang.String carpetaPadre) - 'identificador' can not be null");
        }
        try
        {
            return this.handleListar(identificador, carpetaPadre);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.listar(java.lang.String identificador, java.lang.String carpetaPadre)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #listar(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.ArchivoVO[] handleListar(java.lang.String identificador, java.lang.String carpetaPadre)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#copiar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])
     */
    public void copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'identificador' can not be null");
        }
        if (carpetaDestino == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'carpetaDestino' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'ficheros' can not be null");
        }
        try
        {
            this.handleCopiar(identificador, carpetaDestino, ficheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #copiar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])}
      */
    protected abstract void handleCopiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#cortar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])
     */
    public void cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'identificador' can not be null");
        }
        if (carpetaDestino == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'carpetaDestino' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'ficheros' can not be null");
        }
        try
        {
            this.handleCortar(identificador, carpetaDestino, ficheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #cortar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])}
      */
    protected abstract void handleCortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#generarBackup(java.lang.String)
     */
    public void generarBackup(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.generarBackup(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            this.handleGenerarBackup(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.generarBackup(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarBackup(java.lang.String)}
      */
    protected abstract void handleGenerarBackup(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#eliminarBackup(java.lang.String)
     */
    public void eliminarBackup(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.eliminarBackup(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            this.handleEliminarBackup(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.eliminarBackup(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarBackup(java.lang.String)}
      */
    protected abstract void handleEliminarBackup(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#restaurarBackup(java.lang.String)
     */
    public void restaurarBackup(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.restaurarBackup(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            this.handleRestaurarBackup(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.restaurarBackup(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #restaurarBackup(java.lang.String)}
      */
    protected abstract void handleRestaurarBackup(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#recuperarArbol(java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO recuperarArbol(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.recuperarArbol(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            return this.handleRecuperarArbol(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.recuperarArbol(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #recuperarArbol(java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.ArchivoVO handleRecuperarArbol(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService#consultaCuota(java.lang.String, java.lang.Long, java.lang.Long)
     */
    public java.lang.Boolean consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio) - 'identificador' can not be null");
        }
        if (espacioLibre == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio) - 'espacioLibre' can not be null");
        }
        if (espacioOdeInicio == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio) - 'espacioOdeInicio' can not be null");
        }
        try
        {
            return this.handleConsultaCuota(identificador, espacioLibre, espacioOdeInicio);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvGestorArchivosServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService.consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaCuota(java.lang.String, java.lang.Long, java.lang.Long)}
      */
    protected abstract java.lang.Boolean handleConsultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.empaquetador.negocio.PrincipalStore.get();
    }
}