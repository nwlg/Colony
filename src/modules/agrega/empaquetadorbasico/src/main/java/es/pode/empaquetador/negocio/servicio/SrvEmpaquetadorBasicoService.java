// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * <html>
 * </p>
 * <p>
 * <head>
 * </p>
 * <p>
 * </head>
 * </p>
 * <p>
 * <body>
 * </p>
 * <p>
 * <p>
 * </p>
 * <p>
 * El Servicio de Empaquetacion implementa los metodos necesarios
 * para
 * </p>
 * <p>
 * gestionar la edici&#243;n y creacion de un Objeto Digital
 * Educativo (ODE).
 * </p>
 * <p>
 * Los metodos permiten:
 * </p>
 * <p>
 * </p>
 * </p>
 * <p>
 * <ul>
 * </p>
 * <p>
 * <li>
 * </p>
 * <p>
 * Almacenar en el servidor los cambios realizados desde la
 * sesi&#243;n del
 * </p>
 * <p>
 * Portal Empaquetador.
 * </p>
 * <p>
 * </li>
 * </p>
 * <p>
 * <li>
 * </p>
 * <p>
 * Parsear y escribir los manifiestos cumpliendo los estandares
 * SCORM2004
 * </p>
 * <p>
 * y LOM-ES mediante el uso de la libreria parseadorXML.jar y de
 * las
 * </p>
 * <p>
 * utilidades Castor y Dozer.
 * </p>
 * <p>
 * </li>
 * </p>
 * <p>
 * <li>
 * </p>
 * <p>
 * Acceder a los servicios web de Localizaci&#243;n,
 * Publicaci&#243;n, Validaci&#243;n,
 * </p>
 * <p>
 * Catalogaci&#243;n, Entregar.
 * </p>
 * <p>
 * </li>
 * </p>
 * <p>
 * </ul>
 * </p>
 * <p>
 * <p>
 * </p>
 * <p>
 * &#160;
 * </p>
 * <p>
 * </p>
 * </p>
 * <p>
 * </body>
 * </p>
 * <p>
 * </html>
 * </p>
 */
public interface SrvEmpaquetadorBasicoService
{
  /**
   * <p>
   * Editar ODE actual. Llama internamente a la operación editarOde
   * del servicio GestorManifest y a continuación realiza aplanado de
   * organizaciones y submanifiestos que pudiera haber.
   * </p>
      * @param idOde  Ode que se va a editar
      * @return es.pode.empaquetador.negocio.servicio.OdeVO
   */
    public es.pode.empaquetador.negocio.servicio.OdeVO editarOde(java.lang.String idOde);

  /**
   * <p>
   * Agrega un paquete, sea un Ode, un RCP (Resource Content Package)
   * o un conjunto de ficheros, comprimidos o no.
   * </p>
      * @param idOde  Identificador del ODE en edicion.
         * @param fichero  Fichero del paquete a agregar
         * @param idGrupo  Identificador del Item donde se esta agregando el contenido. Es el item bajo el cual se creara el nuevo item que referencia al contenido agregado.
      */
    public void agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo);

  /**
   * <p>
   * Devuelve la lista de items que referencian a este fichero dentro
   * de este Ode
   * </p>
      * @param idOde  Identificador del Ode
         * @param fichero  Fichero para el que buscamos referencias
      * @return es.pode.empaquetador.negocio.servicio.GrupoVO[]
   */
    public es.pode.empaquetador.negocio.servicio.GrupoVO[] referenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero);

  /**
   * <p>
   * Elimina del Ode el fichero indicado.
   * </p>
   * <p>
   * Si es referenciado por algún item o recurso, no se elimina a no
   * ser que checked=true.
   * </p>
   * <p>
   * Devuelve true si se eliminó los ficheros, false si alguno es
   * referenciado por algún item o recurso.
   * </p>
      * @param idOde  Identificador del Ode del que se borrarán los ficheros
         * @param ficheros  Ficheros que se eliminarán.
         * @param checked  Bandera que indica si se desea seguir adelante con el borrado aunque algún fichero esté referenciado
      * @return boolean
   */
    public boolean eliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked);

  /**
   * <p>
   * Desagregar items a Ode autogenerado.
   * </p>
   * <p>
   * El ode se almacena en objetos personales del usuario.
   * </p>
      * @param idOde  Ode origen
         * @param items  Lista de items a desagregar
      * @return java.lang.String
   */
    public java.lang.String desagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items);

  /**
   * <p>
   * Crea un objeto HTML con el código embebido suministrado.
   * </p>
   * <p>
   * Inserta el código dado en una plantilla HTML simple, en el lugar
   * del Body.
   * </p>
   * <p>
   * No se chequea la validez o corrección del HTML resultante.
   * </p>
      * @param idOde  Ode en el que quedará insertado
         * @param contenido  Código HTML a embeber
      * @return es.pode.empaquetador.negocio.servicio.ArchivoVO
   */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO crearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido);

  /**
   * <p>
   * Importa un ODE del repositorio indicado al ODE actual, bajo el
   * identificador de grupo dado.
   * </p>
      * @param idOde  Identificador del ODE en edicion
         * @param idLocalizador  Identificador del ODE del repositorio que desea agregarse al ODE actual.
         * @param idGrupo  Identificador del grupo bajo el que se agregan los contenidos.
      */
    public void agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo);

  /**
   * <p>
   * Asocia los ficheros dados al Recurso referenciado por el Item
   * dado. Si no existe, se creará uno nuevo.
   * </p>
   * <p>
   * Emplea las operaciones crearRecurso y modificarRecurso del
   * servicio GestorManifestService.
   * </p>
      * @param idOde  Identificador del ODE al que se asociarán los contenidos
         * @param idGrupo  Identificador del Grupo bajo el que se asociarán los contenidos
         * @param ficheros  Contenidos para asociar
         * @param href  Href del fichero principal o URL asociada al Grupo.
      */
    public void asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href);

  /**
   * <p>
   * Elimina el grupo indicado.
   * </p>
      * @param idOde  identificador del Ode del que se borrará el grupo
         * @param idGrupo  Grupo que se debe eliminar
         * @param eliminarFicheros  true: elimina los ficheros asociados a este recurso que no estan referenciados por otros recursos.
      */
    public void eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros);

  /**
   * <p>
   * Copia los ficheros / carpetas especificados a la carpeta de
   * destino deseada. A continuación elimina los ficheros / carpetas
   * de origen con una llamada a eliminar.
   * </p>
   * <p>
   * Usa la operación cortar del servicio GestorArchivosService.
   * </p>
      * @param identificador  Identificador del ODE en que estamos trabajando.
         * @param carpetaDestino  Ruta relativa a la localizacion del ODE en que se esta trabajando donde se desean copiar los ficheros / carpetas.
         * @param ficheros  Ficheros / carpetas que se desean mover.
      */
    public void cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros);

  /**
   * <p>
   * Modifica el nombre del fichero o carpeta deseado.
   * </p>
   * <p>
   * Llama al SrvGestorArchivosService.renombrar
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando.
         * @param carpetaPadre  Carpeta que contiene el fichero/carpeta a cambiar.
         * @param nombre  Nombre del fichero / carpeta a renombrar
         * @param nuevoNombre  Nuevo nombre del fichero / carpeta a cambiar.
      */
    public void renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre);

  /**
   * <p>
   * Desagregar items a Ode autogenerado.
   * </p>
   * <p>
   * El paquete SCORM2004 con el ODE generado al exportar las
   * carpetas se devuelve como un DataHandler
   * </p>
      * @param idOde  Ode origen
         * @param items  Lista de items a desagregar
      * @return javax.activation.DataHandler
   */
    public javax.activation.DataHandler desagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items);

  /**
   * <p>
   * Analiza el archivo dado y determina si es un RCP, un ODE
   * (devuelve "CA"), un archivo ZIP o un fichero individual.
   * </p>
      * @param rutaArchivo  Ruta al fichero pendiente de análisis
         * @param rutaDescomprimido  Ruta donde se descomprimirá el fichero si es un ZIP
      * @return es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO
   */
    public es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO analizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido);

    public java.lang.String editarObjetoEmbebido(java.lang.String idOde, java.lang.String file);

    public void agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo);

}
