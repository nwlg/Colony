// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService
 */
public abstract class SrvEmpaquetadorBasicoServiceBase
    implements es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService
{

		 protected static final Logger logger = Logger.getLogger(SrvEmpaquetadorBasicoServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    private es.pode.empaquetador.negocio.servicio.SrvGestorManifestService srvGestorManifestService;
	
	    /**
	     * Sets the reference to <code>srvGestorManifestService</code>.
	     */
	    public void setSrvGestorManifestService(es.pode.empaquetador.negocio.servicio.SrvGestorManifestService srvGestorManifestService)
	    {
	        this.srvGestorManifestService = srvGestorManifestService;
	    }
	
	    /**
	     * Gets the reference to <code>srvGestorManifestService</code>.
	     */
	    protected es.pode.empaquetador.negocio.servicio.SrvGestorManifestService getSrvGestorManifestService()
	    {
	        return this.srvGestorManifestService;
	    }
	    
	        
	
	        
    
	    	    private es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService srvGestorArchivosService;
	
	    /**
	     * Sets the reference to <code>srvGestorArchivosService</code>.
	     */
	    public void setSrvGestorArchivosService(es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService srvGestorArchivosService)
	    {
	        this.srvGestorArchivosService = srvGestorArchivosService;
	    }
	
	    /**
	     * Gets the reference to <code>srvGestorArchivosService</code>.
	     */
	    protected es.pode.empaquetador.negocio.servicio.SrvGestorArchivosService getSrvGestorArchivosService()
	    {
	        return this.srvGestorArchivosService;
	    }
	    
	        
	
	        
    
	    	    	    
		    private es.pode.soporte.zip.TrueZipDaoImpl zipDao;
		
		    /**
		     * Sets the reference to <code>zipDao</code>.
		     */
		    public void setZipDao(es.pode.soporte.zip.TrueZipDaoImpl zipDao)
		    {
		        this.zipDao = zipDao;
		    }
		
		    /**
		     * Gets the reference to <code>zipDao</code>.
		     */
		    protected es.pode.soporte.zip.TrueZipDaoImpl getZipDao()
		    {
		        return this.zipDao;
		    }
	    
	        
	
			
    protected final es.pode.validador.negocio.servicio.SrvValidadorService getSrvValidadorService()
	        throws java.lang.Exception
	    {
            String srvValidadorServiceFile="importedServices.properties";	    
	          java.io.InputStream srvValidadorServiceInputStream=SrvEmpaquetadorBasicoServiceBase.class.getClassLoader().getResourceAsStream(srvValidadorServiceFile);
	          java.util.Properties srvValidadorServiceProperties = new java.util.Properties();
	          srvValidadorServiceProperties.load(srvValidadorServiceInputStream);
	          String srvValidadorServiceEndPointAddress="";
	          srvValidadorServiceEndPointAddress=(String) srvValidadorServiceProperties.get("srvValidadorServicePort");
			  logger.debug("srvValidadorServiceEndPointAddress del fichero --> " + srvValidadorServiceEndPointAddress);
			  es.pode.validador.negocio.servicio.SrvValidadorServiceService srvValidadorService = new es.pode.validador.negocio.servicio.SrvValidadorServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvValidadorServiceEndPointAddress.length()>0) 
					  ((es.pode.validador.negocio.servicio.SrvValidadorServiceServiceLocator)srvValidadorService).setSrvValidadorServiceEndpointAddress(srvValidadorServiceEndPointAddress);
	    	    es.pode.validador.negocio.servicio.SrvValidadorService port = srvValidadorService.getSrvValidadorService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.publicacion.negocio.servicios.SrvPublicacionService getSrvPublicacionService()
	        throws java.lang.Exception
	    {
            String srvPublicacionServiceFile="importedServices.properties";	    
	          java.io.InputStream srvPublicacionServiceInputStream=SrvEmpaquetadorBasicoServiceBase.class.getClassLoader().getResourceAsStream(srvPublicacionServiceFile);
	          java.util.Properties srvPublicacionServiceProperties = new java.util.Properties();
	          srvPublicacionServiceProperties.load(srvPublicacionServiceInputStream);
	          String srvPublicacionServiceEndPointAddress="";
	          srvPublicacionServiceEndPointAddress=(String) srvPublicacionServiceProperties.get("srvPublicacionServicePort");
			  logger.debug("srvPublicacionServiceEndPointAddress del fichero --> " + srvPublicacionServiceEndPointAddress);
			  es.pode.publicacion.negocio.servicios.SrvPublicacionServiceService srvPublicacionService = new es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvPublicacionServiceEndPointAddress.length()>0) 
					  ((es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator)srvPublicacionService).setSrvPublicacionServiceEndpointAddress(srvPublicacionServiceEndPointAddress);
	    	    es.pode.publicacion.negocio.servicios.SrvPublicacionService port = srvPublicacionService.getSrvPublicacionService();	    
	          return port;
	    }

    
    
	
	        
    
	    	    	    
		    private es.pode.parseadorXML.SCORM2004Dao scormDao;
		
		    /**
		     * Sets the reference to <code>scormDao</code>.
		     */
		    public void setScormDao(es.pode.parseadorXML.SCORM2004Dao scormDao)
		    {
		        this.scormDao = scormDao;
		    }
		
		    /**
		     * Gets the reference to <code>scormDao</code>.
		     */
		    protected es.pode.parseadorXML.SCORM2004Dao getScormDao()
		    {
		        return this.scormDao;
		    }
	    
	        
	
			
    protected final es.pode.localizador.negocio.servicios.SrvLocalizadorService getSrvLocalizadorService()
	        throws java.lang.Exception
	    {
            String srvLocalizadorServiceFile="importedServices.properties";	    
	          java.io.InputStream srvLocalizadorServiceInputStream=SrvEmpaquetadorBasicoServiceBase.class.getClassLoader().getResourceAsStream(srvLocalizadorServiceFile);
	          java.util.Properties srvLocalizadorServiceProperties = new java.util.Properties();
	          srvLocalizadorServiceProperties.load(srvLocalizadorServiceInputStream);
	          String srvLocalizadorServiceEndPointAddress="";
	          srvLocalizadorServiceEndPointAddress=(String) srvLocalizadorServiceProperties.get("srvLocalizadorServicePort");
			  logger.debug("srvLocalizadorServiceEndPointAddress del fichero --> " + srvLocalizadorServiceEndPointAddress);
			  es.pode.localizador.negocio.servicios.SrvLocalizadorServiceService srvLocalizadorService = new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvLocalizadorServiceEndPointAddress.length()>0) 
					  ((es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator)srvLocalizadorService).setSrvLocalizadorServiceEndpointAddress(srvLocalizadorServiceEndPointAddress);
	    	    es.pode.localizador.negocio.servicios.SrvLocalizadorService port = srvLocalizadorService.getSrvLocalizadorService();	    
	          return port;
	    }

    
    

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#editarOde(java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.OdeVO editarOde(java.lang.String idOde)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.editarOde(java.lang.String idOde) - 'idOde' can not be null");
        }
        try
        {
            return this.handleEditarOde(idOde);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.editarOde(java.lang.String idOde)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #editarOde(java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.OdeVO handleEditarOde(java.lang.String idOde)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#agregarLocal(java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO, java.lang.String)
     */
    public void agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo) - 'idOde' can not be null");
        }
        if (fichero == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo) - 'fichero' can not be null");
        }
        if (idGrupo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo) - 'idGrupo' can not be null");
        }
        try
        {
            this.handleAgregarLocal(idOde, fichero, idGrupo);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #agregarLocal(java.lang.String, es.pode.empaquetador.negocio.servicio.FicheroVO, java.lang.String)}
      */
    protected abstract void handleAgregarLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.FicheroVO fichero, java.lang.String idGrupo)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#referenciadoPor(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO)
     */
    public es.pode.empaquetador.negocio.servicio.GrupoVO[] referenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.referenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero) - 'idOde' can not be null");
        }
        if (fichero == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.referenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero) - 'fichero' can not be null");
        }
        try
        {
            return this.handleReferenciadoPor(idOde, fichero);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.referenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #referenciadoPor(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.GrupoVO[] handleReferenciadoPor(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO fichero)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#eliminarFicheros(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[], boolean)
     */
    public boolean eliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked) - 'idOde' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked) - 'ficheros' can not be null");
        }
        try
        {
            return this.handleEliminarFicheros(idOde, ficheros, checked);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarFicheros(java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[], boolean)}
      */
    protected abstract boolean handleEliminarFicheros(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros, boolean checked)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#desagregarItem(java.lang.String, es.pode.empaquetador.negocio.servicio.GrupoVO[])
     */
    public java.lang.String desagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items) - 'idOde' can not be null");
        }
        if (items == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items) - 'items' can not be null");
        }
        try
        {
            return this.handleDesagregarItem(idOde, items);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #desagregarItem(java.lang.String, es.pode.empaquetador.negocio.servicio.GrupoVO[])}
      */
    protected abstract java.lang.String handleDesagregarItem(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#crearObjetoEmbebido(java.lang.String, java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO crearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.crearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido) - 'idOde' can not be null");
        }
        if (contenido == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.crearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido) - 'contenido' can not be null");
        }
        try
        {
            return this.handleCrearObjetoEmbebido(idOde, contenido);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.crearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearObjetoEmbebido(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.ArchivoVO handleCrearObjetoEmbebido(java.lang.String idOde, java.lang.String contenido)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#agregarRepositorio(java.lang.String, java.lang.String, java.lang.String)
     */
    public void agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo) - 'idOde' can not be null");
        }
        if (idLocalizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo) - 'idLocalizador' can not be null");
        }
        if (idGrupo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo) - 'idGrupo' can not be null");
        }
        try
        {
            this.handleAgregarRepositorio(idOde, idLocalizador, idGrupo);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #agregarRepositorio(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleAgregarRepositorio(java.lang.String idOde, java.lang.String idLocalizador, java.lang.String idGrupo)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#asociarContenidos(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FileVO[], java.lang.String)
     */
    public void asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href) - 'idOde' can not be null");
        }
        if (idGrupo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href) - 'idGrupo' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href) - 'ficheros' can not be null");
        }
        try
        {
            this.handleAsociarContenidos(idOde, idGrupo, ficheros, href);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.asociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #asociarContenidos(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.FileVO[], java.lang.String)}
      */
    protected abstract void handleAsociarContenidos(java.lang.String idOde, java.lang.String idGrupo, es.pode.empaquetador.negocio.servicio.FileVO[] ficheros, java.lang.String href)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#eliminarGrupo(java.lang.String, java.lang.String, java.lang.Boolean)
     */
    public void eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros) - 'idOde' can not be null");
        }
        if (idGrupo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros) - 'idGrupo' can not be null");
        }
        if (eliminarFicheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros) - 'eliminarFicheros' can not be null");
        }
        try
        {
            this.handleEliminarGrupo(idOde, idGrupo, eliminarFicheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.eliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarGrupo(java.lang.String, java.lang.String, java.lang.Boolean)}
      */
    protected abstract void handleEliminarGrupo(java.lang.String idOde, java.lang.String idGrupo, java.lang.Boolean eliminarFicheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#cortar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])
     */
    public void cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'identificador' can not be null");
        }
        if (carpetaDestino == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'carpetaDestino' can not be null");
        }
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros) - 'ficheros' can not be null");
        }
        try
        {
            this.handleCortar(identificador, carpetaDestino, ficheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #cortar(java.lang.String, java.lang.String, es.pode.empaquetador.negocio.servicio.ArchivoVO[])}
      */
    protected abstract void handleCortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#renombrar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public void renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'identificador' can not be null");
        }
        if (nombre == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'nombre' can not be null");
        }
        if (nuevoNombre == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre) - 'nuevoNombre' can not be null");
        }
        try
        {
            this.handleRenombrar(identificador, carpetaPadre, nombre, nuevoNombre);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #renombrar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleRenombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#desagregarItemLocal(java.lang.String, es.pode.empaquetador.negocio.servicio.GrupoVO[])
     */
    public javax.activation.DataHandler desagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items) - 'idOde' can not be null");
        }
        if (items == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items) - 'items' can not be null");
        }
        try
        {
            return this.handleDesagregarItemLocal(idOde, items);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.desagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #desagregarItemLocal(java.lang.String, es.pode.empaquetador.negocio.servicio.GrupoVO[])}
      */
    protected abstract javax.activation.DataHandler handleDesagregarItemLocal(java.lang.String idOde, es.pode.empaquetador.negocio.servicio.GrupoVO[] items)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#analizaArchivo(java.lang.String, java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO analizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido)
    {
        if (rutaArchivo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.analizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido) - 'rutaArchivo' can not be null");
        }
        if (rutaDescomprimido == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.analizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido) - 'rutaDescomprimido' can not be null");
        }
        try
        {
            return this.handleAnalizaArchivo(rutaArchivo, rutaDescomprimido);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.analizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #analizaArchivo(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO handleAnalizaArchivo(java.lang.String rutaArchivo, java.lang.String rutaDescomprimido)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#editarObjetoEmbebido(java.lang.String, java.lang.String)
     */
    public java.lang.String editarObjetoEmbebido(java.lang.String idOde, java.lang.String file)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.editarObjetoEmbebido(java.lang.String idOde, java.lang.String file) - 'idOde' can not be null");
        }
        if (file == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.editarObjetoEmbebido(java.lang.String idOde, java.lang.String file) - 'file' can not be null");
        }
        try
        {
            return this.handleEditarObjetoEmbebido(idOde, file);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.editarObjetoEmbebido(java.lang.String idOde, java.lang.String file)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #editarObjetoEmbebido(java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.String handleEditarObjetoEmbebido(java.lang.String idOde, java.lang.String file)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService#agregarLocalFichero(java.lang.String, java.lang.String, java.lang.String)
     */
    public void agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo) - 'idOde' can not be null");
        }
        if (fichero == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo) - 'fichero' can not be null");
        }
        if (idGrupo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo) - 'idGrupo' can not be null");
        }
        try
        {
            this.handleAgregarLocalFichero(idOde, fichero, idGrupo);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService.agregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #agregarLocalFichero(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleAgregarLocalFichero(java.lang.String idOde, java.lang.String fichero, java.lang.String idGrupo)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.empaquetador.negocio.PrincipalStore.get();
    }
}