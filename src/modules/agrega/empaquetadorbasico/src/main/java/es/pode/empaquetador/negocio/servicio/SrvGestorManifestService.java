// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * Servicio web que gestiona las operaciones sobre Manifiestos
 * SCORM2004 almacenando los cambios en una cache estatica
 * (HashMap).
 * </p>
 */
public interface SrvGestorManifestService
{
  /**
   * <p>
   * Carga un objeto manifests existente en la cache para su edición
   * desde el Empaquetador.
   * </p>
      * @param identificador  Identificador del Ode a cargar.
      * @return es.pode.empaquetador.negocio.servicio.OdeVO
   */
    public es.pode.empaquetador.negocio.servicio.OdeVO cargarManifest(java.lang.String identificador);

  /**
   * <p>
   * Eliminar de la cache el objeto Manifest.
   * </p>
      * @param identificador  Identificador del objeto Manifest que se descargará de cache
      * @return java.lang.Boolean
   */
    public java.lang.Boolean descargarManifest(java.lang.String identificador);

  /**
   * <p>
   * Crea un objeto Item bajo la Organization / Item deseada a partir
   * del Grupo
   * </p>
      * @param identificador  Identificador del ODE en edicion.
         * @param grupoVO  Objeto VO con los datos del Item a crear.
         * @param identificadorPadre  Identificador del objeto organization / item en el que se crea el nuevo item.
      * @return java.lang.String
   */
    public java.lang.String crearGrupo(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.GrupoVO grupoVO, java.lang.String identificadorPadre);

  /**
   * <p>
   * Modifica un Item del ODE en edicion.
   * </p>
      * @param identificador  Identificador del ODE en edicion.
         * @param grupoVO  Grupo VO que identifica el ODE a cambiar y los cambios.
      * @return java.lang.String
   */
    public java.lang.String modificarGrupo(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.GrupoVO grupoVO);

  /**
   * <p>
   * Elimina el objeto Item deseado del ODE en edición.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param identificadorGrupo  Identificador del grupo a eliminar.
      * @return java.lang.String
   */
    public java.lang.String eliminarGrupo(java.lang.String identificador, java.lang.String identificadorGrupo);

  /**
   * <p>
   * Añade un vinculo entre un Item y otro elemento (Resource o
   * Manifest).
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param identificadorGrupo  Identificador del Grupo cuyo idRef debe apuntar al recurso.
         * @param identificadorRecurso  Identificador del Recurso.
      * @return java.lang.String
   */
    public java.lang.String vincularGrupo(java.lang.String identificador, java.lang.String identificadorGrupo, java.lang.String identificadorRecurso);

  /**
   * <p>
   * Desvincula el Item de su elemento referenciado.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param identificadorGrupo  Identificador del Grupo.
      * @return java.lang.String
   */
    public java.lang.String desvincularGrupo(java.lang.String identificador, java.lang.String identificadorGrupo);

  /**
   * <p>
   * Genera un imsmanifest.xml a partir del objeto Manifest
   * almacenado en la cache.
   * </p>
      * @param identificador  Identificador del ODE en edición.
      */
    public void guardarManifiesto(java.lang.String identificador);

  /**
   * <p>
   * Crea una nueva organizacion para el ODE en edición.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param organizacion  VO con los datos de la organizacion a generar.
      * @return java.lang.String
   */
    public java.lang.String crearOrganizacion(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.OrganizacionVO organizacion);

  /**
   * <p>
   * Elimina la organizacion del ODE en edición.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param idOrganizacion  Identificador de la organizacion a eliminar.
      * @return java.lang.String
   */
    public java.lang.String eliminarOrganizacion(java.lang.String identificador, java.lang.String idOrganizacion);

  /**
   * <p>
   * Modifica la organización deseada.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param organizacion  VO de la organizacion a modificar.
      * @return java.lang.String
   */
    public java.lang.String modificarOrganizacion(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.OrganizacionVO organizacion);

  /**
   * <p>
   * Cambia la organizacion por defecto.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param idOrganizacion  Identificador de la organización por defecto.
      * @return java.lang.String
   */
    public java.lang.String fijarOrganizacionPorDefecto(java.lang.String identificador, java.lang.String idOrganizacion);

    public java.lang.String agregarManifiestoZIP(java.lang.String identificador, javax.activation.DataHandler paqueteSCORM, java.lang.String submanifestId);

  /**
   * <p>
   * Agrega un ODE del repositorio como submanifiesto del ODE actual.
   * </p>
      * @param identificador  Identificador del ODE en que se está trabajando.
         * @param localizador  Localizador del ODE publicador que se quiere agregar.
         * @param submanifestId  Este atributo, cuando es distinto de null, indica el submanifiesto del manifiesto principal en que se desea agregar el nuevo manifiesto. El metodo internamente debe resolver el 'base' completo donde deben descomprimirse los archivos  del submanifiesto.
      * @return java.lang.String
   */
    public java.lang.String agregarManifiestoRepositorio(java.lang.String identificador, java.lang.String localizador, java.lang.String submanifestId);

  /**
   * <p>
   * Desagrega un submanifiesto del ODE en que se esta trabajando
   * para que el usuario lo tenga disponible en local. El retorno es
   * un paquete SCORM 2004 serializado en un datahandler.
   * </p>
      * @param identificador  Identificador del ODE en que es esta trabajando.
         * @param submanifiesto  Identificador del submanifiesto que se quiere desagregar.
         * @param submanifestId  Este atributo, cuando es distinto de null, indica el submanifiesto del manifiesto principal en que se desea agregar el nuevo manifiesto. El metodo internamente debe resolver el 'base' completo donde deben buscarse los archivos  del submanifiesto.
      * @return javax.activation.DataHandler
   */
    public javax.activation.DataHandler desagregarSubmanifiestoLocal(java.lang.String identificador, java.lang.String submanifiesto, java.lang.String submanifestId);

  /**
   * <p>
   * Elimina un submanifiesto del ODE en que se esta trabajando. No
   * elimina los archivos, ya que esta funcionalidad se puede
   * realizar desde el gestor de archivos.
   * </p>
      * @param identificador  Identificador del ODE en que estamos trabajando.
         * @param submanifiestoId  Identificador del submanifiesto que se desea eliminar.
         * @param idSubmanifestPadre  Identificador del submanifiesto en que se esta navegando. En caso de que se este navegando en el principal, idSubmanifestPadre=null
      * @return java.lang.String
   */
    public java.lang.String eliminarSubmanifiesto(java.lang.String identificador, java.lang.String submanifiestoId, java.lang.String idSubmanifestPadre);

  /**
   * <p>
   * Desagrega un submanifiesto a la carpeta taller del usuario.
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando
         * @param submanifiestoId  Identificador del submanifiesto que se quiere desagregar.
         * @param submanifestId  Este atributo, cuando es distinto de null, indica el submanifiesto del manifiesto principal en que se desea agregar el nuevo manifiesto. El metodo internamente debe resolver el 'base' completo donde deben buscarse los archivos  del submanifiesto.
      */
    public void desagregarSubmanifiestoRepositorio(java.lang.String identificador, java.lang.String submanifiestoId, java.lang.String submanifestId);

  /**
   * <p>
   * Inicia la edición de un nuevo ODE. Para ello, crea un
   * localizador no publicador, registra un nuevo Manifest en la
   * cacheEmpaquetacion, crea la estructura de carpetas inicial y
   * inicia la catalogacion con un Lom vacío. El resultado es un
   * OdeVO describiendo el nuevo ODE.
   * </p>
         * @param titulo  Titulo para el nuevo ODE
         * @param idioma  Idioma para registrar el titulo en el LOM-ES
      * @return es.pode.empaquetador.negocio.servicio.OdeVO
   */
    public es.pode.empaquetador.negocio.servicio.OdeVO iniciarNuevoODE(java.lang.String user, java.lang.String titulo, java.lang.String idioma);

  /**
   * <p>
   * Comienza la edicion de un ODE existente en la carpeta taller del
   * usuario. Esta operacion incluye cargar el Manifest en la cache,
   * generar un backup de los contenidos previos y registrar los
   * objetos Lom asociados al Ode en el servicio de catalogación. El
   * resultado es un objeto OdeVO con los datos del ODE a editar.
   * </p>
      * @param identificador  Identificador del Ode que se desea editar.
      * @return es.pode.empaquetador.negocio.servicio.OdeVO
   */
    public es.pode.empaquetador.negocio.servicio.OdeVO editarODE(java.lang.String identificador);

  /**
   * <p>
   * Finaliza la edición del ODE. Esta operación implica eliminar de
   * la cache el Manifest en edición, eliminar del servicio de
   * Catalogación todos los objetos Lom asociados a este Ode. Y
   * eliminar los backups que se generan al comenzar la edición o al
   * guardar.
   * </p>
      * @param identificador  Identificador del ODE que se desea terminar.
      */
    public void terminarEdicion(java.lang.String identificador);

  /**
   * <p>
   * Crear un recurso en el objeto manifest.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param recurso  Datos del recurso que se desea crear.
      * @return java.lang.String
   */
    public java.lang.String crearRecurso(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.RecursoVO recurso);

  /**
   * <p>
   * Elimina los recursos solicitados y desvincula los grupos y
   * recursos que dependieran de ellos.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param recursos  Identificadores de los recursos a eliminar
      */
    public void eliminarRecursos(java.lang.String identificador, java.lang.String[] recursos);

    public java.lang.String modificarRecurso(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.RecursoVO recurso);

  /**
   * <p>
   * Llama al servicio de catalogación para recuperar (y eliminar de
   * su cache) el objeto Lom asociado al identificador del objeto
   * deseado. Si el objeto Lom esta vacío, no se asocia al objeto.
   * </p>
   * <p>
   * Los cambios se almacenan en la cacheEmpaquetacion.
   * </p>
      * @param identificador  Identificador del ode que se esta editando.
         * @param idElemento  Identificador del objeto (Manifest,Organization,Item,Resource) cuyo objeto Lom se desea obtener del servicio de catalogacion.
         * @param href  Atributo href del objeto File asociado a un recurso. Solo se requiere cuando se desea recuperar el objeto Lom asociado al File de un objeto resource, siendo el identificador idElemento+href. En caso contrario, href debe ser null.
      */
    public void asociarLom(java.lang.String identificador, java.lang.String idElemento, java.lang.String href);

  /**
   * <p>
   * Llama al servicio de catalogacion para cargar el objeto Lom
   * asociado al objeto que se desea catalogar. Si no existe un
   * objeto Lom previo, se carga uno vacio. El valor de retorno es el
   * identificador con que se ha almacenado el objeto Lom en el
   * servicio de catalogación.
   * </p>
      * @param identificador  Identificador del ode que se esta editando.
         * @param idElemento  Identificador del objeto que se desea catalogar (Manifest,Organization,Item o Resource). Si se desea catalogar un File asociado a un Resource, ademas se debera dar valor al parametro href.
         * @param href  En caso de que se desée catalogar un File asociado a un Resource, este parametro especifica el href de dicho File.
 Si no se desea catalogar un File, este parametro sera null.
      * @return java.lang.String
   */
    public java.lang.String prepararCatalogacion(java.lang.String identificador, java.lang.String idElemento, java.lang.String href);

  /**
   * <p>
   * Reordena un Item moviendolo a una posición anterior en el array.
   * </p>
      * @param identificador  Identificador del ODE en edición.
         * @param idItem  Identificador del item a subir
      * @return java.lang.String
   */
    public java.lang.String subirItem(java.lang.String identificador, java.lang.String idItem);

  /**
   * <p>
   * Mueve a una posicion superior en el array el Item solicitado.
   * </p>
      * @param identificador  identificador del Ode en edición
         * @param idItem  identificador del item a bajar
      * @return java.lang.String
   */
    public java.lang.String bajarItem(java.lang.String identificador, java.lang.String idItem);

  /**
   * <p>
   * Sube la organización indicada
   * </p>
      * @param identificador  identificador del Ode en edición
         * @param idOrganization  identificador de la organización a subir
      * @return java.lang.String
   */
    public java.lang.String subirOrganization(java.lang.String identificador, java.lang.String idOrganization);

  /**
   * <p>
   * Baja la organización indicada
   * </p>
      * @param identificador  Identificador del ode en edición
         * @param idOrganization  Identificador de la organización a bajar
      * @return java.lang.String
   */
    public java.lang.String bajarOrganization(java.lang.String identificador, java.lang.String idOrganization);

  /**
   * <p>
   * Copia los elementos indicados bajo el elemento destino
   * </p>
      * @param identificador  Identificador del ode en edición
         * @param elementos  Identificadores de los elementos a copiar
         * @param destino  Elemento destino del que colgarán los elementos copiados
      */
    public void copiarElementos(java.lang.String identificador, java.lang.String[] elementos, java.lang.String destino);

  /**
   * <p>
   * Mueve los elementos indicados bajo el elemento destino
   * </p>
      * @param identificador  Identificador del ode en edición
         * @param elementos  Identificadores de los elementos a mover
         * @param destino  Elemento destino del que colgarán los elementos
      */
    public void moverElementos(java.lang.String identificador, java.lang.String[] elementos, java.lang.String destino);

  /**
   * <p>
   * Comprueba si el elemento idElemento tiene secuencia asociada y
   * mapea los cambios a su ControlMode (si la secuencia existía) o
   * crea una nueva con los datos proporcionados (en caso de que no
   * existiera).
   * </p>
      * @param identificador  Identificador del Ode en edición
         * @param idElemento  ID del elemento al que se quiere asociar la secuencia.
         * @param controlMode  ControlMode al que se mapearán los cambios
      * @return java.lang.String
   */
    public java.lang.String asociarSecuencia(java.lang.String identificador, java.lang.String idElemento, es.pode.empaquetador.negocio.servicio.ControlModeVO controlMode);

  /**
   * <p>
   * Extrae el elemento solicitado del Manifesto y lo introduce en la
   * cache como referencia para futuras modificaciones (edicion de
   * submanifiestos).
   * </p>
      * @param identificador  Identificador del Ode en edicion
         * @param idElemento  identificador del elemento que se quiere meter en caché
      * @return java.lang.Boolean
   */
    public java.lang.Boolean crearReferenciaEnCache(java.lang.String identificador, java.lang.String idElemento);

  /**
   * <p>
   * Retorna el OdeVO del manifiesto / submanifiesto principal
   * editado.
   * </p>
      * @param identificador  Identificador del Ode en edicion.
         * @param paqueteRCP  Datahandler recubriendo el archivo comprimido con los recursos a importar.
         * @param submanifestId  Si es distinto de null, identificador del submanifiesto donde se deben almacenar los recursos. El metodo sera responsable de resolver el base completo para obtener la ruta donde almacenar los archivos.
      */
    public void importarRecursos(java.lang.String identificador, javax.activation.DataHandler paqueteRCP, java.lang.String submanifestId);

  /**
   * <p>
   * Retorna un paquete con los recursos exportados en formato RCP.
   * </p>
      * @param identificador  Identificador del Ode en edicion.
         * @param recursos  Identificadores de los recursos a exportar.
         * @param submanifestId  Si es distinto de null, identificador del submanifiesto donde se deben buscar los recursos. El metodo sera responsable de resolver el base completo para obtener la ruta donde encontrar los archivos.
         * @param nombre  Nombre del paquete de recursos a generar.
      * @return javax.activation.DataHandler
   */
    public javax.activation.DataHandler exportarRecursos(java.lang.String identificador, java.lang.String[] recursos, java.lang.String submanifestId, java.lang.String nombre);

  /**
   * <p>
   * Llama al servicio de validacion
   * </p>
      * @param identificador  identificador del Ode en edicion.
         * @param tipo  Tipo de validacion deseada:
 LIGERA
 BINARIA
 COMPLETA
      * @return es.pode.empaquetador.negocio.servicio.ValidaVO
   */
    public es.pode.empaquetador.negocio.servicio.ValidaVO validar(java.lang.String identificador, java.lang.String tipo);

  /**
   * <p>
   * Carga en el servicio de Entregar el Objeto Digital Educativo que
   * se quiere previsualizar. El identificador devuelto por el
   * servicio de entregar se usara para llamar al modulo
   * Visualizador.
   * </p>
      * @param identificador  Identificador del ODE en edicion.
      * @return java.lang.String
   */
    public java.lang.String previsualizarOde(java.lang.String identificador);

  /**
   * <p>
   * Obtiene un listado de objetos personales del usuario.
   * </p>
      * @return es.pode.empaquetador.negocio.servicio.TransicionVO[]
   */
    public es.pode.empaquetador.negocio.servicio.TransicionVO[] obtenerObjetosPersonales(java.lang.String user);

  /**
   * <p>
   * Elimina fisicamente el ODE (se usara para eliminar aquellos ODEs
   * que se cierran sin haber sido guardados por primera vez).
   * </p>
      * @param identificador  Identificador del Ode a borrar
      */
    public void eliminarODE(java.lang.String identificador);

    public es.pode.empaquetador.negocio.servicio.OdeVO generarMetadatoInicial(java.lang.String titulo, java.lang.String idioma, java.lang.String identificador);

    public void asociarDatosItem(java.lang.String identificador, java.lang.String idElemento, es.pode.empaquetador.negocio.servicio.TimeLimitActionVO timeLimitAction, es.pode.empaquetador.negocio.servicio.DataFromLMSVO dataFromLMS, es.pode.empaquetador.negocio.servicio.CompletionThresholdVO completionThreshold, es.pode.empaquetador.negocio.servicio.PresentationVO presentation);

  /**
   * <p>
   * Obtiene un listado de los objetos compartidos por otros usuarios
   * </p>
   * @return es.pode.empaquetador.negocio.servicio.TransicionVO[]
   */
    public es.pode.empaquetador.negocio.servicio.TransicionVO[] obtenerObjetosCompartidos();

    public java.lang.String agregarManifiestoZipUrl(java.lang.String identificador, java.lang.String fichero, java.lang.String submanifestId);

}
