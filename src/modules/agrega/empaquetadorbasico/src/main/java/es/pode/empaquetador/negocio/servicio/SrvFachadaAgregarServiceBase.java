// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService
 */
public abstract class SrvFachadaAgregarServiceBase
    implements es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService
{

		 protected static final Logger logger = Logger.getLogger(SrvFachadaAgregarServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    private es.pode.empaquetador.negocio.servicio.SrvGestorManifestService srvGestorManifestService;
	
	    /**
	     * Sets the reference to <code>srvGestorManifestService</code>.
	     */
	    public void setSrvGestorManifestService(es.pode.empaquetador.negocio.servicio.SrvGestorManifestService srvGestorManifestService)
	    {
	        this.srvGestorManifestService = srvGestorManifestService;
	    }
	
	    /**
	     * Gets the reference to <code>srvGestorManifestService</code>.
	     */
	    protected es.pode.empaquetador.negocio.servicio.SrvGestorManifestService getSrvGestorManifestService()
	    {
	        return this.srvGestorManifestService;
	    }
	    
	        
	
	        
    
	    	    private es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService srvEmpaquetadorBasicoService;
	
	    /**
	     * Sets the reference to <code>srvEmpaquetadorBasicoService</code>.
	     */
	    public void setSrvEmpaquetadorBasicoService(es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService srvEmpaquetadorBasicoService)
	    {
	        this.srvEmpaquetadorBasicoService = srvEmpaquetadorBasicoService;
	    }
	
	    /**
	     * Gets the reference to <code>srvEmpaquetadorBasicoService</code>.
	     */
	    protected es.pode.empaquetador.negocio.servicio.SrvEmpaquetadorBasicoService getSrvEmpaquetadorBasicoService()
	    {
	        return this.srvEmpaquetadorBasicoService;
	    }
	    
	        
	
	        
    
	    	    	    
		    private es.pode.parseadorXML.SCORM2004Dao scormDao;
		
		    /**
		     * Sets the reference to <code>scormDao</code>.
		     */
		    public void setScormDao(es.pode.parseadorXML.SCORM2004Dao scormDao)
		    {
		        this.scormDao = scormDao;
		    }
		
		    /**
		     * Gets the reference to <code>scormDao</code>.
		     */
		    protected es.pode.parseadorXML.SCORM2004Dao getScormDao()
		    {
		        return this.scormDao;
		    }
	    
	        
	
			
    protected final es.pode.catalogacion.negocio.servicios.SrvCatalogacionBasicaService getSrvCatalogacionBasicaService()
	        throws java.lang.Exception
	    {
            String srvCatalogacionBasicaServiceFile="importedServices.properties";	    
	          java.io.InputStream srvCatalogacionBasicaServiceInputStream=SrvFachadaAgregarServiceBase.class.getClassLoader().getResourceAsStream(srvCatalogacionBasicaServiceFile);
	          java.util.Properties srvCatalogacionBasicaServiceProperties = new java.util.Properties();
	          srvCatalogacionBasicaServiceProperties.load(srvCatalogacionBasicaServiceInputStream);
	          String srvCatalogacionBasicaServiceEndPointAddress="";
	          srvCatalogacionBasicaServiceEndPointAddress=(String) srvCatalogacionBasicaServiceProperties.get("srvCatalogacionBasicaServicePort");
			  logger.debug("srvCatalogacionBasicaServiceEndPointAddress del fichero --> " + srvCatalogacionBasicaServiceEndPointAddress);
			  es.pode.catalogacion.negocio.servicios.SrvCatalogacionBasicaServiceService srvCatalogacionBasicaService = new es.pode.catalogacion.negocio.servicios.SrvCatalogacionBasicaServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvCatalogacionBasicaServiceEndPointAddress.length()>0) 
					  ((es.pode.catalogacion.negocio.servicios.SrvCatalogacionBasicaServiceServiceLocator)srvCatalogacionBasicaService).setSrvCatalogacionBasicaServiceEndpointAddress(srvCatalogacionBasicaServiceEndPointAddress);
	    	    es.pode.catalogacion.negocio.servicios.SrvCatalogacionBasicaService port = srvCatalogacionBasicaService.getSrvCatalogacionBasicaService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.catalogacion.negocio.servicios.SrvCatalogacionAvanzadaService getSrvCatalogacionAvanzadaService()
	        throws java.lang.Exception
	    {
            String srvCatalogacionAvanzadaServiceFile="importedServices.properties";	    
	          java.io.InputStream srvCatalogacionAvanzadaServiceInputStream=SrvFachadaAgregarServiceBase.class.getClassLoader().getResourceAsStream(srvCatalogacionAvanzadaServiceFile);
	          java.util.Properties srvCatalogacionAvanzadaServiceProperties = new java.util.Properties();
	          srvCatalogacionAvanzadaServiceProperties.load(srvCatalogacionAvanzadaServiceInputStream);
	          String srvCatalogacionAvanzadaServiceEndPointAddress="";
	          srvCatalogacionAvanzadaServiceEndPointAddress=(String) srvCatalogacionAvanzadaServiceProperties.get("srvCatalogacionAvanzadaServicePort");
			  logger.debug("srvCatalogacionAvanzadaServiceEndPointAddress del fichero --> " + srvCatalogacionAvanzadaServiceEndPointAddress);
			  es.pode.catalogacion.negocio.servicios.SrvCatalogacionAvanzadaServiceService srvCatalogacionAvanzadaService = new es.pode.catalogacion.negocio.servicios.SrvCatalogacionAvanzadaServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvCatalogacionAvanzadaServiceEndPointAddress.length()>0) 
					  ((es.pode.catalogacion.negocio.servicios.SrvCatalogacionAvanzadaServiceServiceLocator)srvCatalogacionAvanzadaService).setSrvCatalogacionAvanzadaServiceEndpointAddress(srvCatalogacionAvanzadaServiceEndPointAddress);
	    	    es.pode.catalogacion.negocio.servicios.SrvCatalogacionAvanzadaService port = srvCatalogacionAvanzadaService.getSrvCatalogacionAvanzadaService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.localizador.negocio.servicios.SrvLocalizadorService getSrvLocalizadorService()
	        throws java.lang.Exception
	    {
            String srvLocalizadorServiceFile="importedServices.properties";	    
	          java.io.InputStream srvLocalizadorServiceInputStream=SrvFachadaAgregarServiceBase.class.getClassLoader().getResourceAsStream(srvLocalizadorServiceFile);
	          java.util.Properties srvLocalizadorServiceProperties = new java.util.Properties();
	          srvLocalizadorServiceProperties.load(srvLocalizadorServiceInputStream);
	          String srvLocalizadorServiceEndPointAddress="";
	          srvLocalizadorServiceEndPointAddress=(String) srvLocalizadorServiceProperties.get("srvLocalizadorServicePort");
			  logger.debug("srvLocalizadorServiceEndPointAddress del fichero --> " + srvLocalizadorServiceEndPointAddress);
			  es.pode.localizador.negocio.servicios.SrvLocalizadorServiceService srvLocalizadorService = new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvLocalizadorServiceEndPointAddress.length()>0) 
					  ((es.pode.localizador.negocio.servicios.SrvLocalizadorServiceServiceLocator)srvLocalizadorService).setSrvLocalizadorServiceEndpointAddress(srvLocalizadorServiceEndPointAddress);
	    	    es.pode.localizador.negocio.servicios.SrvLocalizadorService port = srvLocalizadorService.getSrvLocalizadorService();	    
	          return port;
	    }

    
    

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#agregar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public void agregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar)
    {
        if (idOde == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar) - 'idOde' can not be null");
        }
        if (tipoEmpaquetador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar) - 'tipoEmpaquetador' can not be null");
        }
        if (idAgregar == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar) - 'idAgregar' can not be null");
        }
        try
        {
            this.handleAgregar(idOde, idDestino, tipoEmpaquetador, idAgregar);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #agregar(java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleAgregar(java.lang.String idOde, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String idAgregar)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#agregarFederado(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public void agregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url)
    {
        if (idODE == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url) - 'idODE' can not be null");
        }
        if (tipoEmpaquetador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url) - 'tipoEmpaquetador' can not be null");
        }
        if (url == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url) - 'url' can not be null");
        }
        try
        {
            this.handleAgregarFederado(idODE, idDestino, tipoEmpaquetador, url);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.agregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #agregarFederado(java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleAgregarFederado(java.lang.String idODE, java.lang.String idDestino, java.lang.String tipoEmpaquetador, java.lang.String url)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#prepararMetadatos(java.lang.String)
     */
    public java.lang.String prepararMetadatos(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.prepararMetadatos(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            return this.handlePrepararMetadatos(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.prepararMetadatos(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #prepararMetadatos(java.lang.String)}
      */
    protected abstract java.lang.String handlePrepararMetadatos(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#descargarMetadato(java.lang.String)
     */
    public void descargarMetadato(java.lang.String identificador)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.descargarMetadato(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            this.handleDescargarMetadato(identificador);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.descargarMetadato(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #descargarMetadato(java.lang.String)}
      */
    protected abstract void handleDescargarMetadato(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#generarManifest(java.lang.String, java.lang.String[], java.lang.String, java.lang.String)
     */
    public void generarManifest(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifest(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma) - 'identificador' can not be null");
        }
        if (files == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifest(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma) - 'files' can not be null");
        }
        try
        {
            this.handleGenerarManifest(identificador, files, href, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifest(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarManifest(java.lang.String, java.lang.String[], java.lang.String, java.lang.String)}
      */
    protected abstract void handleGenerarManifest(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#generarManifestRCP(java.lang.String, java.lang.String)
     */
    public void generarManifestRCP(java.lang.String identificador, java.lang.String idioma)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestRCP(java.lang.String identificador, java.lang.String idioma) - 'identificador' can not be null");
        }
        try
        {
            this.handleGenerarManifestRCP(identificador, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestRCP(java.lang.String identificador, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarManifestRCP(java.lang.String, java.lang.String)}
      */
    protected abstract void handleGenerarManifestRCP(java.lang.String identificador, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#analizarArchivo(java.lang.String)
     */
    public es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO analizarArchivo(java.lang.String rutaArchivo)
    {
        if (rutaArchivo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.analizarArchivo(java.lang.String rutaArchivo) - 'rutaArchivo' can not be null");
        }
        try
        {
            return this.handleAnalizarArchivo(rutaArchivo);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.analizarArchivo(java.lang.String rutaArchivo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #analizarArchivo(java.lang.String)}
      */
    protected abstract es.pode.empaquetador.negocio.servicio.AnalizaArchivoVO handleAnalizarArchivo(java.lang.String rutaArchivo)
        throws java.lang.Exception;

    /**
     * @see es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService#generarManifestLom(java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public void generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo)
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo) - 'identificador' can not be null");
        }
        if (titulo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo) - 'titulo' can not be null");
        }
        if (descripcion == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo) - 'descripcion' can not be null");
        }
        if (idiomaDestinatario == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo) - 'idiomaDestinatario' can not be null");
        }
        if (tipo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo) - 'tipo' can not be null");
        }
        try
        {
            this.handleGenerarManifestLom(identificador, files, href, idioma, titulo, descripcion, idiomaDestinatario, tipo);
        }
        catch (Throwable th)
        {
            throw new es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarServiceException(
                "Error performing 'es.pode.empaquetador.negocio.servicio.SrvFachadaAgregarService.generarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarManifestLom(java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract void handleGenerarManifestLom(java.lang.String identificador, java.lang.String[] files, java.lang.String href, java.lang.String idioma, java.lang.String titulo, java.lang.String descripcion, java.lang.String idiomaDestinatario, java.lang.String tipo)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.empaquetador.negocio.PrincipalStore.get();
    }
}