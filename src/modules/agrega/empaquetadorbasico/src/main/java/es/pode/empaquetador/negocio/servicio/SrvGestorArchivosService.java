// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * Este servicio web exporta la funcionalidad necesaria para que el
 * Gestor Avanzado puede crear, eliminar, copiar, cortar, pegar y
 * modificar ficheros y carpetas y descomprimir archivos
 * comprimidos.
 * </p>
 */
public interface SrvGestorArchivosService
{
  /**
   * <p>
   * Crea una carpeta en la localización del ODE en que se está
   * trabajando.
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando
         * @param carpetaPadre  Nombre de la carpeta donde se desea crear la nueva carpeta. Si es null, se crea en la localización principal del ODE.
         * @param nombreCarpeta  Nombre de la carpeta que se desea crear.
      */
    public void crearCarpeta(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombreCarpeta);

  /**
   * <p>
   * Almacena un fichero recibido como argumento (DataHandler) en la
   * carpeta especificada dentro de la localización del ODE
   * identificado por identificador.
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando.
         * @param carpetaPadre  Ruta relativa a la localizacion del ODE en la que se desea almacenar el archivo. Si se deja a null, la carpeta es la localización del ODE.
         * @param fichero  Value Object que contiene el nombre del fichero a almacenar y los datos en forma de objeto javax.activation.DataHandler
      * @throws throws es.pode.empaquetador.negocio.servicio.SobreescrituraException Exception
   */
    public void crearArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO fichero)
        throws es.pode.empaquetador.negocio.servicio.SobreescrituraException;

  /**
   * <p>
   * Modifica el nombre del fichero o carpeta deseado.
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando.
         * @param carpetaPadre  Carpeta que contiene el fichero/carpeta a cambiar.
         * @param nombre  Nombre del fichero / carpeta a renombrar
         * @param nuevoNombre  Nuevo nombre del fichero / carpeta a cambiar.
      */
    public void renombrar(java.lang.String identificador, java.lang.String carpetaPadre, java.lang.String nombre, java.lang.String nuevoNombre);

    public void descomprimirArchivo(java.lang.String identificador, java.lang.String carpetaPadre, es.pode.empaquetador.negocio.servicio.FicheroVO archivo)
        throws es.pode.empaquetador.negocio.servicio.FicheroInexistenteException, es.pode.empaquetador.negocio.servicio.NoEsZipException;

  /**
   * <p>
   * Elimina los ficheros / carpetas deseados.
   * </p>
      * @param identificador  Identificador del ODE en que se está trabajando.
         * @param ficheros  Lista de ficheros / carpetas a eliminar.
      */
    public void eliminar(java.lang.String identificador, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros);

  /**
   * <p>
   * Devuelve un listado de los contenidos de una carpeta.
   * </p>
      * @param identificador  Identificador del ODE en que se esta trabajando.
         * @param carpetaPadre  Carpeta donde se desea obtener el listado. En caso de que sea null, se devuelve el listado de archivos de la localizacion del ODE.
      * @return es.pode.empaquetador.negocio.servicio.ArchivoVO[]
   */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO[] listar(java.lang.String identificador, java.lang.String carpetaPadre);

  /**
   * <p>
   * Copia los ficheros / carpetas a la localización especificada.
   * </p>
      * @param identificador  Identificador del ODE en que se está trabajando.
         * @param carpetaDestino  Ruta relativa a la localizacion del ODE en que se esta trabajando donde se desean copiar los ficheros / carpetas.
         * @param ficheros  Ficheros / carpetas que se desean copiar.
      */
    public void copiar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros);

  /**
   * <p>
   * Copiar los ficheros / carpetas especificados a la carpeta de
   * destino deseada. A continuación elimina los ficheros / carpetas
   * de origen con una llamada a eliminar.
   * </p>
      * @param identificador  Identificador del ODE en que estamos trabajando.
         * @param carpetaDestino  Ruta relativa a la localizacion del ODE en que se esta trabajando donde se desean copiar los ficheros / carpetas.
         * @param ficheros  Ficheros / carpetas que se desean copiar.
      */
    public void cortar(java.lang.String identificador, java.lang.String carpetaDestino, es.pode.empaquetador.negocio.servicio.ArchivoVO[] ficheros);

  /**
   * <p>
   * Genera un backup en el directorio temporal del localizador. El
   * backup es un archivo comprimido (ZIP) que contiene todos los
   * archivos del ODE en el momento en que se ha generado el backup
   * (imsmanifest.xml, esquemas, submanifiestos y recursos). Si
   * previamente existe un backup, se llama a eliminarBackup para
   * reemplazarlo.
   * </p>
      * @param identificador  Identificador del ode que se esta editando
      */
    public void generarBackup(java.lang.String identificador);

  /**
   * <p>
   * Elimina el fichero de backup del ODE en edición.
   * </p>
      * @param identificador  Identificador del ode que se esta editando
      */
    public void eliminarBackup(java.lang.String identificador);

  /**
   * <p>
   * Descomprime el contenido del fichero de backup a la localización
   * del ODE. Previamente borra cualquier fichero / carpeta que esté
   * en dicha localización.
   * </p>
      * @param identificador  Identificador del ode que se esta editando.
      */
    public void restaurarBackup(java.lang.String identificador);

  /**
   * <p>
   * Devuelve un ArchivoVO representando la raiz de la localización
   * del ODE. El objeto devuelto contiene la estructura en árbol de
   * todos los archivos pertenecientes al ODE. Para ello, examina la
   * raiz del ODE listando de forma recursiva cada carpeta y
   * generando los ArchivoVO correspondientes.
   * </p>
      * @param identificador  Identificador del ode que se esta editando
      * @return es.pode.empaquetador.negocio.servicio.ArchivoVO
   */
    public es.pode.empaquetador.negocio.servicio.ArchivoVO recuperarArbol(java.lang.String identificador);

    public java.lang.Boolean consultaCuota(java.lang.String identificador, java.lang.Long espacioLibre, java.lang.Long espacioOdeInicio);

}
