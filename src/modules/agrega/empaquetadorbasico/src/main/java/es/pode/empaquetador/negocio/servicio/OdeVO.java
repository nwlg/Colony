// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: ValueObject.vsl in andromda-java-cartridge.
//
package es.pode.empaquetador.negocio.servicio;

/**
 * <p>
 * Objeto VO que representa un objeto Manifest de SCORM2004
 * simplificado. Para mapear objetos Manifest a OdeVO y viceversa
 * se emplea la librería Dozer. La configuración del mapeo se
 * define en un fichero de configuracion de Dozer.
 * </p>
 */
public class OdeVO
    implements java.io.Serializable
{

    /**
     * Constructor por defecto
     */        
    public OdeVO()
    {
    }

    /**
     * Constructor taking all properties.
     * @param identifier  Identificador del Ode. Se corresponde con el atributo identifier de la clase Manifest.
     * @param ruta  Ruta relativa en la que se almacena el OdeVO. Toma valor cuando el OdeVO es un Submanifiesto. Se corresponde con el atributo base de la clase Manifest.
     * @param codigoMEC  Código MEC del Ode en edicion.
     * @param organizacionPrincipal  Identificador de la organización principal del OdeVO. Se corresponde con el atributo default de la clase Organizations.
     * @param catalogado  Variable booleana para marcar cuando un ODE ha sido catalogado.
     * @param localizadorURL  URL de la ruta base del Ode.
     * @param usuario  Identificador del usuario propietario del ODE.
     * @param conSecuencia  
     * @param submanifiestos  Array de submanifiestos (OdeVO) agregados al OdeVO. Se corresponde con el atributo manifest de la clase Manifest.
     * @param organizaciones  Array de organizaciones contenidas en el OdeVO. Se corresponde con el atributo organization de la clase Organizations.
     * @param recursos  Array de recursos del OdeVO. Se corresponde con el atributo resource de la clase Resources.
     * @param metadata  Metadatos del Manifest. Se corresponde con el atributo metadata de la clase Manifest.
     * @param lom  Lom asociado al OdeVO. Se corresponde con el objeto Lom contenido en la clase Metadata del Manifest.
     */
    public OdeVO(
        java.lang.String identifier,
        java.lang.String ruta,
        java.lang.String codigoMEC,
        java.lang.String organizacionPrincipal,
        java.lang.Boolean catalogado,
        java.lang.String localizadorURL,
        java.lang.String usuario,
        java.lang.Boolean conSecuencia,
        es.pode.empaquetador.negocio.servicio.OdeVO[] submanifiestos,
        es.pode.empaquetador.negocio.servicio.OrganizacionVO[] organizaciones,
        es.pode.empaquetador.negocio.servicio.RecursoVO[] recursos,
        es.pode.empaquetador.negocio.servicio.MetadataVO metadata,
        es.pode.empaquetador.negocio.servicio.LomVO lom)

    {
        this.identifier = identifier;
        this.ruta = ruta;
        this.codigoMEC = codigoMEC;
        this.organizacionPrincipal = organizacionPrincipal;
        this.catalogado = catalogado;
        this.localizadorURL = localizadorURL;
        this.usuario = usuario;
        this.conSecuencia = conSecuencia;
        this.submanifiestos = submanifiestos;
        this.organizaciones = organizaciones;
        this.recursos = recursos;
        this.metadata = metadata;
        this.lom = lom;
    }

    /**
     * Copies constructor from other OdeVO
     * @param otherBean OdeVO 
     */
    public OdeVO(OdeVO otherBean)
    {
        if (otherBean != null)
        {
            this.identifier = otherBean.getIdentifier();
            this.ruta = otherBean.getRuta();
            this.codigoMEC = otherBean.getCodigoMEC();
            this.organizacionPrincipal = otherBean.getOrganizacionPrincipal();
            this.catalogado = otherBean.getCatalogado();
            this.localizadorURL = otherBean.getLocalizadorURL();
            this.usuario = otherBean.getUsuario();
            this.conSecuencia = otherBean.getConSecuencia();
            this.submanifiestos = otherBean.getSubmanifiestos();
            this.organizaciones = otherBean.getOrganizaciones();
            this.recursos = otherBean.getRecursos();
            this.metadata = otherBean.getMetadata();
            this.lom = otherBean.getLom();
        }
    }

    private java.lang.String identifier;

    /**
     * <p>
     * Identificador del Ode. Se corresponde con el atributo identifier
     * de la clase Manifest.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getIdentifier()
    {
        return this.identifier;
    }

    /**
   * <p>
   * Identificador del Ode. Se corresponde con el atributo identifier
   * de la clase Manifest.
   * </p>
     *  @param identifier  Identificador del Ode. Se corresponde con el atributo identifier de la clase Manifest.  
     */
    public void setIdentifier(java.lang.String identifier)
    {
        this.identifier = identifier;
    }

    private java.lang.String ruta;

    /**
     * <p>
     * Ruta relativa en la que se almacena el OdeVO. Toma valor cuando
     * el OdeVO es un Submanifiesto. Se corresponde con el atributo
     * base de la clase Manifest.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getRuta()
    {
        return this.ruta;
    }

    /**
   * <p>
   * Ruta relativa en la que se almacena el OdeVO. Toma valor cuando
   * el OdeVO es un Submanifiesto. Se corresponde con el atributo
   * base de la clase Manifest.
   * </p>
     *  @param ruta  Ruta relativa en la que se almacena el OdeVO. Toma valor cuando el OdeVO es un Submanifiesto. Se corresponde con el atributo base de la clase Manifest.  
     */
    public void setRuta(java.lang.String ruta)
    {
        this.ruta = ruta;
    }

    private java.lang.String codigoMEC;

    /**
     * <p>
     * Código MEC del Ode en edicion.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getCodigoMEC()
    {
        return this.codigoMEC;
    }

    /**
   * <p>
   * Código MEC del Ode en edicion.
   * </p>
     *  @param codigoMEC  Código MEC del Ode en edicion.  
     */
    public void setCodigoMEC(java.lang.String codigoMEC)
    {
        this.codigoMEC = codigoMEC;
    }

    private java.lang.String organizacionPrincipal;

    /**
     * <p>
     * Identificador de la organización principal del OdeVO. Se
     * corresponde con el atributo default de la clase Organizations.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getOrganizacionPrincipal()
    {
        return this.organizacionPrincipal;
    }

    /**
   * <p>
   * Identificador de la organización principal del OdeVO. Se
   * corresponde con el atributo default de la clase Organizations.
   * </p>
     *  @param organizacionPrincipal  Identificador de la organización principal del OdeVO. Se corresponde con el atributo default de la clase Organizations.  
     */
    public void setOrganizacionPrincipal(java.lang.String organizacionPrincipal)
    {
        this.organizacionPrincipal = organizacionPrincipal;
    }

    private java.lang.Boolean catalogado;

    /**
     * <p>
     * Variable booleana para marcar cuando un ODE ha sido catalogado.
     * </p>
     * @return java.lang.Boolean
     */
    public java.lang.Boolean getCatalogado()
    {
        return this.catalogado;
    }

    /**
   * <p>
   * Variable booleana para marcar cuando un ODE ha sido catalogado.
   * </p>
     *  @param catalogado  Variable booleana para marcar cuando un ODE ha sido catalogado.  
     */
    public void setCatalogado(java.lang.Boolean catalogado)
    {
        this.catalogado = catalogado;
    }

    private java.lang.String localizadorURL;

    /**
     * <p>
     * URL de la ruta base del Ode.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getLocalizadorURL()
    {
        return this.localizadorURL;
    }

    /**
   * <p>
   * URL de la ruta base del Ode.
   * </p>
     *  @param localizadorURL  URL de la ruta base del Ode.  
     */
    public void setLocalizadorURL(java.lang.String localizadorURL)
    {
        this.localizadorURL = localizadorURL;
    }

    private java.lang.String usuario;

    /**
     * <p>
     * Identificador del usuario propietario del ODE.
     * </p>
     * @return java.lang.String
     */
    public java.lang.String getUsuario()
    {
        return this.usuario;
    }

    /**
   * <p>
   * Identificador del usuario propietario del ODE.
   * </p>
     *  @param usuario  Identificador del usuario propietario del ODE.  
     */
    public void setUsuario(java.lang.String usuario)
    {
        this.usuario = usuario;
    }

    private java.lang.Boolean conSecuencia;

    public java.lang.Boolean getConSecuencia()
    {
        return this.conSecuencia;
    }

    public void setConSecuencia(java.lang.Boolean conSecuencia)
    {
        this.conSecuencia = conSecuencia;
    }

    /**
   * <p>
   * Objeto VO que representa un objeto Manifest de SCORM2004
   * simplificado. Para mapear objetos Manifest a OdeVO y viceversa
   * se emplea la librería Dozer. La configuración del mapeo se
   * define en un fichero de configuracion de Dozer.
   * </p>
     */
    private es.pode.empaquetador.negocio.servicio.OdeVO[] submanifiestos;

    /**
     * Getter of submanifiestos.  
     * @return es.pode.empaquetador.negocio.servicio.OdeVO[]  Objeto VO que representa un objeto Manifest de SCORM2004 simplificado. Para mapear objetos Manifest a OdeVO y viceversa se emplea la librería Dozer. La configuración del mapeo se define en un fichero de configuracion de Dozer.
     */
    public es.pode.empaquetador.negocio.servicio.OdeVO[] getSubmanifiestos()
    {
        return this.submanifiestos;
    }

  /**
   * Setter of submanifiestos  
   *  @param submanifiestos  Objeto VO que representa un objeto Manifest de SCORM2004 simplificado. Para mapear objetos Manifest a OdeVO y viceversa se emplea la librería Dozer. La configuración del mapeo se define en un fichero de configuracion de Dozer. 
   */
    public void setSubmanifiestos(es.pode.empaquetador.negocio.servicio.OdeVO[] submanifiestos)
    {
        this.submanifiestos = submanifiestos;
    }

    /**
   * <p>
   * Objeto que representa una orgacización de un manifiesto
   * SCORM2004. Esta clase representa a un objeto Organization.
   * </p>
     */
    private es.pode.empaquetador.negocio.servicio.OrganizacionVO[] organizaciones;

    /**
     * Getter of organizaciones.  
     * @return es.pode.empaquetador.negocio.servicio.OrganizacionVO[]  Objeto que representa una orgacización de un manifiesto SCORM2004. Esta clase representa a un objeto Organization.
     */
    public es.pode.empaquetador.negocio.servicio.OrganizacionVO[] getOrganizaciones()
    {
        return this.organizaciones;
    }

  /**
   * Setter of organizaciones  
   *  @param organizaciones  Objeto que representa una orgacización de un manifiesto SCORM2004. Esta clase representa a un objeto Organization. 
   */
    public void setOrganizaciones(es.pode.empaquetador.negocio.servicio.OrganizacionVO[] organizaciones)
    {
        this.organizaciones = organizaciones;
    }

    /**
   * <p>
   * Objeto que representa un recurso de SCORM2004. Es una version
   * simplificada de la clase Resource.
   * </p>
     */
    private es.pode.empaquetador.negocio.servicio.RecursoVO[] recursos;

    /**
     * Getter of recursos.  
     * @return es.pode.empaquetador.negocio.servicio.RecursoVO[]  Objeto que representa un recurso de SCORM2004. Es una version simplificada de la clase Resource.
     */
    public es.pode.empaquetador.negocio.servicio.RecursoVO[] getRecursos()
    {
        return this.recursos;
    }

  /**
   * Setter of recursos  
   *  @param recursos  Objeto que representa un recurso de SCORM2004. Es una version simplificada de la clase Resource. 
   */
    public void setRecursos(es.pode.empaquetador.negocio.servicio.RecursoVO[] recursos)
    {
        this.recursos = recursos;
    }

    /**
   * 
     */
    private es.pode.empaquetador.negocio.servicio.MetadataVO metadata;

    public es.pode.empaquetador.negocio.servicio.MetadataVO getMetadata()
    {
        return this.metadata;
    }

    public void setMetadata(es.pode.empaquetador.negocio.servicio.MetadataVO metadata)
    {
        this.metadata = metadata;
    }

    /**
   * <p>
   * Informacion basica del Lom. Se almacenara el titulo idioma y
   * descripcion de la entidad catalogada.
   * </p>
     */
    private es.pode.empaquetador.negocio.servicio.LomVO lom;

    /**
     * Getter of lom.  
     * @return es.pode.empaquetador.negocio.servicio.LomVO  Informacion basica del Lom. Se almacenara el titulo idioma y descripcion de la entidad catalogada.
     */
    public es.pode.empaquetador.negocio.servicio.LomVO getLom()
    {
        return this.lom;
    }

  /**
   * Setter of lom  
   *  @param lom  Informacion basica del Lom. Se almacenara el titulo idioma y descripcion de la entidad catalogada. 
   */
    public void setLom(es.pode.empaquetador.negocio.servicio.LomVO lom)
    {
        this.lom = lom;
    }

}