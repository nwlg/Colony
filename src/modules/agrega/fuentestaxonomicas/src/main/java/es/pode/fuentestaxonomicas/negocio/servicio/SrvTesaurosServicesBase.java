// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.fuentestaxonomicas.negocio.servicio;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices
 */
public abstract class SrvTesaurosServicesBase
    implements es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices
{

		 protected static final Logger logger = Logger.getLogger(SrvTesaurosServicesBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}



    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTerminosRelacionadosPorId(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'id' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerTerminosRelacionadosPorId(id, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTerminosRelacionadosPorId(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerTerminosRelacionadosPorId(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerJerarquia(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.JerarquiaVO[] obtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'id' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerJerarquia(id, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerJerarquia(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.JerarquiaVO[] handleObtenerJerarquia(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerPrimerNivelTesauro(java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerPrimerNivelTesauro(java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerPrimerNivelTesauro(java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerPrimerNivelTesauro(java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerPrimerNivelTesauro(nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerPrimerNivelTesauro(java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerPrimerNivelTesauro(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerPrimerNivelTesauro(java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTerminosRelacionadosPorTexto(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (textoTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma) - 'textoTesauro' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerTerminosRelacionadosPorTexto(textoTesauro, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTerminosRelacionadosPorTexto(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerTerminosRelacionadosPorTexto(java.lang.String textoTesauro, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTerminosRelacionAsociativa(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'id' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerTerminosRelacionAsociativa(id, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTerminosRelacionAsociativa(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerTerminosRelacionAsociativa(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTerminosRelacionJerarquica(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'id' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerTerminosRelacionJerarquica(id, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTerminosRelacionJerarquica(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerTerminosRelacionJerarquica(java.lang.String id, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#recargar()
     */
    public void recargar()
    {
        try
        {
            this.handleRecargar();
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.recargar()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #recargar()}
      */
    protected abstract void handleRecargar()
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerVocabName(java.lang.String, java.lang.String)
     */
    public java.lang.String obtenerVocabName(java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabName(java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabName(java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerVocabName(nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabName(java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerVocabName(java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.String handleObtenerVocabName(java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerVocabNames(java.lang.String[], java.lang.String)
     */
    public java.lang.String[] obtenerVocabNames(java.lang.String[] nomTesauros, java.lang.String idioma)
    {
        if (nomTesauros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabNames(java.lang.String[] nomTesauros, java.lang.String idioma) - 'nomTesauros' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabNames(java.lang.String[] nomTesauros, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerVocabNames(nomTesauros, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerVocabNames(java.lang.String[] nomTesauros, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerVocabNames(java.lang.String[], java.lang.String)}
      */
    protected abstract java.lang.String[] handleObtenerVocabNames(java.lang.String[] nomTesauros, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTerminos(java.lang.String, java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.JerarquiaVO[] obtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma)
    {
        if (texto == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma) - 'texto' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma) - 'nomTesauro' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleObtenerTerminos(texto, nomTesauro, idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTerminos(java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.JerarquiaVO[] handleObtenerTerminos(java.lang.String texto, java.lang.String nomTesauro, java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#chequearExistenciaIdioma(java.lang.String)
     */
    public boolean chequearExistenciaIdioma(java.lang.String idioma)
    {
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.chequearExistenciaIdioma(java.lang.String idioma) - 'idioma' can not be null");
        }
        try
        {
            return this.handleChequearExistenciaIdioma(idioma);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.chequearExistenciaIdioma(java.lang.String idioma)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #chequearExistenciaIdioma(java.lang.String)}
      */
    protected abstract boolean handleChequearExistenciaIdioma(java.lang.String idioma)
        throws java.lang.Exception;

    /**
     * @see es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices#obtenerTextosDeIds(java.lang.String[], java.lang.String, java.lang.String)
     */
    public es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] obtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro)
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro) - 'ids' can not be null");
        }
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro) - 'idioma' can not be null");
        }
        if (nomTesauro == null)
        {
            throw new IllegalArgumentException(
                "es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro) - 'nomTesauro' can not be null");
        }
        try
        {
            return this.handleObtenerTextosDeIds(ids, idioma, nomTesauro);
        }
        catch (Throwable th)
        {
            throw new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesException(
                "Error performing 'es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices.obtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTextosDeIds(java.lang.String[], java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.fuentestaxonomicas.negocio.servicio.TaxonVO[] handleObtenerTextosDeIds(java.lang.String[] ids, java.lang.String idioma, java.lang.String nomTesauro)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.fuentestaxonomicas.negocio.PrincipalStore.get();
    }
}