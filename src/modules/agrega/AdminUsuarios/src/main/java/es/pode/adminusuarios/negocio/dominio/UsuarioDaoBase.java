// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package es.pode.adminusuarios.negocio.dominio;

import net.sf.dozer.util.mapping.MapperIF;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>es.pode.adminusuarios.negocio.dominio.Usuario</code>.
 * </p>
 *
 * @see es.pode.adminusuarios.negocio.dominio.Usuario
 */
public abstract class UsuarioDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements es.pode.adminusuarios.negocio.dominio.UsuarioDao
{



	

	/**
	 * Constant that identifies a mapping between an 
	 * entity (Usuario) and a VO (UsuarioVO)
	 */
	public final static String DEF_MAPPING_USUARIO_USUARIOVO = "DEF_MAPPING_USUARIO_USUARIOVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (UsuarioVO) and an entity (Usuario)
	 */
	public final static String DEF_MAPPING_USUARIOVO_USUARIO = "DEF_MAPPING_USUARIOVO_USUARIO";
	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#load(int, java.lang.Long)
     */
    public Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Usuario.load - 'id' can not be null");
        }
        final java.util.List list = this.getHibernateTemplate().find(
            "from es.pode.adminusuarios.negocio.dominio.Usuario as entity where entity.id = ?", id);
        final Object entity = list != null && !list.isEmpty() ? list.iterator().next() : null;
        return transformEntity(transform, (es.pode.adminusuarios.negocio.dominio.Usuario)entity);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#load(java.lang.Long)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario load(java.lang.Long id)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.load(TRANSFORM_NONE, id);
    }
    
    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }
    
    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(es.pode.adminusuarios.negocio.dominio.UsuarioImpl.class);
        this.transformEntities(transform, results);
        return results;
    }
    

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario create(es.pode.adminusuarios.negocio.dominio.Usuario usuario)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.create(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(int transform, es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    public Object create(final int transform, final es.pode.adminusuarios.negocio.dominio.Usuario usuario)
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "Usuario.create - 'usuario' can not be null");
        }
        Object identifier = this.getHibernateTemplate().save(usuario);
        usuario.setId((java.lang.Long)identifier);
        return this.transformEntity(transform, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Usuario.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (es.pode.adminusuarios.negocio.dominio.Usuario)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(int, java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,java.lang.String,java.util.Date,java.lang.String,java.lang.Long,java.lang.String)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario create(
 java.lang.String nombre, java.lang.String apellido1, java.lang.String apellido2, java.lang.String email, java.lang.String NIF, java.lang.String usuario, java.lang.String clave, java.lang.String idioma, java.lang.String idiomaBusqueda, java.lang.String tipoEmpaquetador, java.util.Date fechaAlta, java.util.Date fechaBaja, java.util.Date fechaSolicitudAlta, java.lang.String claveEncriptada, java.util.Date fechaDesactivacion, java.lang.String tipoCatalogador, java.lang.Long cuota, java.lang.String openIdUrl)
    {
         return (es.pode.adminusuarios.negocio.dominio.Usuario)this.create(TRANSFORM_NONE,  nombre, apellido1, apellido2, email, NIF, usuario, clave, idioma, idiomaBusqueda, tipoEmpaquetador, fechaAlta, fechaBaja, fechaSolicitudAlta, claveEncriptada, fechaDesactivacion, tipoCatalogador, cuota, openIdUrl);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(int, java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,java.lang.String,java.util.Date,java.lang.String,java.lang.Long,java.lang.String)
     */
    public Object create(
        final int transform,
 java.lang.String nombre, java.lang.String apellido1, java.lang.String apellido2, java.lang.String email, java.lang.String NIF, java.lang.String usuario, java.lang.String clave, java.lang.String idioma, java.lang.String idiomaBusqueda, java.lang.String tipoEmpaquetador, java.util.Date fechaAlta, java.util.Date fechaBaja, java.util.Date fechaSolicitudAlta, java.lang.String claveEncriptada, java.util.Date fechaDesactivacion, java.lang.String tipoCatalogador, java.lang.Long cuota, java.lang.String openIdUrl)
    {
        es.pode.adminusuarios.negocio.dominio.Usuario entity = new es.pode.adminusuarios.negocio.dominio.UsuarioImpl();
        entity.setNombre(nombre);
        entity.setApellido1(apellido1);
        entity.setApellido2(apellido2);
        entity.setEmail(email);
        entity.setNIF(NIF);
        entity.setUsuario(usuario);
        entity.setClave(clave);
        entity.setIdioma(idioma);
        entity.setIdiomaBusqueda(idiomaBusqueda);
        entity.setTipoEmpaquetador(tipoEmpaquetador);
        entity.setFechaAlta(fechaAlta);
        entity.setFechaBaja(fechaBaja);
        entity.setFechaSolicitudAlta(fechaSolicitudAlta);
        entity.setClaveEncriptada(claveEncriptada);
        entity.setFechaDesactivacion(fechaDesactivacion);
        entity.setTipoCatalogador(tipoCatalogador);
        entity.setCuota(cuota);
        entity.setOpenIdUrl(openIdUrl);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(java.lang.String,)java.lang.String,)java.util.Collection,)java.lang.String,)java.lang.String,)java.lang.String,)java.lang.String,)java.lang.String,)java.lang.String     */
    public es.pode.adminusuarios.negocio.dominio.Usuario create(
		java.lang.String nombre,
		java.lang.String apellido1,
		java.lang.String apellido2,
		java.lang.String email,
		java.lang.String NIF,
		java.lang.String usuario,
		java.lang.String clave,
		java.lang.String idioma,
		java.lang.String idiomaBusqueda,
		java.lang.String tipoEmpaquetador,
		java.util.Date fechaAlta,
		java.util.Date fechaBaja,
		java.util.Date fechaSolicitudAlta,
		java.lang.String claveEncriptada,
		java.util.Date fechaDesactivacion,
		java.lang.String tipoCatalogador,
		java.lang.Long cuota,
		java.lang.String openIdUrl,
		java.util.Collection grupos,
		java.util.Collection grupoTrabajo)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.create(TRANSFORM_NONE,
																  nombre,
																  apellido1,
																  apellido2,
																  email,
																  NIF,
																  usuario,
																  clave,
																  idioma,
																  idiomaBusqueda,
																  tipoEmpaquetador,
																  fechaAlta,
																  fechaBaja,
																  fechaSolicitudAlta,
																  claveEncriptada,
																  fechaDesactivacion,
																  tipoCatalogador,
																  cuota,
																  openIdUrl,
		                                                          grupos,
		                                                          grupoTrabajo);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#create(int, java.lang.String, java.lang.String, es.pode.adminusuarios.negocio.dominio.Grupo, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public Object create(
        final int transform,
		java.lang.String nombre,
		java.lang.String apellido1,
		java.lang.String apellido2,
		java.lang.String email,
		java.lang.String NIF,
		java.lang.String usuario,
		java.lang.String clave,
		java.lang.String idioma,
		java.lang.String idiomaBusqueda,
		java.lang.String tipoEmpaquetador,
		java.util.Date fechaAlta,
		java.util.Date fechaBaja,
		java.util.Date fechaSolicitudAlta,
		java.lang.String claveEncriptada,
		java.util.Date fechaDesactivacion,
		java.lang.String tipoCatalogador,
		java.lang.Long cuota,
		java.lang.String openIdUrl,
		java.util.Collection grupos,
		java.util.Collection grupoTrabajo)
    {
        es.pode.adminusuarios.negocio.dominio.Usuario entity = new es.pode.adminusuarios.negocio.dominio.UsuarioImpl();
		entity.setNombre(nombre);
		entity.setApellido1(apellido1);
		entity.setApellido2(apellido2);
		entity.setEmail(email);
		entity.setNIF(NIF);
		entity.setUsuario(usuario);
		entity.setClave(clave);
		entity.setIdioma(idioma);
		entity.setIdiomaBusqueda(idiomaBusqueda);
		entity.setTipoEmpaquetador(tipoEmpaquetador);
		entity.setFechaAlta(fechaAlta);
		entity.setFechaBaja(fechaBaja);
		entity.setFechaSolicitudAlta(fechaSolicitudAlta);
		entity.setClaveEncriptada(claveEncriptada);
		entity.setFechaDesactivacion(fechaDesactivacion);
		entity.setTipoCatalogador(tipoCatalogador);
		entity.setCuota(cuota);
		entity.setOpenIdUrl(openIdUrl);
		entity.setGrupos(grupos);
		entity.setGrupoTrabajo(grupoTrabajo);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#update(es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    public void update(es.pode.adminusuarios.negocio.dominio.Usuario usuario)
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "Usuario.update - 'usuario' can not be null");
        }
        this.getHibernateTemplate().update(usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Usuario.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((es.pode.adminusuarios.negocio.dominio.Usuario)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#remove(es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    public void remove(es.pode.adminusuarios.negocio.dominio.Usuario usuario)
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "Usuario.remove - 'usuario' can not be null");
        }
        this.getHibernateTemplate().delete(usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Usuario.remove - 'id' can not be null");
        }
        es.pode.adminusuarios.negocio.dominio.Usuario entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Usuario.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#consultaHQL(java.lang.String)
     */
    public java.util.List consultaHQL(java.lang.String usuario)
    {
        return this.consultaHQL(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#consultaHQL(java.lang.String, java.lang.String)
     */
    public java.util.List consultaHQL(final java.lang.String queryString, final java.lang.String usuario)
    {
        return this.consultaHQL(TRANSFORM_NONE, queryString, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#consultaHQL(int, java.lang.String)
     */
    public java.util.List consultaHQL(final int transform, final java.lang.String usuario)
    {
        return this.consultaHQL(transform, "select distinct grupo.rols.descripcion from es.pode.adminusuarios.negocio.dominio.Grupo as grupo where grupo.id in (select usuario.grupos.id from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.usuario = :usuario)", usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#consultaHQL(int, java.lang.String, java.lang.String)
     */
    public java.util.List consultaHQL(final int transform, final java.lang.String queryString, final java.lang.String usuario)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("usuario", usuario);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerDatosUsuario(java.lang.String)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario obtenerDatosUsuario(java.lang.String usuario)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.obtenerDatosUsuario(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerDatosUsuario(java.lang.String, java.lang.String)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario obtenerDatosUsuario(final java.lang.String queryString, final java.lang.String usuario)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.obtenerDatosUsuario(TRANSFORM_NONE, queryString, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerDatosUsuario(int, java.lang.String)
     */
    public Object obtenerDatosUsuario(final int transform, final java.lang.String usuario)
    {
        return this.obtenerDatosUsuario(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.usuario = :usuario", usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerDatosUsuario(int, java.lang.String, java.lang.String)
     */
    public Object obtenerDatosUsuario(final int transform, final java.lang.String queryString, final java.lang.String usuario)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("usuario", usuario);            	
            java.util.List results = queryObject.list();
            Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of 'es.pode.adminusuarios.negocio.dominio.Usuario"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = (es.pode.adminusuarios.negocio.dominio.Usuario)results.iterator().next();
                }
            }
            result = transformEntity(transform, (es.pode.adminusuarios.negocio.dominio.Usuario)result);
            return result;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosAdministradores(java.lang.String)
     */
    public java.util.List obtenerUsuariosAdministradores(java.lang.String usuario)
    {
        return this.obtenerUsuariosAdministradores(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosAdministradores(java.lang.String, java.lang.String)
     */
    public java.util.List obtenerUsuariosAdministradores(final java.lang.String queryString, final java.lang.String usuario)
    {
        return this.obtenerUsuariosAdministradores(TRANSFORM_NONE, queryString, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosAdministradores(int, java.lang.String)
     */
    public java.util.List obtenerUsuariosAdministradores(final int transform, final java.lang.String usuario)
    {
        return this.obtenerUsuariosAdministradores(transform, "select usuario.id from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupos.id in (select grupo.id from es.pode.adminusuarios.negocio.dominio.Grupo as grupo where grupo.rols.id = (select rol.id from es.pode.adminusuarios.negocio.dominio.Rol as rol where rol.descripcion = :usuario))", usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosAdministradores(int, java.lang.String, java.lang.String)
     */
    public java.util.List obtenerUsuariosAdministradores(final int transform, final java.lang.String queryString, final java.lang.String usuario)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("usuario", usuario);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerNumUsuariosGrupo(java.lang.Long)
     */
    public java.util.List obtenerNumUsuariosGrupo(java.lang.Long id)
    {
        return this.obtenerNumUsuariosGrupo(TRANSFORM_NONE, id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerNumUsuariosGrupo(java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerNumUsuariosGrupo(final java.lang.String queryString, final java.lang.Long id)
    {
        return this.obtenerNumUsuariosGrupo(TRANSFORM_NONE, queryString, id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerNumUsuariosGrupo(int, java.lang.Long)
     */
    public java.util.List obtenerNumUsuariosGrupo(final int transform, final java.lang.Long id)
    {
        return this.obtenerNumUsuariosGrupo(transform, "select usuario.id from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupos.id = :id", id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerNumUsuariosGrupo(int, java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerNumUsuariosGrupo(final int transform, final java.lang.String queryString, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("id", id);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuario(java.lang.String)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario obtenerUsuario(java.lang.String NIF)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.obtenerUsuario(TRANSFORM_NONE, NIF);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuario(java.lang.String, java.lang.String)
     */
    public es.pode.adminusuarios.negocio.dominio.Usuario obtenerUsuario(final java.lang.String queryString, final java.lang.String NIF)
    {
        return (es.pode.adminusuarios.negocio.dominio.Usuario)this.obtenerUsuario(TRANSFORM_NONE, queryString, NIF);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuario(int, java.lang.String)
     */
    public Object obtenerUsuario(final int transform, final java.lang.String NIF)
    {
        return this.obtenerUsuario(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.NIF = :NIF", NIF);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuario(int, java.lang.String, java.lang.String)
     */
    public Object obtenerUsuario(final int transform, final java.lang.String queryString, final java.lang.String NIF)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("NIF", NIF);            	
            java.util.List results = queryObject.list();
            Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of 'es.pode.adminusuarios.negocio.dominio.Usuario"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = (es.pode.adminusuarios.negocio.dominio.Usuario)results.iterator().next();
                }
            }
            result = transformEntity(transform, (es.pode.adminusuarios.negocio.dominio.Usuario)result);
            return result;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerEmailAdmin(java.lang.String)
     */
    public java.util.List obtenerEmailAdmin(java.lang.String usuario)
    {
        return this.obtenerEmailAdmin(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerEmailAdmin(java.lang.String, java.lang.String)
     */
    public java.util.List obtenerEmailAdmin(final java.lang.String queryString, final java.lang.String usuario)
    {
        return this.obtenerEmailAdmin(TRANSFORM_NONE, queryString, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerEmailAdmin(int, java.lang.String)
     */
    public java.util.List obtenerEmailAdmin(final int transform, final java.lang.String usuario)
    {
        return this.obtenerEmailAdmin(transform, "select distinct usuario.email from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupos.id in (select grupo.id from es.pode.adminusuarios.negocio.dominio.Grupo as grupo where grupo.rols.id = (select rol.id from es.pode.adminusuarios.negocio.dominio.Rol as rol where rol.descripcion = :usuario))", usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerEmailAdmin(int, java.lang.String, java.lang.String)
     */
    public java.util.List obtenerEmailAdmin(final int transform, final java.lang.String queryString, final java.lang.String usuario)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("usuario", usuario);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuarios()
     */
    public java.util.List getUsuarios()
    {
        return this.getUsuarios(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuarios(java.lang.String)
     */
    public java.util.List getUsuarios(final java.lang.String queryString)
    {
        return this.getUsuarios(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuarios(int)
     */
    public java.util.List getUsuarios(final int transform)
    {
        return this.getUsuarios(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.fechaBaja is null and usuario.fechaAlta is not null and usuario.fechaSolicitudAlta is null and usuario.fechaDesactivacion is null order by usuario.usuario asc");
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuarios(int, java.lang.String)
     */
    public java.util.List getUsuarios(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosPendientes()
     */
    public java.util.List getUsuariosPendientes()
    {
        return this.getUsuariosPendientes(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosPendientes(java.lang.String)
     */
    public java.util.List getUsuariosPendientes(final java.lang.String queryString)
    {
        return this.getUsuariosPendientes(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosPendientes(int)
     */
    public java.util.List getUsuariosPendientes(final int transform)
    {
        return this.getUsuariosPendientes(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.fechaBaja is null and usuario.fechaSolicitudAlta is not null order by usuario.usuario asc");
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosPendientes(int, java.lang.String)
     */
    public java.util.List getUsuariosPendientes(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#usuariosActivos(java.util.Date)
     */
    public java.util.List usuariosActivos(java.util.Date fechaBaja)
    {
        return this.usuariosActivos(TRANSFORM_NONE, fechaBaja);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#usuariosActivos(java.lang.String, java.util.Date)
     */
    public java.util.List usuariosActivos(final java.lang.String queryString, final java.util.Date fechaBaja)
    {
        return this.usuariosActivos(TRANSFORM_NONE, queryString, fechaBaja);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#usuariosActivos(int, java.util.Date)
     */
    public java.util.List usuariosActivos(final int transform, final java.util.Date fechaBaja)
    {
        return this.usuariosActivos(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where (usuario.fechaAlta <= :fechaBaja) and (usuario.fechaBaja is NULL or usuario.fechaBaja > :fechaBaja) and (usuario.fechaDesactivacion is NULL or usuario.fechaDesactivacion > :fechaBaja)", fechaBaja);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#usuariosActivos(int, java.lang.String, java.util.Date)
     */
    public java.util.List usuariosActivos(final int transform, final java.lang.String queryString, final java.util.Date fechaBaja)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("fechaBaja", fechaBaja);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getTodosUsuarios()
     */
    public java.util.List getTodosUsuarios()
    {
        return this.getTodosUsuarios(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getTodosUsuarios(java.lang.String)
     */
    public java.util.List getTodosUsuarios(final java.lang.String queryString)
    {
        return this.getTodosUsuarios(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getTodosUsuarios(int)
     */
    public java.util.List getTodosUsuarios(final int transform)
    {
        return this.getTodosUsuarios(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.fechaSolicitudAlta is null order by usuario.usuario asc");
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getTodosUsuarios(int, java.lang.String)
     */
    public java.util.List getTodosUsuarios(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosInactivos()
     */
    public java.util.List getUsuariosInactivos()
    {
        return this.getUsuariosInactivos(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosInactivos(java.lang.String)
     */
    public java.util.List getUsuariosInactivos(final java.lang.String queryString)
    {
        return this.getUsuariosInactivos(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosInactivos(int)
     */
    public java.util.List getUsuariosInactivos(final int transform)
    {
        return this.getUsuariosInactivos(transform, "from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.fechaDesactivacion is not NULL and usuario.fechaBaja is NULL");
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosInactivos(int, java.lang.String)
     */
    public java.util.List getUsuariosInactivos(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosGrupoTrabajo(java.lang.String)
     */
    public java.util.List getUsuariosGrupoTrabajo(java.lang.String usuario)
    {
        return this.getUsuariosGrupoTrabajo(TRANSFORM_NONE, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosGrupoTrabajo(java.lang.String, java.lang.String)
     */
    public java.util.List getUsuariosGrupoTrabajo(final java.lang.String queryString, final java.lang.String usuario)
    {
        return this.getUsuariosGrupoTrabajo(TRANSFORM_NONE, queryString, usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosGrupoTrabajo(int, java.lang.String)
     */
    public java.util.List getUsuariosGrupoTrabajo(final int transform, final java.lang.String usuario)
    {
        return this.getUsuariosGrupoTrabajo(transform, "select distinct usuario.usuario from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupoTrabajo.identificador in (select usuario.grupoTrabajo.identificador from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.usuario = :usuario)", usuario);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosGrupoTrabajo(int, java.lang.String, java.lang.String)
     */
    public java.util.List getUsuariosGrupoTrabajo(final int transform, final java.lang.String queryString, final java.lang.String usuario)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("usuario", usuario);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosTodosGruposTrabajo()
     */
    public java.util.List getUsuariosTodosGruposTrabajo()
    {
        return this.getUsuariosTodosGruposTrabajo(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosTodosGruposTrabajo(java.lang.String)
     */
    public java.util.List getUsuariosTodosGruposTrabajo(final java.lang.String queryString)
    {
        return this.getUsuariosTodosGruposTrabajo(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosTodosGruposTrabajo(int)
     */
    public java.util.List getUsuariosTodosGruposTrabajo(final int transform)
    {
        return this.getUsuariosTodosGruposTrabajo(transform, "select distinct usuario.usuario from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupoTrabajo.identificador in (select grupoTrabajo.identificador from es.pode.adminusuarios.negocio.dominio.GrupoTrabajo as grupoTrabajo)");
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#getUsuariosTodosGruposTrabajo(int, java.lang.String)
     */
    public java.util.List getUsuariosTodosGruposTrabajo(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPertenecenGrupoTrabajo(java.lang.Long)
     */
    public java.util.List obtenerUsuariosPertenecenGrupoTrabajo(java.lang.Long id)
    {
        return this.obtenerUsuariosPertenecenGrupoTrabajo(TRANSFORM_NONE, id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPertenecenGrupoTrabajo(java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerUsuariosPertenecenGrupoTrabajo(final java.lang.String queryString, final java.lang.Long id)
    {
        return this.obtenerUsuariosPertenecenGrupoTrabajo(TRANSFORM_NONE, queryString, id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPertenecenGrupoTrabajo(int, java.lang.Long)
     */
    public java.util.List obtenerUsuariosPertenecenGrupoTrabajo(final int transform, final java.lang.Long id)
    {
        return this.obtenerUsuariosPertenecenGrupoTrabajo(transform, "select usuario.id from es.pode.adminusuarios.negocio.dominio.Usuario as usuario where usuario.grupoTrabajo.identificador = :id", id);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPertenecenGrupoTrabajo(int, java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerUsuariosPertenecenGrupoTrabajo(final int transform, final java.lang.String queryString, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("id", id);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPorOpenId(es.pode.adminusuarios.negocio.servicios.obtenerUsuarioPorOpenIdCriteria)
     */
    public java.util.List obtenerUsuariosPorOpenId(es.pode.adminusuarios.negocio.servicios.obtenerUsuarioPorOpenIdCriteria openIdCriteria)
    {
        return this.obtenerUsuariosPorOpenId(TRANSFORM_NONE, openIdCriteria);
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.Usuario#obtenerUsuariosPorOpenId(int, java.lang.String, es.pode.adminusuarios.negocio.servicios.obtenerUsuarioPorOpenIdCriteria)
     */
    public java.util.List obtenerUsuariosPorOpenId(final int transform, final es.pode.adminusuarios.negocio.servicios.obtenerUsuarioPorOpenIdCriteria openIdCriteria)
    {
        try
        {
            es.pode.CriteriaSearch criteriaSearch = new es.pode.CriteriaSearch(super.getSession(false), es.pode.adminusuarios.negocio.dominio.UsuarioImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(openIdCriteria.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(openIdCriteria.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(openIdCriteria.getMaximumResultSize());
																			            es.pode.CriteriaSearchParameter parameter1 =
                new es.pode.CriteriaSearchParameter(
                    openIdCriteria.getOpenIdUrl(),
                    "openIdUrl", true, es.pode.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>es.pode.adminusuarios.negocio.dominio.UsuarioDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link es.pode.adminusuarios.negocio.dominio.Usuario} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link es.pode.adminusuarios.negocio.servicios.UsuarioVO} - {@link TRANSFORM_USUARIOVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link es.pode.adminusuarios.negocio.dominio.UsuarioDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    private final Object transformEntity(final int transform, final es.pode.adminusuarios.negocio.dominio.Usuario entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case es.pode.adminusuarios.negocio.dominio.UsuarioDao.TRANSFORM_USUARIOVO :
                    target = toUsuarioVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,es.pode.adminusuarios.negocio.dominio.Usuario)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>es.pode.adminusuarios.negocio.dominio.UsuarioDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    private final void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case es.pode.adminusuarios.negocio.dominio.UsuarioDao.TRANSFORM_USUARIOVO :
                toUsuarioVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#toUsuarioVOCollection(java.util.Collection)
     */
    public final void toUsuarioVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, USUARIOVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link UsuarioDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.adminusuarios.negocio.dominio.UsuarioDao#toUsuarioVO(es.pode.adminusuarios.negocio.dominio.Usuario)
     */
    protected es.pode.adminusuarios.negocio.servicios.UsuarioVO toUsuarioVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.adminusuarios.negocio.servicios.UsuarioVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer USUARIOVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.adminusuarios.negocio.dominio.Usuario)
                {
                    result = toUsuarioVO((es.pode.adminusuarios.negocio.dominio.Usuario)input);
                }
                else if (input instanceof Object[])
                {
                    result = toUsuarioVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.adminusuarios.negocio.dominio.Usuario fromUsuarioVO(final es.pode.adminusuarios.negocio.servicios.UsuarioVO vo) {
        //default mapping between VO and entity
        return (es.pode.adminusuarios.negocio.dominio.Usuario) 
                  this.getBeanMapper().map(vo, es.pode.adminusuarios.negocio.dominio.UsuarioImpl.class, DEF_MAPPING_USUARIOVO_USUARIO);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromUsuarioVO(es.pode.adminusuarios.negocio.servicios.UsuarioVO vo, es.pode.adminusuarios.negocio.dominio.Usuario entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_USUARIOVO_USUARIO);
    }
		
		
}