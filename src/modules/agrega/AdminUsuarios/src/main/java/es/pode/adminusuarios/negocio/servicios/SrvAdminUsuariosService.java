// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.adminusuarios.negocio.servicios;

/**
 * 
 */
public interface SrvAdminUsuariosService
{
    /**
     * <p>
     * Modificación de los datos de un grupo
     * </p>
     */
    public void modificarGrupo(es.pode.adminusuarios.negocio.servicios.GrupoVO grupo)
        throws es.pode.adminusuarios.negocio.servicios.ModificacionGrupoException;

    /**
     * <p>
     * Eliminación de un grupo
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.ValidaBajaGrupoVO bajaGrupo(java.lang.Long[] ids)
        throws es.pode.adminusuarios.negocio.servicios.BajaGrupoException;

    /**
     * <p>
     * Listado de los grupos existentes
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.GrupoVO[] listarGrupos();

    /**
     * <p>
     * Descripción de los datos de un grupo
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.GrupoVO descripcionGrupo(java.lang.Long id);

    /**
     * <p>
     * Los usuarios podrán solicitar una nueva clave y que está se les
     * envíe por correo electrónico a la cuenta que tienen dada de alta
     * en el sistema. Para ello deberán introducir la dirección de
     * correo electrónico y el NIF
     * </p>
     */
    public java.lang.Boolean nuevaClave(es.pode.adminusuarios.negocio.servicios.UsuarioVO emailNIF)
        throws es.pode.adminusuarios.negocio.servicios.NuevaClaveException;

    /**
     * <p>
     * Datos nuevos del usuario. La propiedad id del objeto UsuarioVO
     * es el identificado del usuarioque va a ser modificado
     * </p>
     */
    public java.lang.String modificarUsuario(es.pode.adminusuarios.negocio.servicios.UsuarioVO usuario)
        throws es.pode.adminusuarios.negocio.servicios.ModificarUsuarioException;

    /**
     * <p>
     * Listado de los roles existentes
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.RolVO[] listarRoles();

    /**
     * <p>
     * Alta de un usuario
     * </p>
     */
    public java.lang.Long altaUsuario(es.pode.adminusuarios.negocio.servicios.UsuarioVO usuario, es.pode.adminusuarios.negocio.servicios.UsuarioVO adminVO)
        throws es.pode.adminusuarios.negocio.servicios.EnviarCorreoException, es.pode.adminusuarios.negocio.servicios.AltaUsuarioException;

    /**
     * <p>
     * Eliminación de usuarios
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.ValidaBajaUsuarioVO bajaUsuario(java.lang.Long[] ids, es.pode.adminusuarios.negocio.servicios.UsuarioVO emailAdmin)
        throws es.pode.adminusuarios.negocio.servicios.BajaUsuarioException;

    /**
     * <p>
     * Listado de todos los usuarios del nodo que ya han sido dados de
     * alta por el administrador
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO[] listarUsuarios();

    /**
     * <p>
     * Los datos de un usuario
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO descripcionUsuario(java.lang.Long id)
        throws es.pode.adminusuarios.negocio.servicios.DescripcionUsuarioException;

    /**
     * 
     */
    public java.lang.String[] listarRolesUsuario(java.lang.String usuario);

    /**
     * 
     */
    public java.lang.Long altaGrupo(es.pode.adminusuarios.negocio.servicios.GrupoVO grupoVO)
        throws es.pode.adminusuarios.negocio.servicios.AltaGrupoException;

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.RolVO getRol(java.lang.Long id);

    /**
     * 
     */
    public java.lang.Boolean existeDescripcion(java.lang.String descripcion, java.lang.Long id);

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO obtenerUsuario(java.lang.String nif);

    /**
     * <p>
     * Comprueba si existe en el sistema un usuario con ese usuario
     * (login)
     * </p>
     */
    public java.lang.Boolean existeUsuario(java.lang.String usuario);

    /**
     * 
     */
    public java.lang.String enviarCorreoBaja(es.pode.adminusuarios.negocio.servicios.UsuarioVO usuario)
        throws es.pode.adminusuarios.negocio.servicios.EnviarCorreoException;

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO obtenerDatosUsuario(java.lang.String usuario);

    /**
     * 
     */
    public java.lang.Long[] obtenerUsuariosAdministrador();

    /**
     * 
     */
    public java.lang.Long[] obtenerGrupoAdministrador();

    /**
     * <p>
     * Listado de los usuarios del nodo que no han sido dados de alta
     * por el administrador
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO[] listarUsuariosPendientes();

    /**
     * 
     */
    public java.lang.String solicitarAltaUsuario(es.pode.adminusuarios.negocio.servicios.UsuarioVO usuario);

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.ValidaBajaUsuarioVO bajaUsuarioPendiente(java.lang.Long[] ids, es.pode.adminusuarios.negocio.servicios.UsuarioVO emailAdmin);

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioActivoVO[] usuariosActivos(es.pode.adminusuarios.negocio.servicios.ParametroAuditoriaUsuariosVO parametroAuditoriaVO);

    /**
     * 
     */
    public java.lang.String[] getEmailAdmin();

    /**
     * <p>
     * Lista todos los usuarios del sistema (salvo los pendientes de
     * dar de alta)
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO[] listarTodosUsuarios();

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO[] listarUsuariosInactivos();

    /**
     * 
     */
    public void activarUsuario(java.lang.Long id, java.lang.String admin);

    /**
     * 
     */
    public void desactivarUsuario(java.lang.Long id, java.lang.String admin);

    /**
     * <p>
     * Obtiene la lista de usuarios que pertenecen al mismo grupo de
     * trabajo que el usuario que se pasa como parámetro
     * </p>
     */
    public java.lang.String[] obtenerListaUsuariosGrupoTrabajo(java.lang.String usuarioGrupoTrabajo);

    /**
     * <p>
     * Obtiene el listado de los grupos de trabajo que existen
     * actualmente en la plataforma. Además de los que estén dados de
     * alta en la plataforma se devolverá el grupo "Todos", si el
     * usuario selecciona este grupo de trabajo se le asociarán todos
     * los grupos.
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.GrupoTrabajoVO[] listarGruposTrabajo();

    /**
     * <p>
     * Obtiene el grupo de trabajo cuyo identificador se pasa como
     * parámetro
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.GrupoTrabajoVO descripcionGrupoTrabajo(java.lang.Long identificador);

    /**
     * 
     */
    public es.pode.adminusuarios.negocio.servicios.ValidaBajaGrupoTrabajoVO bajaGrupoTrabajo(java.lang.Long[] ids);

    /**
     * 
     */
    public java.lang.Long modificarGrupoTrabajo(es.pode.adminusuarios.negocio.servicios.GrupoTrabajoVO grupoTrabajo);

    /**
     * <p>
     * Obtiene los correos de todos los publicadores de la plataforma
     * </p>
     */
    public java.lang.String[] getEmailPublicadores();

    /**
     * 
     */
    public java.lang.Boolean obtenerUsuariosGrupo(java.lang.Long id);

    /**
     * 
     */
    public java.lang.Boolean obtenerUsuariosGrupoTrabajo(java.lang.Long id);

    /**
     * 
     */
    public java.lang.Boolean existeNombreTrabajo(java.lang.String nombre, java.lang.Long id);

    /**
     * 
     */
    public java.lang.Long altaGrupoTrabajo(es.pode.adminusuarios.negocio.servicios.GrupoTrabajoVO grupoTrabajo);

    /**
     * <p>
     * Metodo para obtener el usuario que pertenezca ese openId
     * </p>
     */
    public es.pode.adminusuarios.negocio.servicios.UsuarioVO obtenerUsuarioConOpenId(java.lang.String openIdUrl);

}
