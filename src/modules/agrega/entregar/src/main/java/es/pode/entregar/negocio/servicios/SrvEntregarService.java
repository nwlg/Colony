// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.entregar.negocio.servicios;

/**
 * 
 */
public interface SrvEntregarService
{
  /**
   * <p>
   * Este metodo recibe un identificador de un ODE.
   * </p>
   * <p>
   * Devuelve el paquete PIF con todos los elementos que contiene el
   * ODE y el resultado de la validación todo ello en un
   * PaquetePifVO.
   * </p>
   * <p>
   * Para entregar el paquete, el metodo tiene que localizar la
   * informacion referente al ODE en disco (invocar al localizador),
   * despues tiene que validar la informacion (invocar al validador)
   * para despues generar el paquete.
   * </p>
      * @param identificador  Identificador del ODE del que se requiere el paquete.
      * @return es.pode.entregar.negocio.servicios.PaquetePifDriVO
   * @throws throws es.pode.entregar.negocio.servicios.GeneraPIFException Exception
   */
    public es.pode.entregar.negocio.servicios.PaquetePifDriVO generarPaquetePIF(java.lang.String identificador)
        throws es.pode.entregar.negocio.servicios.GeneraPIFException;

  /**
   * <p>
   * Metodo obtenerObjManifest
   * </p>
   * <p>
   * El Empaquetador, llamara a este metodo del servicio para guardar
   * el manifest en memoria;
   * </p>
   * <p>
   * El método cogerá el objeto serializado lo deserializará obtendrá
   * un manifest y lo metará en memoria (HashMap)
   * </p>
   * <p>
   * Devolvera un string que sera el identificador
   * </p>
   * <p>
   * este identificador estara formado con el id del manifest
   * (manifest.getIdentifier()) y el prefijo EMP
   * </p>
         * @param fichManifest  Objeto Manifest serializado.
      * @return java.lang.String
   * @throws throws es.pode.entregar.negocio.servicios.CargarManifestExcepcion Exception
   */
    public java.lang.String cargarObjManifest(java.lang.String usuario, javax.activation.DataHandler fichManifest)
        throws es.pode.entregar.negocio.servicios.CargarManifestExcepcion;

  /**
   * <p>
   * metodo obtenerOrganizaciones
   * </p>
   * <p>
   * dependiendo del valor del prefijo del identificador, tendremos
   * que hacer:
   * </p>
   * <p>
   * 1.- si el valor es EMPAQUETADOR, tendremos que buscar el
   * manifest en la HashMap que tendremos cargada en memoria, la
   * trataremos y devolveremos el array de tipo OrganizacionVO[]
   * </p>
   * <p>
   * 2.- si el valor es BUSCADOR, tendremos que recuperar el
   * manifest. Para ello, llamaremos al metodo consultaLocalizador
   * con el id y en uno de los atributos del LocalizadorVO (ruta)
   * obtendremos la ruta donde estara nuestro fichero manifest.xml;
   * una vez tengamos el fichero, se parseara con la libreria
   * (generada por Castor) y trataremos los datos devolviendo un
   * array OrganizacionVO[]
   * </p>
      * @return es.pode.entregar.negocio.servicios.ManifestVO
   * @throws throws es.pode.entregar.negocio.servicios.ObtenerOrganizacionesException Exception
   */
    public es.pode.entregar.negocio.servicios.ManifestVO obtenerOrganizaciones(es.pode.entregar.negocio.servicios.ArgObtOrganizacionesVO argObtenerOrganizaciones)
        throws es.pode.entregar.negocio.servicios.ObtenerOrganizacionesException;

  /**
   * <p>
   * Este metodo se comporta como el homonimo de la clase pero
   * permite configurar el formato del fichero PIF que se devuelve
   * entre la coleccion de formatos que se soportan por la clase
   * TiposPIF.
   * </p>
   * <p>
   * Toma como parametro de entrada el identificador del ODE y el
   * tipo de fichero PIF que desea a la salida de entre los posibles
   * por la clase TipoPIF.
   * </p>
   * <p>
   * Devuelve el ODE el formato PIF con el tipo escogido y el
   * resultado de la validación todo ello en un PaquetePifVO.
   * </p>
      * @return es.pode.entregar.negocio.servicios.PaquetePifVO
   * @throws throws es.pode.entregar.negocio.servicios.GeneraPIFTipoPIFException Exception
   */
    public es.pode.entregar.negocio.servicios.PaquetePifVO generarPaquetePIFTipoPIF(es.pode.entregar.negocio.servicios.TipoPifVO tipoPifVO)
        throws es.pode.entregar.negocio.servicios.GeneraPIFTipoPIFException;

  /**
   * <p>
   * Este metodo devuelve un array de Strings con todos los tipos de
   * formatos PIF que maneja el modulo de Entregar. Los propios
   * Strings son identificadores para ulteriores llamadas de peticion
   * de conversion de formato de ODEs.
   * </p>
   * @return java.lang.String[]
   */
    public java.lang.String[] obtenerTiposPIF();

  /**
   * <p>
   * este método se usa para saber si un servicio está levantado o
   * no.
   * </p>
   * @return boolean
   */
    public boolean estoyActivo();

    public es.pode.entregar.negocio.servicios.LocalizadorAdlVO localizacionPaquetePIF(java.lang.String identificador);

}
