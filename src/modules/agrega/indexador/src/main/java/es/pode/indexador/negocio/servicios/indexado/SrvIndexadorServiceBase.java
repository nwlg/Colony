// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.indexador.negocio.servicios.indexado;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService
 */
public abstract class SrvIndexadorServiceBase
    implements es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService
{

		 protected static final Logger logger = Logger.getLogger(SrvIndexadorServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    private es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorService srvBuscadorService;
	
	    /**
	     * Sets the reference to <code>srvBuscadorService</code>.
	     */
	    public void setSrvBuscadorService(es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorService srvBuscadorService)
	    {
	        this.srvBuscadorService = srvBuscadorService;
	    }
	
	    /**
	     * Gets the reference to <code>srvBuscadorService</code>.
	     */
	    protected es.pode.indexador.negocio.servicios.busqueda.SrvBuscadorService getSrvBuscadorService()
	    {
	        return this.srvBuscadorService;
	    }
	    
	        
	
			
    protected final es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices getSrvTesaurosServices()
	        throws java.lang.Exception
	    {
            String srvTesaurosServicesFile="importedServices.properties";	    
	          java.io.InputStream srvTesaurosServicesInputStream=SrvIndexadorServiceBase.class.getClassLoader().getResourceAsStream(srvTesaurosServicesFile);
	          java.util.Properties srvTesaurosServicesProperties = new java.util.Properties();
	          srvTesaurosServicesProperties.load(srvTesaurosServicesInputStream);
	          String srvTesaurosServicesEndPointAddress="";
	          srvTesaurosServicesEndPointAddress=(String) srvTesaurosServicesProperties.get("srvTesaurosServicesPort");
			  logger.debug("srvTesaurosServicesEndPointAddress del fichero --> " + srvTesaurosServicesEndPointAddress);
			  es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesService srvTesaurosServices = new es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesServiceLocator();                                                                                                                                                                                                                                                    
            if (srvTesaurosServicesEndPointAddress.length()>0) 
					  ((es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServicesServiceLocator)srvTesaurosServices).setSrvTesaurosServicesEndpointAddress(srvTesaurosServicesEndPointAddress);
	    	    es.pode.fuentestaxonomicas.negocio.servicio.SrvTesaurosServices port = srvTesaurosServices.getSrvTesaurosServices();	    
	          return port;
	    }

    
    
    private es.pode.indexador.negocio.dominio.IndiceDao indiceDao;

    /**
     * Sets the reference to <code>indice</code>'s DAO.
     */
    public void setIndiceDao(es.pode.indexador.negocio.dominio.IndiceDao indiceDao)
    {
        this.indiceDao = indiceDao;
    }

    /**
     * Gets the reference to <code>indice</code>'s DAO.
     */
    protected es.pode.indexador.negocio.dominio.IndiceDao getIndiceDao()
    {
        return this.indiceDao;
    }


    /**
     * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService#indexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[])
     */
    public es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] indexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)
        throws es.pode.indexador.negocio.servicios.indexado.IndexaODEException
    {
        if (localizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.indexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador) - 'localizador' can not be null");
        }
        try
        {
            return this.handleIndexarODE(localizador);
        }
        catch (es.pode.indexador.negocio.servicios.indexado.IndexaODEException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.indexador.negocio.servicios.indexado.SrvIndexadorServiceException(
                "Error performing 'es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.indexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #indexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[])}
      */
    protected abstract es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] handleIndexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)
        throws java.lang.Exception;

    /**
     * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService#reindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[])
     */
    public es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] reindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)
        throws es.pode.indexador.negocio.servicios.indexado.ReindexaODEException
    {
        if (localizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.reindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador) - 'localizador' can not be null");
        }
        try
        {
            return this.handleReindexarODE(localizador);
        }
        catch (es.pode.indexador.negocio.servicios.indexado.ReindexaODEException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.indexador.negocio.servicios.indexado.SrvIndexadorServiceException(
                "Error performing 'es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.reindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #reindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[])}
      */
    protected abstract es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] handleReindexarODE(es.pode.indexador.negocio.servicios.indexado.IdODEVO[] localizador)
        throws java.lang.Exception;

    /**
     * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService#eliminarODE(java.lang.String[])
     */
    public es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] eliminarODE(java.lang.String[] idODE)
        throws es.pode.indexador.negocio.servicios.indexado.EliminaODEException
    {
        if (idODE == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.eliminarODE(java.lang.String[] idODE) - 'idODE' can not be null");
        }
        try
        {
            return this.handleEliminarODE(idODE);
        }
        catch (es.pode.indexador.negocio.servicios.indexado.EliminaODEException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.indexador.negocio.servicios.indexado.SrvIndexadorServiceException(
                "Error performing 'es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.eliminarODE(java.lang.String[] idODE)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarODE(java.lang.String[])}
      */
    protected abstract es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] handleEliminarODE(java.lang.String[] idODE)
        throws java.lang.Exception;

    /**
     * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService#regenerarIndice(java.lang.String, es.pode.indexador.negocio.servicios.indexado.IdODEVO[])
     */
    public es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] regenerarIndice(java.lang.String idioma, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)
        throws es.pode.indexador.negocio.servicios.indexado.IndexacionTotalException
    {
        if (idioma == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndice(java.lang.String idioma, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes) - 'idioma' can not be null");
        }
        if (odes == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndice(java.lang.String idioma, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes) - 'odes' can not be null");
        }
        try
        {
            return this.handleRegenerarIndice(idioma, odes);
        }
        catch (es.pode.indexador.negocio.servicios.indexado.IndexacionTotalException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.indexador.negocio.servicios.indexado.SrvIndexadorServiceException(
                "Error performing 'es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndice(java.lang.String idioma, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #regenerarIndice(java.lang.String, es.pode.indexador.negocio.servicios.indexado.IdODEVO[])}
      */
    protected abstract es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] handleRegenerarIndice(java.lang.String idioma, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)
        throws java.lang.Exception;

    /**
     * @see es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService#regenerarIndices(java.lang.Long, es.pode.indexador.negocio.servicios.indexado.IdODEVO[])
     */
    public es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] regenerarIndices(java.lang.Long idTarea, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)
        throws es.pode.indexador.negocio.servicios.indexado.ReindexadoException
    {
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndices(java.lang.Long idTarea, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes) - 'idTarea' can not be null");
        }
        if (odes == null)
        {
            throw new IllegalArgumentException(
                "es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndices(java.lang.Long idTarea, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes) - 'odes' can not be null");
        }
        try
        {
            return this.handleRegenerarIndices(idTarea, odes);
        }
        catch (es.pode.indexador.negocio.servicios.indexado.ReindexadoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.indexador.negocio.servicios.indexado.SrvIndexadorServiceException(
                "Error performing 'es.pode.indexador.negocio.servicios.indexado.SrvIndexadorService.regenerarIndices(java.lang.Long idTarea, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #regenerarIndices(java.lang.Long, es.pode.indexador.negocio.servicios.indexado.IdODEVO[])}
      */
    protected abstract es.pode.indexador.negocio.servicios.indexado.IndexadorVO[] handleRegenerarIndices(java.lang.Long idTarea, es.pode.indexador.negocio.servicios.indexado.IdODEVO[] odes)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.indexador.PrincipalStore.get();
    }
}