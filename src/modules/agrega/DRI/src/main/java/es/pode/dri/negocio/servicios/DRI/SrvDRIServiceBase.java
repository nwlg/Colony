// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.dri.negocio.servicios.DRI;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.dri.negocio.servicios.DRI.SrvDRIService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService
 */
public abstract class SrvDRIServiceBase
    implements es.pode.dri.negocio.servicios.DRI.SrvDRIService
{

		 protected static final Logger logger = Logger.getLogger(SrvDRIServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    private es.pode.dri.negocio.servicios.Sesion.SrvSesionesService srvSesionesService;
	
	    /**
	     * Sets the reference to <code>srvSesionesService</code>.
	     */
	    public void setSrvSesionesService(es.pode.dri.negocio.servicios.Sesion.SrvSesionesService srvSesionesService)
	    {
	        this.srvSesionesService = srvSesionesService;
	    }
	
	    /**
	     * Gets the reference to <code>srvSesionesService</code>.
	     */
	    protected es.pode.dri.negocio.servicios.Sesion.SrvSesionesService getSrvSesionesService()
	    {
	        return this.srvSesionesService;
	    }
	    
	        
	
			
    protected final es.pode.entregar.negocio.servicios.SrvEntregarService getSrvEntregarService()
	        throws java.lang.Exception
	    {
            String srvEntregarServiceFile="importedServices.properties";	    
	          java.io.InputStream srvEntregarServiceInputStream=SrvDRIServiceBase.class.getClassLoader().getResourceAsStream(srvEntregarServiceFile);
	          java.util.Properties srvEntregarServiceProperties = new java.util.Properties();
	          srvEntregarServiceProperties.load(srvEntregarServiceInputStream);
	          String srvEntregarServiceEndPointAddress="";
	          srvEntregarServiceEndPointAddress=(String) srvEntregarServiceProperties.get("srvEntregarServicePort");
			  logger.debug("srvEntregarServiceEndPointAddress del fichero --> " + srvEntregarServiceEndPointAddress);
			  es.pode.entregar.negocio.servicios.SrvEntregarServiceService srvEntregarService = new es.pode.entregar.negocio.servicios.SrvEntregarServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvEntregarServiceEndPointAddress.length()>0) 
					  ((es.pode.entregar.negocio.servicios.SrvEntregarServiceServiceLocator)srvEntregarService).setSrvEntregarServiceEndpointAddress(srvEntregarServiceEndPointAddress);
	    	    es.pode.entregar.negocio.servicios.SrvEntregarService port = srvEntregarService.getSrvEntregarService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.publicacion.negocio.servicios.SrvPublicacionService getSrvPublicacionService()
	        throws java.lang.Exception
	    {
            String srvPublicacionServiceFile="importedServices.properties";	    
	          java.io.InputStream srvPublicacionServiceInputStream=SrvDRIServiceBase.class.getClassLoader().getResourceAsStream(srvPublicacionServiceFile);
	          java.util.Properties srvPublicacionServiceProperties = new java.util.Properties();
	          srvPublicacionServiceProperties.load(srvPublicacionServiceInputStream);
	          String srvPublicacionServiceEndPointAddress="";
	          srvPublicacionServiceEndPointAddress=(String) srvPublicacionServiceProperties.get("srvPublicacionServicePort");
			  logger.debug("srvPublicacionServiceEndPointAddress del fichero --> " + srvPublicacionServiceEndPointAddress);
			  es.pode.publicacion.negocio.servicios.SrvPublicacionServiceService srvPublicacionService = new es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvPublicacionServiceEndPointAddress.length()>0) 
					  ((es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator)srvPublicacionService).setSrvPublicacionServiceEndpointAddress(srvPublicacionServiceEndPointAddress);
	    	    es.pode.publicacion.negocio.servicios.SrvPublicacionService port = srvPublicacionService.getSrvPublicacionService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.buscar.negocio.buscar.servicios.SrvBuscarService getSrvBuscarService()
	        throws java.lang.Exception
	    {
            String srvBuscarServiceFile="importedServices.properties";	    
	          java.io.InputStream srvBuscarServiceInputStream=SrvDRIServiceBase.class.getClassLoader().getResourceAsStream(srvBuscarServiceFile);
	          java.util.Properties srvBuscarServiceProperties = new java.util.Properties();
	          srvBuscarServiceProperties.load(srvBuscarServiceInputStream);
	          String srvBuscarServiceEndPointAddress="";
	          srvBuscarServiceEndPointAddress=(String) srvBuscarServiceProperties.get("srvBuscarServicePort");
			  logger.debug("srvBuscarServiceEndPointAddress del fichero --> " + srvBuscarServiceEndPointAddress);
			  es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceService srvBuscarService = new es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvBuscarServiceEndPointAddress.length()>0) 
					  ((es.pode.buscar.negocio.buscar.servicios.SrvBuscarServiceServiceLocator)srvBuscarService).setSrvBuscarServiceEndpointAddress(srvBuscarServiceEndPointAddress);
	    	    es.pode.buscar.negocio.buscar.servicios.SrvBuscarService port = srvBuscarService.getSrvBuscarService();	    
	          return port;
	    }

    
    

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#presentarAlmacenarSesion(java.lang.String, javax.activation.DataHandler)
     */
    public void presentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        if (sesionId == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif) - 'sesionId' can not be null");
        }
        if (pif == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif) - 'pif' can not be null");
        }
        try
        {
            this.handlePresentarAlmacenarSesion(sesionId, pif);
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #presentarAlmacenarSesion(java.lang.String, javax.activation.DataHandler)}
      */
    protected abstract void handlePresentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#solicitarEntregarSesion(java.lang.String, java.lang.String)
     */
    public javax.activation.DataHandler solicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        if (sesionId == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.solicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec) - 'sesionId' can not be null");
        }
        if (mec == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.solicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec) - 'mec' can not be null");
        }
        try
        {
            return this.handleSolicitarEntregarSesion(sesionId, mec);
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.solicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #solicitarEntregarSesion(java.lang.String, java.lang.String)}
      */
    protected abstract javax.activation.DataHandler handleSolicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#presentarAlmacenar(java.lang.String, java.lang.String, javax.activation.DataHandler)
     */
    public void presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'usuario' can not be null");
        }
        if (clave == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'clave' can not be null");
        }
        if (pif == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'pif' can not be null");
        }
        try
        {
            this.handlePresentarAlmacenar(usuario, clave, pif);
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #presentarAlmacenar(java.lang.String, java.lang.String, javax.activation.DataHandler)}
      */
    protected abstract void handlePresentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#estasActivo()
     */
    public java.lang.Boolean estasActivo()
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        try
        {
            return this.handleEstasActivo();
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.estasActivo()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #estasActivo()}
      */
    protected abstract java.lang.Boolean handleEstasActivo()
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#presentarCatalogar(java.lang.String, java.lang.String, javax.activation.DataHandler)
     */
    public void presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'usuario' can not be null");
        }
        if (clave == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'clave' can not be null");
        }
        if (pif == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif) - 'pif' can not be null");
        }
        try
        {
            this.handlePresentarCatalogar(usuario, clave, pif);
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #presentarCatalogar(java.lang.String, java.lang.String, javax.activation.DataHandler)}
      */
    protected abstract void handlePresentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.DRI.SrvDRIService#presentarCatalogarSesion(java.lang.String, javax.activation.DataHandler)
     */
    public void presentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException
    {
        if (sesionId == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif) - 'sesionId' can not be null");
        }
        if (pif == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif) - 'pif' can not be null");
        }
        try
        {
            this.handlePresentarCatalogarSesion(sesionId, pif);
        }
        catch (es.pode.dri.negocio.servicios.DRI.SesionNoValidaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.DRI.SrvDRIServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.DRI.SrvDRIService.presentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #presentarCatalogarSesion(java.lang.String, javax.activation.DataHandler)}
      */
    protected abstract void handlePresentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.dri.negocio.PrincipalStore.get();
    }
}