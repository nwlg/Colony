// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.dri.negocio.servicios.Sesion;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.dri.negocio.servicios.Sesion.SrvSesionesService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService
 */
public abstract class SrvSesionesServiceBase
    implements es.pode.dri.negocio.servicios.Sesion.SrvSesionesService
{

		 protected static final Logger logger = Logger.getLogger(SrvSesionesServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    private es.pode.dri.negocio.dominio.SesionDao sesionDao;

    /**
     * Sets the reference to <code>sesion</code>'s DAO.
     */
    public void setSesionDao(es.pode.dri.negocio.dominio.SesionDao sesionDao)
    {
        this.sesionDao = sesionDao;
    }

    /**
     * Gets the reference to <code>sesion</code>'s DAO.
     */
    protected es.pode.dri.negocio.dominio.SesionDao getSesionDao()
    {
        return this.sesionDao;
    }


    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#createSession(java.lang.String, java.lang.String)
     */
    public java.lang.String createSession(java.lang.String userID, java.lang.String password)
        throws es.pode.dri.negocio.servicios.Sesion.WrongCredentialsException
    {
        if (userID == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.createSession(java.lang.String userID, java.lang.String password) - 'userID' can not be null");
        }
        if (password == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.createSession(java.lang.String userID, java.lang.String password) - 'password' can not be null");
        }
        try
        {
            return this.handleCreateSession(userID, password);
        }
        catch (es.pode.dri.negocio.servicios.Sesion.WrongCredentialsException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.createSession(java.lang.String userID, java.lang.String password)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #createSession(java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.String handleCreateSession(java.lang.String userID, java.lang.String password)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#createAnonymousSession()
     */
    public java.lang.String createAnonymousSession()
    {
        try
        {
            return this.handleCreateAnonymousSession();
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.createAnonymousSession()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #createAnonymousSession()}
      */
    protected abstract java.lang.String handleCreateAnonymousSession()
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#limpiarSesiones()
     */
    public void limpiarSesiones()
        throws es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException
    {
        try
        {
            this.handleLimpiarSesiones();
        }
        catch (es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.limpiarSesiones()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #limpiarSesiones()}
      */
    protected abstract void handleLimpiarSesiones()
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#destroySession(java.lang.String)
     */
    public void destroySession(java.lang.String sessionID)
        throws es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException
    {
        if (sessionID == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.destroySession(java.lang.String sessionID) - 'sessionID' can not be null");
        }
        try
        {
            this.handleDestroySession(sessionID);
        }
        catch (es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.destroySession(java.lang.String sessionID)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #destroySession(java.lang.String)}
      */
    protected abstract void handleDestroySession(java.lang.String sessionID)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#consultaSesion(java.lang.String)
     */
    public es.pode.dri.negocio.servicios.SesionVO consultaSesion(java.lang.String id)
        throws es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.consultaSesion(java.lang.String id) - 'id' can not be null");
        }
        try
        {
            return this.handleConsultaSesion(id);
        }
        catch (es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.consultaSesion(java.lang.String id)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaSesion(java.lang.String)}
      */
    protected abstract es.pode.dri.negocio.servicios.SesionVO handleConsultaSesion(java.lang.String id)
        throws java.lang.Exception;

    /**
     * @see es.pode.dri.negocio.servicios.Sesion.SrvSesionesService#modificarSesion(es.pode.dri.negocio.servicios.SesionVO)
     */
    public es.pode.dri.negocio.servicios.SesionVO modificarSesion(es.pode.dri.negocio.servicios.SesionVO sesion)
        throws es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException
    {
        if (sesion == null)
        {
            throw new IllegalArgumentException(
                "es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.modificarSesion(es.pode.dri.negocio.servicios.SesionVO sesion) - 'sesion' can not be null");
        }
        try
        {
            return this.handleModificarSesion(sesion);
        }
        catch (es.pode.dri.negocio.servicios.Sesion.NoExisteSesionException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.dri.negocio.servicios.Sesion.SrvSesionesServiceException(
                "Error performing 'es.pode.dri.negocio.servicios.Sesion.SrvSesionesService.modificarSesion(es.pode.dri.negocio.servicios.SesionVO sesion)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarSesion(es.pode.dri.negocio.servicios.SesionVO)}
      */
    protected abstract es.pode.dri.negocio.servicios.SesionVO handleModificarSesion(es.pode.dri.negocio.servicios.SesionVO sesion)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.dri.negocio.PrincipalStore.get();
    }
}