// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.dri.negocio.servicios.DRI;

/**
 * 
 */
public interface SrvDRIService
{
  /**
   * <p>
   * Este metodo invoca el publicarPIF del servicio de publicacion.
   * </p>
   * <p>
   * Le pasan como parametros el identificador de la sesion que hay
   * que haber inicializado y el contenido del ODE en formato PIF.
   * </p>
      * @param sesionId  Identificador de la sesion que hay que haber requerido previamente.
         * @param pif  Fichero PIF con el contenido del ODE.
      * @throws throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException Exception
   */
    public void presentarAlmacenarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

  /**
   * <p>
   * Este metodo devuelve un ODE en formato PIF.
   * </p>
   * <p>
   * Toma como parametros el identificador de la sesion que hay que
   * haber inicializado antes y el identificador del ODE que se
   * quiere obtener.
   * </p>
      * @param sesionId  Identificador de la sesion que hay que haber inicializado.
         * @param mec  Identificador mec del ODE que se solicita.
      * @return javax.activation.DataHandler
   * @throws throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException Exception
   */
    public javax.activation.DataHandler solicitarEntregarSesion(java.lang.String sesionId, java.lang.String mec)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

  /**
   * <p>
   * Este metodo invoca el publicarPIF del servicio de publicacion.
   * </p>
   * <p>
   * Le pasan como parametros el identificador de usuario y la clave
   * de un usuario autenticado en la plataforma y el contenido del
   * ODE en formato PIF. El usuario debe tener los suficientes
   * permisos dentro de la plataforma para poder realizar esta accion
   * </p>
      * @param usuario  Usuario perteneciente a la plataforma.
         * @param clave  Clave del usuario dentro de la platafoma.
         * @param pif  Fichero del ODE en formato zip.
      * @throws throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException Exception
   */
    public void presentarAlmacenar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

    public java.lang.Boolean estasActivo()
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

  /**
   * <p>
   * Este metodo recoge un ODE y lo introduce en el ciclo de vida de
   * la plataforma en el estado catalogar en el que un catalogador ha
   * de realizar su labor sobre el ODE.
   * </p>
      * @param usuario  Usuario perteneciente a la plataforma.
         * @param clave  Clave del usuario dentro de la platafoma.
         * @param pif  Fichero del ODE en formato zip.
      * @throws throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException Exception
   */
    public void presentarCatalogar(java.lang.String usuario, java.lang.String clave, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

  /**
   * <p>
   * Este metodo recoge un ODE y lo introduce en el ciclo de vida de
   * la plataforma en el estado catalogar en el que un catalogador ha
   * de realizar su labor sobre el ODE.
   * </p>
      * @param sesionId  Identificador de la sesion que hay que haber inicializado.
         * @param pif  contenido del ODE en formato ZIP.
      * @throws throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException Exception
   */
    public void presentarCatalogarSesion(java.lang.String sesionId, javax.activation.DataHandler pif)
        throws es.pode.dri.negocio.servicios.DRI.SesionNoValidaException;

}
