// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package es.pode.contenidos.negocio.faqs.dominio;

import net.sf.dozer.util.mapping.MapperIF;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>es.pode.contenidos.negocio.faqs.dominio.Faq</code>.
 * </p>
 *
 * @see es.pode.contenidos.negocio.faqs.dominio.Faq
 */
public abstract class FaqDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements es.pode.contenidos.negocio.faqs.dominio.FaqDao
{



	
	/**
	 * Constant that identifies a mapping between an 
	 * entity (Faq) and a VO (FaqVO)
	 */
	public final static String DEF_MAPPING_FAQ_FAQVO = "DEF_MAPPING_FAQ_FAQVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (FaqVO) and an entity (Faq)
	 */
	public final static String DEF_MAPPING_FAQVO_FAQ = "DEF_MAPPING_FAQ_FAQVOPRIME";
	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    private es.pode.contenidos.negocio.faqs.dominio.CategoriaFaqDao categoriaFaqDao;

    /**
     * Sets the reference to <code>categoriaFaqDao</code>.
     */
    public void setCategoriaFaqDao(es.pode.contenidos.negocio.faqs.dominio.CategoriaFaqDao categoriaFaqDao)
    {
        this.categoriaFaqDao = categoriaFaqDao;
    }

    /**
     * Gets the reference to <code>categoriaFaqDao</code>.
     */
    protected es.pode.contenidos.negocio.faqs.dominio.CategoriaFaqDao getCategoriaFaqDao()
    {
        return this.categoriaFaqDao;
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#load(int, java.lang.Long)
     */
    public Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Faq.load - 'id' can not be null");
        }
        final java.util.List list = this.getHibernateTemplate().find(
            "from es.pode.contenidos.negocio.faqs.dominio.Faq as entity where entity.id = ?", id);
        final Object entity = list != null && !list.isEmpty() ? list.iterator().next() : null;
        return transformEntity(transform, (es.pode.contenidos.negocio.faqs.dominio.Faq)entity);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#load(java.lang.Long)
     */
    public es.pode.contenidos.negocio.faqs.dominio.Faq load(java.lang.Long id)
    {
        return (es.pode.contenidos.negocio.faqs.dominio.Faq)this.load(TRANSFORM_NONE, id);
    }
    
    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }
    
    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(es.pode.contenidos.negocio.faqs.dominio.FaqImpl.class);
        this.transformEntities(transform, results);
        return results;
    }
    

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    public es.pode.contenidos.negocio.faqs.dominio.Faq create(es.pode.contenidos.negocio.faqs.dominio.Faq faq)
    {
        return (es.pode.contenidos.negocio.faqs.dominio.Faq)this.create(TRANSFORM_NONE, faq);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(int transform, es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    public Object create(final int transform, final es.pode.contenidos.negocio.faqs.dominio.Faq faq)
    {
        if (faq == null)
        {
            throw new IllegalArgumentException(
                "Faq.create - 'faq' can not be null");
        }
        Object identifier = this.getHibernateTemplate().save(faq);
        faq.setId((java.lang.Long)identifier);
        return this.transformEntity(transform, faq);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Faq.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (es.pode.contenidos.negocio.faqs.dominio.Faq)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(java.util.Date, java.util.Date, java.util.Date, java.lang.String)
     */
    public es.pode.contenidos.negocio.faqs.dominio.Faq create(
        java.util.Date fechaModificacion,
        java.util.Date fechaBaja,
        java.util.Date fechaPublicacion,
        java.lang.String param)
    {
        return (es.pode.contenidos.negocio.faqs.dominio.Faq)this.create(TRANSFORM_NONE, fechaModificacion, fechaBaja, fechaPublicacion, param);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(int, java.util.Date, java.util.Date, java.util.Date, java.lang.String)
     */
    public Object create(
        final int transform,
        java.util.Date fechaModificacion,
        java.util.Date fechaBaja,
        java.util.Date fechaPublicacion,
        java.lang.String param)
    {
        es.pode.contenidos.negocio.faqs.dominio.Faq entity = new es.pode.contenidos.negocio.faqs.dominio.FaqImpl();
        entity.setFechaModificacion(fechaModificacion);
        entity.setFechaBaja(fechaBaja);
        entity.setFechaPublicacion(fechaPublicacion);
        entity.setParam(param);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(es.pode.contenidos.negocio.faqs.dominio.CategoriaFaq, es.pode.contenidos.negocio.faqs.dominio.DescripcionFaq)
     */
    public es.pode.contenidos.negocio.faqs.dominio.Faq create(
        es.pode.contenidos.negocio.faqs.dominio.CategoriaFaq categoria,
        java.util.Collection descripcionFaq)
    {
        return (es.pode.contenidos.negocio.faqs.dominio.Faq)this.create(TRANSFORM_NONE, categoria, descripcionFaq);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#create(int, es.pode.contenidos.negocio.faqs.dominio.CategoriaFaq, es.pode.contenidos.negocio.faqs.dominio.DescripcionFaq)
     */
    public Object create(
        final int transform,
        es.pode.contenidos.negocio.faqs.dominio.CategoriaFaq categoria,
        java.util.Collection descripcionFaq)
    {
        es.pode.contenidos.negocio.faqs.dominio.Faq entity = new es.pode.contenidos.negocio.faqs.dominio.FaqImpl();
        entity.setCategoria(categoria);
        entity.setDescripcionFaq(descripcionFaq);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#update(es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    public void update(es.pode.contenidos.negocio.faqs.dominio.Faq faq)
    {
        if (faq == null)
        {
            throw new IllegalArgumentException(
                "Faq.update - 'faq' can not be null");
        }
        this.getHibernateTemplate().update(faq);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Faq.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((es.pode.contenidos.negocio.faqs.dominio.Faq)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#remove(es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    public void remove(es.pode.contenidos.negocio.faqs.dominio.Faq faq)
    {
        if (faq == null)
        {
            throw new IllegalArgumentException(
                "Faq.remove - 'faq' can not be null");
        }
        this.getHibernateTemplate().delete(faq);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Faq.remove - 'id' can not be null");
        }
        es.pode.contenidos.negocio.faqs.dominio.Faq entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Faq.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqs()
     */
    public java.util.List obtenerFaqs()
    {
        return this.obtenerFaqs(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqs(java.lang.String)
     */
    public java.util.List obtenerFaqs(final java.lang.String queryString)
    {
        return this.obtenerFaqs(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqs(int)
     */
    public java.util.List obtenerFaqs(final int transform)
    {
        return this.obtenerFaqs(transform, "from es.pode.contenidos.negocio.faqs.dominio.Faq faq order by faq.fechaPublicacion desc");
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqs(int, java.lang.String)
     */
    public java.util.List obtenerFaqs(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIntervaloFaqs(es.pode.contenidos.negocio.faqs.dominio.IntervaloCriteria)
     */
    public java.util.List obtenerIntervaloFaqs(es.pode.contenidos.negocio.faqs.dominio.IntervaloCriteria criterio)
    {
        return this.obtenerIntervaloFaqs(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIntervaloFaqs(int, java.lang.String, es.pode.contenidos.negocio.faqs.dominio.IntervaloCriteria)
     */
    public java.util.List obtenerIntervaloFaqs(final int transform, final es.pode.contenidos.negocio.faqs.dominio.IntervaloCriteria criterio)
    {
        try
        {
            es.pode.contenidos.negocio.CriteriaSearch criteriaSearch = new es.pode.contenidos.negocio.CriteriaSearch(super.getSession(false), es.pode.contenidos.negocio.faqs.dominio.FaqImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
            es.pode.contenidos.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.contenidos.negocio.CriteriaSearchParameter(
                    criterio.getPosicionInicial(),
                    "posicion", es.pode.contenidos.negocio.CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
            es.pode.contenidos.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.contenidos.negocio.CriteriaSearchParameter(
                    criterio.getPosicionFinal(),
                    "posicion", es.pode.contenidos.negocio.CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            es.pode.contenidos.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.contenidos.negocio.CriteriaSearchParameter(
                    criterio.getIdioma(),
                    "idioma", es.pode.contenidos.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdioma(java.lang.String)
     */
    public java.util.List obtenerFaqsPorIdioma(java.lang.String param)
    {
        return this.obtenerFaqsPorIdioma(TRANSFORM_NONE, param);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdioma(java.lang.String, java.lang.String)
     */
    public java.util.List obtenerFaqsPorIdioma(final java.lang.String queryString, final java.lang.String param)
    {
        return this.obtenerFaqsPorIdioma(TRANSFORM_NONE, queryString, param);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdioma(int, java.lang.String)
     */
    public java.util.List obtenerFaqsPorIdioma(final int transform, final java.lang.String param)
    {
        return this.obtenerFaqsPorIdioma(transform, "from es.pode.contenidos.negocio.faqs.dominio.Faq faq where faq.descripcionFaq.idioma= :param order by faq.fechaPublicacion desc", param);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdioma(int, java.lang.String, java.lang.String)
     */
    public java.util.List obtenerFaqsPorIdioma(final int transform, final java.lang.String queryString, final java.lang.String param)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("param", param);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdiomaCategoria(java.lang.String, java.lang.Long)
     */
    public java.util.Collection obtenerFaqsPorIdiomaCategoria(java.lang.String param, java.lang.Long id)
    {
        return this.obtenerFaqsPorIdiomaCategoria(TRANSFORM_NONE, param, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdiomaCategoria(java.lang.String, java.lang.String, java.lang.Long)
     */
    public java.util.Collection obtenerFaqsPorIdiomaCategoria(final java.lang.String queryString, final java.lang.String param, final java.lang.Long id)
    {
        return this.obtenerFaqsPorIdiomaCategoria(TRANSFORM_NONE, queryString, param, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdiomaCategoria(int, java.lang.String, java.lang.Long)
     */
    public java.util.Collection obtenerFaqsPorIdiomaCategoria(final int transform, final java.lang.String param, final java.lang.Long id)
    {
        return this.obtenerFaqsPorIdiomaCategoria(transform, "from es.pode.contenidos.negocio.faqs.dominio.Faq faq where faq.descripcionFaq.idioma= :param and faq.categoria.id= :id order by faq.fechaPublicacion desc", param, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdiomaCategoria(int, java.lang.String, java.lang.String, java.lang.Long)
     */
    public java.util.Collection obtenerFaqsPorIdiomaCategoria(final int transform, final java.lang.String queryString, final java.lang.String param, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("param", param);            	
			queryObject.setParameter("id", id);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIdiomasPorIdFaq(java.lang.Long)
     */
    public java.util.List obtenerIdiomasPorIdFaq(java.lang.Long id)
    {
        return this.obtenerIdiomasPorIdFaq(TRANSFORM_NONE, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIdiomasPorIdFaq(java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerIdiomasPorIdFaq(final java.lang.String queryString, final java.lang.Long id)
    {
        return this.obtenerIdiomasPorIdFaq(TRANSFORM_NONE, queryString, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIdiomasPorIdFaq(int, java.lang.Long)
     */
    public java.util.List obtenerIdiomasPorIdFaq(final int transform, final java.lang.Long id)
    {
        return this.obtenerIdiomasPorIdFaq(transform, "select faq.descripcionFaq.idioma from es.pode.contenidos.negocio.faqs.dominio.Faq as faq where faq.id=:id", id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerIdiomasPorIdFaq(int, java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerIdiomasPorIdFaq(final int transform, final java.lang.String queryString, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("id", id);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdCategoria(java.lang.Long)
     */
    public java.util.List obtenerFaqsPorIdCategoria(java.lang.Long id)
    {
        return this.obtenerFaqsPorIdCategoria(TRANSFORM_NONE, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdCategoria(java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerFaqsPorIdCategoria(final java.lang.String queryString, final java.lang.Long id)
    {
        return this.obtenerFaqsPorIdCategoria(TRANSFORM_NONE, queryString, id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdCategoria(int, java.lang.Long)
     */
    public java.util.List obtenerFaqsPorIdCategoria(final int transform, final java.lang.Long id)
    {
        return this.obtenerFaqsPorIdCategoria(transform, "from es.pode.contenidos.negocio.faqs.dominio.Faq as faq where faq.categoria.id= :id", id);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsPorIdCategoria(int, java.lang.String, java.lang.Long)
     */
    public java.util.List obtenerFaqsPorIdCategoria(final int transform, final java.lang.String queryString, final java.lang.Long id)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
			queryObject.setParameter("id", id);            	
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsOrdenadosIdioma()
     */
    public java.util.List obtenerFaqsOrdenadosIdioma()
    {
        return this.obtenerFaqsOrdenadosIdioma(TRANSFORM_NONE);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsOrdenadosIdioma(java.lang.String)
     */
    public java.util.List obtenerFaqsOrdenadosIdioma(final java.lang.String queryString)
    {
        return this.obtenerFaqsOrdenadosIdioma(TRANSFORM_NONE, queryString);
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsOrdenadosIdioma(int)
     */
    public java.util.List obtenerFaqsOrdenadosIdioma(final int transform)
    {
        return this.obtenerFaqsOrdenadosIdioma(transform, "from es.pode.contenidos.negocio.faqs.dominio.Faq faq order by faq.descripcionFaq.idioma");
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.Faq#obtenerFaqsOrdenadosIdioma(int, java.lang.String)
     */
    public java.util.List obtenerFaqsOrdenadosIdioma(final int transform, final java.lang.String queryString)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>es.pode.contenidos.negocio.faqs.dominio.FaqDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link es.pode.contenidos.negocio.faqs.dominio.Faq} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link es.pode.contenidos.negocio.faqs.servicio.FaqVO} - {@link TRANSFORM_FAQVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link es.pode.contenidos.negocio.faqs.dominio.FaqDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    private final Object transformEntity(final int transform, final es.pode.contenidos.negocio.faqs.dominio.Faq entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case es.pode.contenidos.negocio.faqs.dominio.FaqDao.TRANSFORM_FAQVO :
                    target = toFaqVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,es.pode.contenidos.negocio.faqs.dominio.Faq)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>es.pode.contenidos.negocio.faqs.dominio.FaqDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    private final void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case es.pode.contenidos.negocio.faqs.dominio.FaqDao.TRANSFORM_FAQVO :
                toFaqVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#toFaqVOCollection(java.util.Collection)
     */
    public final void toFaqVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, FAQVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link FaqDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.contenidos.negocio.faqs.dominio.FaqDao#toFaqVO(es.pode.contenidos.negocio.faqs.dominio.Faq)
     */
    protected es.pode.contenidos.negocio.faqs.servicio.FaqVO toFaqVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.contenidos.negocio.faqs.servicio.FaqVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer FAQVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.contenidos.negocio.faqs.dominio.Faq)
                {
                    result = toFaqVO((es.pode.contenidos.negocio.faqs.dominio.Faq)input);
                }
                else if (input instanceof Object[])
                {
                    result = toFaqVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.contenidos.negocio.faqs.dominio.Faq fromFaqVO(final es.pode.contenidos.negocio.faqs.servicio.FaqVO vo) {
        //default mapping between VO and entity
        return (es.pode.contenidos.negocio.faqs.dominio.Faq) 
                  this.getBeanMapper().map(vo, es.pode.contenidos.negocio.faqs.dominio.FaqImpl.class, DEF_MAPPING_FAQVO_FAQ);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromFaqVO(es.pode.contenidos.negocio.faqs.servicio.FaqVO vo, es.pode.contenidos.negocio.faqs.dominio.Faq entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_FAQVO_FAQ);
    }
		
		
}