// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.contenidos.negocio.logs.servicio;

import net.sf.dozer.util.mapping.MapperIF;

/**
 * <p>
 * Spring Service base class for <code>es.pode.contenidos.negocio.logs.servicio.SrvLogService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.contenidos.negocio.logs.servicio.SrvLogService
 */
public abstract class SrvLogServiceBase
    implements es.pode.contenidos.negocio.logs.servicio.SrvLogService
{


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}



    /**
     * @see es.pode.contenidos.negocio.logs.servicio.SrvLogService#listarFicherosLog()
     */
    public es.pode.contenidos.negocio.logs.servicio.FileVO[] listarFicherosLog()
    {
        try
        {
            return this.handleListarFicherosLog();
        }
        catch (Throwable th)
        {
            throw new es.pode.contenidos.negocio.logs.servicio.SrvLogServiceException(
                "Error performing 'es.pode.contenidos.negocio.logs.servicio.SrvLogService.listarFicherosLog()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #listarFicherosLog()}
      */
    protected abstract es.pode.contenidos.negocio.logs.servicio.FileVO[] handleListarFicherosLog()
        throws java.lang.Exception;

    /**
     * @see es.pode.contenidos.negocio.logs.servicio.SrvLogService#eliminarFicheroLog(java.lang.String[])
     */
    public es.pode.contenidos.negocio.logs.servicio.ValidaBajaLogVO eliminarFicheroLog(java.lang.String[] ficheros)
    {
        if (ficheros == null)
        {
            throw new IllegalArgumentException(
                "es.pode.contenidos.negocio.logs.servicio.SrvLogService.eliminarFicheroLog(java.lang.String[] ficheros) - 'ficheros' can not be null");
        }
        try
        {
            return this.handleEliminarFicheroLog(ficheros);
        }
        catch (Throwable th)
        {
            throw new es.pode.contenidos.negocio.logs.servicio.SrvLogServiceException(
                "Error performing 'es.pode.contenidos.negocio.logs.servicio.SrvLogService.eliminarFicheroLog(java.lang.String[] ficheros)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarFicheroLog(java.lang.String[])}
      */
    protected abstract es.pode.contenidos.negocio.logs.servicio.ValidaBajaLogVO handleEliminarFicheroLog(java.lang.String[] ficheros)
        throws java.lang.Exception;

    /**
     * @see es.pode.contenidos.negocio.logs.servicio.SrvLogService#recuperarFicheroLog(java.lang.String)
     */
    public javax.activation.DataHandler recuperarFicheroLog(java.lang.String fichero)
    {
        if (fichero == null)
        {
            throw new IllegalArgumentException(
                "es.pode.contenidos.negocio.logs.servicio.SrvLogService.recuperarFicheroLog(java.lang.String fichero) - 'fichero' can not be null");
        }
        try
        {
            return this.handleRecuperarFicheroLog(fichero);
        }
        catch (Throwable th)
        {
            throw new es.pode.contenidos.negocio.logs.servicio.SrvLogServiceException(
                "Error performing 'es.pode.contenidos.negocio.logs.servicio.SrvLogService.recuperarFicheroLog(java.lang.String fichero)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #recuperarFicheroLog(java.lang.String)}
      */
    protected abstract javax.activation.DataHandler handleRecuperarFicheroLog(java.lang.String fichero)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.contenidos.negocio.PrincipalStore.get();
    }
}