// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Enumeration.vsl in andromda-java-cartridge.
//
package es.pode.modificador.negocio.servicio.vo;

/**
 * <p>
 * Enumeracion con los tipos de cambio.
 * </p>
 */
public class CambioTypes
    implements java.io.Serializable
{
    /**
     * 
     */
    public static final CambioTypes VALIDAR = new CambioTypes("validation");

    /**
     * 
     */
    public static final CambioTypes MODIFICAR_LOMES = new CambioTypes("modification");

    /**
     * 
     */
    public static final CambioTypes ADD_LOMES = new CambioTypes("addition");

    /**
     * 
     */
    public static final CambioTypes CHECK_LOMES = new CambioTypes("check");

    /**
     * 
     */
    public static final CambioTypes ELIMINAR_LOMES = new CambioTypes("removal");

    private java.lang.String value;

    private CambioTypes(java.lang.String value)
    {
        this.value = value;
    }

    /**
     * The default constructor allowing
     * super classes to access it.
     */
    protected CambioTypes()
    {
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString()
    {
        return "" + value;
    }

    /**
     * Creates an instance of CambioTypes from <code>value</code>.
     *
     * @param value the value to create the CambioTypes from.
     */
    public static CambioTypes fromString(java.lang.String value)
    {
        CambioTypes typeValue = (CambioTypes)values.get(value);
        if (typeValue == null)
        {
            throw new IllegalArgumentException(
                "invalid value '" + value + "', possible values are: " + literals);
        }
        return typeValue;
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     *
     * @return the underlying value.
     */
    public java.lang.String getValue()
    {
        return this.value;
    }

    /**
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object that)
    {
        return (this == that) ? 0 : this.getValue().compareTo(
            ((CambioTypes)that).getValue());
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static java.util.List literals()
    {
        return literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static java.util.List names()
    {
        return names;
    }

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object object)
    {
        return (this == object)
            || (object instanceof CambioTypes && ((CambioTypes)object).getValue().equals(
                this.getValue()));
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        return this.getValue().hashCode();
    }

    private static final java.util.Map values = new java.util.HashMap(5, 1);
    private static java.util.List literals = new java.util.ArrayList(5);
    private static java.util.List names = new java.util.ArrayList(5);

    /**
     * Initializes the values.
     */
    static
    {
        values.put(VALIDAR.value, VALIDAR);
        literals.add(VALIDAR.value);
        names.add("VALIDAR");
        values.put(MODIFICAR_LOMES.value, MODIFICAR_LOMES);
        literals.add(MODIFICAR_LOMES.value);
        names.add("MODIFICAR_LOMES");
        values.put(ADD_LOMES.value, ADD_LOMES);
        literals.add(ADD_LOMES.value);
        names.add("ADD_LOMES");
        values.put(CHECK_LOMES.value, CHECK_LOMES);
        literals.add(CHECK_LOMES.value);
        names.add("CHECK_LOMES");
        values.put(ELIMINAR_LOMES.value, ELIMINAR_LOMES);
        literals.add(ELIMINAR_LOMES.value);
        names.add("ELIMINAR_LOMES");
        literals = java.util.Collections.unmodifiableList(literals);
        names = java.util.Collections.unmodifiableList(names);
    }
}