// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package es.pode.localizador.negocio.dominio;

import net.sf.dozer.util.mapping.MapperIF;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>es.pode.localizador.negocio.dominio.Localizador</code>.
 * </p>
 *
 * @see es.pode.localizador.negocio.dominio.Localizador
 */
public abstract class LocalizadorDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements es.pode.localizador.negocio.dominio.LocalizadorDao
{



	

	/**
	 * Constant that identifies a mapping between an 
	 * entity (Localizador) and a VO (LocalizadorVO)
	 */
	public final static String DEF_MAPPING_LOCALIZADOR_LOCALIZADORVO = "DEF_MAPPING_LOCALIZADOR_LOCALIZADORVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (LocalizadorVO) and an entity (Localizador)
	 */
	public final static String DEF_MAPPING_LOCALIZADORVO_LOCALIZADOR = "DEF_MAPPING_LOCALIZADORVO_LOCALIZADOR";
	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#load(int, java.lang.Long)
     */
    public Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Localizador.load - 'id' can not be null");
        }
        final java.util.List list = this.getHibernateTemplate().find(
            "from es.pode.localizador.negocio.dominio.Localizador as entity where entity.id = ?", id);
        final Object entity = list != null && !list.isEmpty() ? list.iterator().next() : null;
        return transformEntity(transform, (es.pode.localizador.negocio.dominio.Localizador)entity);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#load(java.lang.Long)
     */
    public es.pode.localizador.negocio.dominio.Localizador load(java.lang.Long id)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.load(TRANSFORM_NONE, id);
    }
    
    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }
    
    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(es.pode.localizador.negocio.dominio.LocalizadorImpl.class);
        this.transformEntities(transform, results);
        return results;
    }
    

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(es.pode.localizador.negocio.dominio.Localizador)
     */
    public es.pode.localizador.negocio.dominio.Localizador create(es.pode.localizador.negocio.dominio.Localizador localizador)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.create(TRANSFORM_NONE, localizador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(int transform, es.pode.localizador.negocio.dominio.Localizador)
     */
    public Object create(final int transform, final es.pode.localizador.negocio.dominio.Localizador localizador)
    {
        if (localizador == null)
        {
            throw new IllegalArgumentException(
                "Localizador.create - 'localizador' can not be null");
        }
        Object identifier = this.getHibernateTemplate().save(localizador);
        localizador.setId((java.lang.Long)identifier);
        return this.transformEntity(transform, localizador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Localizador.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (es.pode.localizador.negocio.dominio.Localizador)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(int, java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)
     */
    public es.pode.localizador.negocio.dominio.Localizador create(
 java.lang.String path, java.lang.String url, java.lang.String mec, java.lang.String identificador, java.lang.String idUsuario, java.lang.Long consumoEspacio)
    {
         return (es.pode.localizador.negocio.dominio.Localizador)this.create(TRANSFORM_NONE,  path, url, mec, identificador, idUsuario, consumoEspacio);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#create(int, java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)
     */
    public Object create(
        final int transform,
 java.lang.String path, java.lang.String url, java.lang.String mec, java.lang.String identificador, java.lang.String idUsuario, java.lang.Long consumoEspacio)
    {
        es.pode.localizador.negocio.dominio.Localizador entity = new es.pode.localizador.negocio.dominio.LocalizadorImpl();
        entity.setPath(path);
        entity.setUrl(url);
        entity.setMec(mec);
        entity.setIdentificador(identificador);
        entity.setIdUsuario(idUsuario);
        entity.setConsumoEspacio(consumoEspacio);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#update(es.pode.localizador.negocio.dominio.Localizador)
     */
    public void update(es.pode.localizador.negocio.dominio.Localizador localizador)
    {
        if (localizador == null)
        {
            throw new IllegalArgumentException(
                "Localizador.update - 'localizador' can not be null");
        }
        this.getHibernateTemplate().update(localizador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Localizador.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((es.pode.localizador.negocio.dominio.Localizador)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#remove(es.pode.localizador.negocio.dominio.Localizador)
     */
    public void remove(es.pode.localizador.negocio.dominio.Localizador localizador)
    {
        if (localizador == null)
        {
            throw new IllegalArgumentException(
                "Localizador.remove - 'localizador' can not be null");
        }
        this.getHibernateTemplate().delete(localizador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Localizador.remove - 'id' can not be null");
        }
        es.pode.localizador.negocio.dominio.Localizador entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Localizador.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorPorIdentificador(java.lang.String)
     */
    public es.pode.localizador.negocio.dominio.Localizador buscarLocalizadorPorIdentificador(java.lang.String identificador)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.buscarLocalizadorPorIdentificador(TRANSFORM_NONE, identificador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorPorIdentificador(java.lang.String, java.lang.String)
     */
    public es.pode.localizador.negocio.dominio.Localizador buscarLocalizadorPorIdentificador(final java.lang.String queryString, final java.lang.String identificador)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.buscarLocalizadorPorIdentificador(TRANSFORM_NONE, queryString, identificador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorPorIdentificador(int, java.lang.String)
     */
    public Object buscarLocalizadorPorIdentificador(final int transform, final java.lang.String identificador)
    {
        return this.buscarLocalizadorPorIdentificador(transform, "from es.pode.localizador.negocio.dominio.Localizador as localizador where localizador.identificador = :identificador", identificador);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorPorIdentificador(int, java.lang.String, java.lang.String)
     */
    public Object buscarLocalizadorPorIdentificador(final int transform, final java.lang.String queryString, final java.lang.String identificador)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("identificador", identificador);
            java.util.List results = queryObject.list();
            Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of 'es.pode.localizador.negocio.dominio.Localizador"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = (es.pode.localizador.negocio.dominio.Localizador)results.iterator().next();
                }
            }
            result = transformEntity(transform, (es.pode.localizador.negocio.dominio.Localizador)result);
            return result;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadoresPorIdentificadores(es.pode.localizador.negocio.dominio.IdentificadoresCriteria)
     */
    public java.util.List buscarLocalizadoresPorIdentificadores(es.pode.localizador.negocio.dominio.IdentificadoresCriteria identificadores)
    {
        return this.buscarLocalizadoresPorIdentificadores(TRANSFORM_NONE, identificadores);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadoresPorIdentificadores(int, java.lang.String, es.pode.localizador.negocio.dominio.IdentificadoresCriteria)
     */
    public java.util.List buscarLocalizadoresPorIdentificadores(final int transform, final es.pode.localizador.negocio.dominio.IdentificadoresCriteria identificadores)
    {
        try
        {
            es.pode.localizador.negocio.CriteriaSearch criteriaSearch = new es.pode.localizador.negocio.CriteriaSearch(super.getSession(false), es.pode.localizador.negocio.dominio.LocalizadorImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(identificadores.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(identificadores.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(identificadores.getMaximumResultSize());
							            es.pode.localizador.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.localizador.negocio.CriteriaSearchParameter(
                    identificadores.getIdentificadores(),
                    "identificador", es.pode.localizador.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarLocalizadoresPorIdentificadores(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.localizador.negocio.CriteriaSearch modifybuscarLocalizadoresPorIdentificadores (es.pode.localizador.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorDeTallerPorMEC(java.lang.String)
     */
    public es.pode.localizador.negocio.dominio.Localizador buscarLocalizadorDeTallerPorMEC(java.lang.String mec)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.buscarLocalizadorDeTallerPorMEC(TRANSFORM_NONE, mec);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorDeTallerPorMEC(java.lang.String, java.lang.String)
     */
    public es.pode.localizador.negocio.dominio.Localizador buscarLocalizadorDeTallerPorMEC(final java.lang.String queryString, final java.lang.String mec)
    {
        return (es.pode.localizador.negocio.dominio.Localizador)this.buscarLocalizadorDeTallerPorMEC(TRANSFORM_NONE, queryString, mec);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorDeTallerPorMEC(int, java.lang.String)
     */
    public Object buscarLocalizadorDeTallerPorMEC(final int transform, final java.lang.String mec)
    {
        return this.buscarLocalizadorDeTallerPorMEC(transform, "from es.pode.localizador.negocio.dominio.Localizador as localizador where localizador.mec = :mec", mec);
    }

    /**
     * @see es.pode.localizador.negocio.dominio.Localizador#buscarLocalizadorDeTallerPorMEC(int, java.lang.String, java.lang.String)
     */
    public Object buscarLocalizadorDeTallerPorMEC(final int transform, final java.lang.String queryString, final java.lang.String mec)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("mec", mec);
            java.util.List results = queryObject.list();
            Object result = null;
            if (results != null)
            {
                if (results.size() > 1)
                {
                    throw new org.springframework.dao.InvalidDataAccessResourceUsageException(
                        "More than one instance of 'es.pode.localizador.negocio.dominio.Localizador"
                            + "' was found when executing query --> '" + queryString + "'");
                }
                else if (results.size() == 1)
                {
                    result = (es.pode.localizador.negocio.dominio.Localizador)results.iterator().next();
                }
            }
            result = transformEntity(transform, (es.pode.localizador.negocio.dominio.Localizador)result);
            return result;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>es.pode.localizador.negocio.dominio.LocalizadorDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link es.pode.localizador.negocio.dominio.Localizador} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link es.pode.localizador.negocio.servicios.LocalizadorVO} - {@link TRANSFORM_LOCALIZADORVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link es.pode.localizador.negocio.dominio.LocalizadorDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    private final Object transformEntity(final int transform, final es.pode.localizador.negocio.dominio.Localizador entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case es.pode.localizador.negocio.dominio.LocalizadorDao.TRANSFORM_LOCALIZADORVO :
                    target = toLocalizadorVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,es.pode.localizador.negocio.dominio.Localizador)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>es.pode.localizador.negocio.dominio.LocalizadorDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,es.pode.localizador.negocio.dominio.Localizador)
     */
    private final void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case es.pode.localizador.negocio.dominio.LocalizadorDao.TRANSFORM_LOCALIZADORVO :
                toLocalizadorVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#toLocalizadorVOCollection(java.util.Collection)
     */
    public final void toLocalizadorVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, LOCALIZADORVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link LocalizadorDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.localizador.negocio.dominio.LocalizadorDao#toLocalizadorVO(es.pode.localizador.negocio.dominio.Localizador)
     */
    protected es.pode.localizador.negocio.servicios.LocalizadorVO toLocalizadorVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.localizador.negocio.servicios.LocalizadorVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer LOCALIZADORVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.localizador.negocio.dominio.Localizador)
                {
                    result = toLocalizadorVO((es.pode.localizador.negocio.dominio.Localizador)input);
                }
                else if (input instanceof Object[])
                {
                    result = toLocalizadorVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.localizador.negocio.dominio.Localizador fromLocalizadorVO(final es.pode.localizador.negocio.servicios.LocalizadorVO vo) {
        //default mapping between VO and entity
        return (es.pode.localizador.negocio.dominio.Localizador) 
                  this.getBeanMapper().map(vo, es.pode.localizador.negocio.dominio.LocalizadorImpl.class, DEF_MAPPING_LOCALIZADORVO_LOCALIZADOR);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromLocalizadorVO(es.pode.localizador.negocio.servicios.LocalizadorVO vo, es.pode.localizador.negocio.dominio.Localizador entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_LOCALIZADORVO_LOCALIZADOR);
    }
		
		
}