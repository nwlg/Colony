// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.localizador.negocio.servicios;

/**
 * 
 */
public interface SrvLocalizadorService
{
  /**
   * <p>
   * Metodo para crear el localizador de un ODE no publicado.
   * </p>
   * <p>
   * Toma como parametro un nombre de usuario y un numero
   * identificador UUID.
   * </p>
   * <p>
   * Devuelve el VO del localizador creado.
   * </p>
   * <p>
   * El metodo crea una nueva entrada de localizacion en la tabla de
   * localizadores. El localizador esta compuesto por una ruta en
   * disco PATH, una ruta URL de acceso remoto al ODE y un
   * identificador.
   * </p>
   * <p>
   * El PATH se construye a partir de la ruta-base del fichero de
   * configuracion para ODE's de taller. Se le concatena el nombre
   * del usuario mas el uuid.
   * </p>
   * <p>
   * La URL se construye a partir de la ruta-base-remota del fichero
   * de configuracion para ODE's de taller. Se le concatena el nombre
   * del usuario mas el uuid.
   * </p>
   * <p>
   * El valor del campo identificador toma el valor del parametro
   * uuid.
   * </p>
   * <p>
   * El MEC se deja a 0.
   * </p>
   * <p>
   * El metodo ha de ser enteramente transaccional, de forma que si
   * se produce cualquier error creando los directorios u operando en
   * la BD se ha de deshacer cualquier operacion ya realizada.
   * </p>
   * <p>
   * Si ya existe un localizador con el campo "identificador" igual,
   * no se realiza el alta y se genera una excepcion.
   * </p>
      * @param usuario  Nombre del usuario del que se va a colgar la localizacion de los recursos del ODE.
         * @param uuid  Identificador UUID a usar para identificar el ODE.
      * @return es.pode.localizador.negocio.servicios.LocalizadorVO
   * @throws throws es.pode.localizador.negocio.servicios.CreaLocalizadorNoPublicadoException Exception
   */
    public es.pode.localizador.negocio.servicios.LocalizadorVO crearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid)
        throws es.pode.localizador.negocio.servicios.CreaLocalizadorNoPublicadoException;

  /**
   * <p>
   * Metodo para crear el localizador de un ODE publicado.
   * </p>
   * <p>
   * Toma como parametros el localizador de un ODE no publicado y un
   * numero identificador MEC.
   * </p>
   * <p>
   * Devuelve el VO del localizador creado.
   * </p>
   * <p>
   * El metodo crea una nueva entrada de localizacion en la tabla de
   * localizadores.
   * </p>
   * <p>
   * El nuevo localizador esta compuesto por una ruta en disco PATH,
   * una ruta URL de acceso remoto al ODE y un identificador MEC.
   * </p>
   * <p>
   * El PATH se construye a partir de la ruta-base del fichero de
   * configuracion para ODE's publicados al que se concatena el
   * identificador MEC.
   * </p>
   * <p>
   * La URL se construye a partir de la ruta-base-remota del fichero
   * de configuracion para ODE's publicados a la que se le concatena
   * el identificador MEC.
   * </p>
   * <p>
   * El identificador toma el valor del parametro mec.
   * </p>
   * <p>
   * El MEC se deja a 0.
   * </p>
   * <p>
   * Si el identificador uuid suministrado corresponde con un
   * localizador no publicado en la BD (el campo "identificador"
   * coincide con "uuid"):
   * </p>
   * <p>
   * - Si el localizador del ODE no publicado ya tiene valor en el
   * campo MEC, devolvemos una excepcion y no hacemos nada. (ese ODE
   * no publicado ya tiene un ODE publicado asociado).
   * </p>
   * <p>
   * - Si el localizador del ODE no publicado no tiene valor en el
   * campo MEC, actualizamos dicho localizador aniadiendole el valor
   * de la variable mec suministrada al campo MEC del registro de la
   * BD y creamos un nuevo localizador para el ODE publicado como se
   * define mas arriba.
   * </p>
   * <p>
   * Si el localizador no publicado no existe en la BD (no existen
   * registros en la BD con el campo "idenficador" coincidentes con
   * la variable "uuid"):
   * </p>
   * <p>
   * - Lanzamos una excepcion.
   * </p>
   * <p>
   * El metodo ha de ser enteramente transaccional, de forma que si
   * se produce cualquier error creando los directorios u operando en
   * la BD se ha de deshacer cualquier operacion ya realizada.
   * </p>
      * @param uuid  Localizador del ODE no publicado al que hace referencia este ODE publicado.
         * @param mec  Identificador MEC del ODE publicado del que se va a crear una localizacion.
      * @return es.pode.localizador.negocio.servicios.LocalizadorVO
   * @throws throws es.pode.localizador.negocio.servicios.CreaLocalizadorPublicadoException Exception
   */
    public es.pode.localizador.negocio.servicios.LocalizadorVO crearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec)
        throws es.pode.localizador.negocio.servicios.CreaLocalizadorPublicadoException;

  /**
   * <p>
   * Toma como parametro el identificador del localizador del que se
   * esta interesado.
   * </p>
   * <p>
   * Devuelve un VO del localizador.
   * </p>
   * <p>
   * Este metodo recupera el localizador asociado al identificador
   * suministrado.
   * </p>
      * @param identificador  Identificador del ODE solicitado.
      * @return es.pode.localizador.negocio.servicios.LocalizadorVO
   * @throws throws es.pode.localizador.negocio.servicios.ConsultaLocalizadorException Exception
   */
    public es.pode.localizador.negocio.servicios.LocalizadorVO consultaLocalizador(java.lang.String identificador)
        throws es.pode.localizador.negocio.servicios.ConsultaLocalizadorException;

  /**
   * <p>
   * Este metodo devuelve un array de localizadores de todos los
   * identificadores de ODEs que le pasan.
   * </p>
      * @param ids  Array de identificadores de ODEs de los que queremos los localizadores.
      * @return es.pode.localizador.negocio.servicios.LocalizadorVO[]
   * @throws throws es.pode.localizador.negocio.servicios.BuscarLocalizadoresException Exception
   */
    public es.pode.localizador.negocio.servicios.LocalizadorVO[] buscarLocalizadoresPorId(java.lang.String[] ids)
        throws es.pode.localizador.negocio.servicios.BuscarLocalizadoresException;

  /**
   * <p>
   * Se elimina la localizacion, esto ocurrira en dos ocasiones:
   * </p>
   * <p>
   * a) Eliminacion fisica del ODE cuando este esta en estado
   * "Despublicado"
   * </p>
   * <p>
   * b) El ODE esta en creacion pero no se guarda.
   * </p>
   * <p>
   * La eliminacion implica, la eliminacion de todos los registros
   * que tengan que ver con el identificador introducido.
   * </p>
   * <p>
   * Se elimina cualquier ODE que tenga como identificador el ID
   * introducido por parametro O que tenga como MEC el id introducido
   * por parametro.
   * </p>
   * <p>
   * Eliminamos tambien el directorio que indique la/s localizaciones
   * que vamos a eliminar.
   * </p>
   * <p>
   * Se devuelve un boolean: True, si todo ha ido bien y False, en
   * caso contrario.
   * </p>
      * @param identificador  Array de identificadores de ODEs. Sera o el MEC o el UUID, lo vamos a tratar en cualquier caso de la misma forma
      * @return java.lang.Boolean
   * @throws throws es.pode.localizador.negocio.servicios.EliminaLocalizadorException Exception
   */
    public java.lang.Boolean eliminarLocalizador(java.lang.String identificador)
        throws es.pode.localizador.negocio.servicios.EliminaLocalizadorException;

  /**
   * <p>
   * Este metodo toma como parametro un identificador MEC y devuelve
   * la localizacion de este MEC cuando estaba en el taller.
   * </p>
      * @param mec  El identificador MEC del que se quiere saber su localizacion de taller.
      * @return es.pode.localizador.negocio.servicios.LocalizadorVO
   */
    public es.pode.localizador.negocio.servicios.LocalizadorVO consultaLocalizadorNoPublicado(java.lang.String mec);

  /**
   * <p>
   * Consulta de espacio ocupado por una lista de identificadores
   * </p>
      * @return java.lang.Long[]
   */
    public java.lang.Long[] consultaEspacioLocalizadores(java.lang.String[] identificadores);

  /**
   * <p>
   * Consulta de espacio ocupado por un id de ODE
   * </p>
      * @return java.lang.Long
   */
    public java.lang.Long consultaEspacioLocalizador(java.lang.String idLocalizador);

  /**
   * <p>
   * Para el localizador que se le pasa, recalcula el espacio que
   * ocupa la localización en disco si difiere
   * </p>
   * <p>
   * de la cifra almacenada en BBDD. Si no hay localizador asociado
   * al id, se devuelve un 0.
   * </p>
      * @param idLocalizador  Identificador del localizador del que se quiere recalcular el espacio ocupado en disco.
      * @return java.lang.Long
   */
    public java.lang.Long actualizaEspacioLocalizador(java.lang.String idLocalizador);

  /**
   * <p>
   * Este metodo calcula el espacio que ocupa en disco en el momento
   * de la invocación el localizador que se le pasa.
   * </p>
      * @param idLocalizador  Identificador del localizador.
      * @return java.lang.Long
   */
    public java.lang.Long calculaEspacioLocalizador(java.lang.String idLocalizador);

}
