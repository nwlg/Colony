// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.localizador.negocio.servicios;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.localizador.negocio.servicios.SrvLocalizadorService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService
 */
public abstract class SrvLocalizadorServiceBase
    implements es.pode.localizador.negocio.servicios.SrvLocalizadorService
{

		 protected static final Logger logger = Logger.getLogger(SrvLocalizadorServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    private es.pode.localizador.negocio.dominio.LocalizadorDao localizadorDao;

    /**
     * Sets the reference to <code>localizador</code>'s DAO.
     */
    public void setLocalizadorDao(es.pode.localizador.negocio.dominio.LocalizadorDao localizadorDao)
    {
        this.localizadorDao = localizadorDao;
    }

    /**
     * Gets the reference to <code>localizador</code>'s DAO.
     */
    protected es.pode.localizador.negocio.dominio.LocalizadorDao getLocalizadorDao()
    {
        return this.localizadorDao;
    }


    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#crearLocalizadorNoPublicado(java.lang.String, java.lang.String)
     */
    public es.pode.localizador.negocio.servicios.LocalizadorVO crearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid)
        throws es.pode.localizador.negocio.servicios.CreaLocalizadorNoPublicadoException
    {
        if (usuario == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid) - 'usuario' can not be null");
        }
        if (uuid == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid) - 'uuid' can not be null");
        }
        try
        {
            return this.handleCrearLocalizadorNoPublicado(usuario, uuid);
        }
        catch (es.pode.localizador.negocio.servicios.CreaLocalizadorNoPublicadoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearLocalizadorNoPublicado(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.localizador.negocio.servicios.LocalizadorVO handleCrearLocalizadorNoPublicado(java.lang.String usuario, java.lang.String uuid)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#crearLocalizadorPublicado(java.lang.String, java.lang.String)
     */
    public es.pode.localizador.negocio.servicios.LocalizadorVO crearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec)
        throws es.pode.localizador.negocio.servicios.CreaLocalizadorPublicadoException
    {
        if (uuid == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec) - 'uuid' can not be null");
        }
        if (mec == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec) - 'mec' can not be null");
        }
        try
        {
            return this.handleCrearLocalizadorPublicado(uuid, mec);
        }
        catch (es.pode.localizador.negocio.servicios.CreaLocalizadorPublicadoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.crearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearLocalizadorPublicado(java.lang.String, java.lang.String)}
      */
    protected abstract es.pode.localizador.negocio.servicios.LocalizadorVO handleCrearLocalizadorPublicado(java.lang.String uuid, java.lang.String mec)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#consultaLocalizador(java.lang.String)
     */
    public es.pode.localizador.negocio.servicios.LocalizadorVO consultaLocalizador(java.lang.String identificador)
        throws es.pode.localizador.negocio.servicios.ConsultaLocalizadorException
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaLocalizador(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            return this.handleConsultaLocalizador(identificador);
        }
        catch (es.pode.localizador.negocio.servicios.ConsultaLocalizadorException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaLocalizador(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaLocalizador(java.lang.String)}
      */
    protected abstract es.pode.localizador.negocio.servicios.LocalizadorVO handleConsultaLocalizador(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#buscarLocalizadoresPorId(java.lang.String[])
     */
    public es.pode.localizador.negocio.servicios.LocalizadorVO[] buscarLocalizadoresPorId(java.lang.String[] ids)
        throws es.pode.localizador.negocio.servicios.BuscarLocalizadoresException
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.buscarLocalizadoresPorId(java.lang.String[] ids) - 'ids' can not be null");
        }
        try
        {
            return this.handleBuscarLocalizadoresPorId(ids);
        }
        catch (es.pode.localizador.negocio.servicios.BuscarLocalizadoresException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.buscarLocalizadoresPorId(java.lang.String[] ids)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #buscarLocalizadoresPorId(java.lang.String[])}
      */
    protected abstract es.pode.localizador.negocio.servicios.LocalizadorVO[] handleBuscarLocalizadoresPorId(java.lang.String[] ids)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#eliminarLocalizador(java.lang.String)
     */
    public java.lang.Boolean eliminarLocalizador(java.lang.String identificador)
        throws es.pode.localizador.negocio.servicios.EliminaLocalizadorException
    {
        if (identificador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.eliminarLocalizador(java.lang.String identificador) - 'identificador' can not be null");
        }
        try
        {
            return this.handleEliminarLocalizador(identificador);
        }
        catch (es.pode.localizador.negocio.servicios.EliminaLocalizadorException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.eliminarLocalizador(java.lang.String identificador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarLocalizador(java.lang.String)}
      */
    protected abstract java.lang.Boolean handleEliminarLocalizador(java.lang.String identificador)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#consultaLocalizadorNoPublicado(java.lang.String)
     */
    public es.pode.localizador.negocio.servicios.LocalizadorVO consultaLocalizadorNoPublicado(java.lang.String mec)
    {
        if (mec == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaLocalizadorNoPublicado(java.lang.String mec) - 'mec' can not be null");
        }
        try
        {
            return this.handleConsultaLocalizadorNoPublicado(mec);
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaLocalizadorNoPublicado(java.lang.String mec)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaLocalizadorNoPublicado(java.lang.String)}
      */
    protected abstract es.pode.localizador.negocio.servicios.LocalizadorVO handleConsultaLocalizadorNoPublicado(java.lang.String mec)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#consultaEspacioLocalizadores(java.lang.String[])
     */
    public java.lang.Long[] consultaEspacioLocalizadores(java.lang.String[] identificadores)
    {
        if (identificadores == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaEspacioLocalizadores(java.lang.String[] identificadores) - 'identificadores' can not be null");
        }
        try
        {
            return this.handleConsultaEspacioLocalizadores(identificadores);
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaEspacioLocalizadores(java.lang.String[] identificadores)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaEspacioLocalizadores(java.lang.String[])}
      */
    protected abstract java.lang.Long[] handleConsultaEspacioLocalizadores(java.lang.String[] identificadores)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#consultaEspacioLocalizador(java.lang.String)
     */
    public java.lang.Long consultaEspacioLocalizador(java.lang.String idLocalizador)
    {
        if (idLocalizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaEspacioLocalizador(java.lang.String idLocalizador) - 'idLocalizador' can not be null");
        }
        try
        {
            return this.handleConsultaEspacioLocalizador(idLocalizador);
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.consultaEspacioLocalizador(java.lang.String idLocalizador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #consultaEspacioLocalizador(java.lang.String)}
      */
    protected abstract java.lang.Long handleConsultaEspacioLocalizador(java.lang.String idLocalizador)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#actualizaEspacioLocalizador(java.lang.String)
     */
    public java.lang.Long actualizaEspacioLocalizador(java.lang.String idLocalizador)
    {
        if (idLocalizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.actualizaEspacioLocalizador(java.lang.String idLocalizador) - 'idLocalizador' can not be null");
        }
        try
        {
            return this.handleActualizaEspacioLocalizador(idLocalizador);
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.actualizaEspacioLocalizador(java.lang.String idLocalizador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #actualizaEspacioLocalizador(java.lang.String)}
      */
    protected abstract java.lang.Long handleActualizaEspacioLocalizador(java.lang.String idLocalizador)
        throws java.lang.Exception;

    /**
     * @see es.pode.localizador.negocio.servicios.SrvLocalizadorService#calculaEspacioLocalizador(java.lang.String)
     */
    public java.lang.Long calculaEspacioLocalizador(java.lang.String idLocalizador)
    {
        if (idLocalizador == null)
        {
            throw new IllegalArgumentException(
                "es.pode.localizador.negocio.servicios.SrvLocalizadorService.calculaEspacioLocalizador(java.lang.String idLocalizador) - 'idLocalizador' can not be null");
        }
        try
        {
            return this.handleCalculaEspacioLocalizador(idLocalizador);
        }
        catch (Throwable th)
        {
            throw new es.pode.localizador.negocio.servicios.SrvLocalizadorServiceException(
                "Error performing 'es.pode.localizador.negocio.servicios.SrvLocalizadorService.calculaEspacioLocalizador(java.lang.String idLocalizador)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #calculaEspacioLocalizador(java.lang.String)}
      */
    protected abstract java.lang.Long handleCalculaEspacioLocalizador(java.lang.String idLocalizador)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.localizador.negocio.PrincipalStore.get();
    }
}