// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package es.pode.buscar.negocio.administrar.dominio;

/**
 * 
 */
public abstract class Nodo
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 3995940676304504765L;

    private java.lang.String nodo;

    /**
     * 
     */
    public java.lang.String getNodo()
    {
        return this.nodo;
    }

    public void setNodo(java.lang.String nodo)
    {
        this.nodo = nodo;
    }

    private java.lang.String url;

    /**
     * 
     */
    public java.lang.String getUrl()
    {
        return this.url;
    }

    public void setUrl(java.lang.String url)
    {
        this.url = url;
    }

    private java.util.Date fechaAlta;

    /**
     * 
     */
    public java.util.Date getFechaAlta()
    {
        return this.fechaAlta;
    }

    public void setFechaAlta(java.util.Date fechaAlta)
    {
        this.fechaAlta = fechaAlta;
    }

    private java.lang.String puerto;

    /**
     * 
     */
    public java.lang.String getPuerto()
    {
        return this.puerto;
    }

    public void setPuerto(java.lang.String puerto)
    {
        this.puerto = puerto;
    }

    private java.lang.String urlWS;

    /**
     * 
     */
    public java.lang.String getUrlWS()
    {
        return this.urlWS;
    }

    public void setUrlWS(java.lang.String urlWS)
    {
        this.urlWS = urlWS;
    }

    private java.lang.String idNodo;

    /**
     * <p>
     * Identificador del nodo que se va a publicar en la plataforma
     * Agrega.
     * </p>
     */
    public java.lang.String getIdNodo()
    {
        return this.idNodo;
    }

    public void setIdNodo(java.lang.String idNodo)
    {
        this.idNodo = idNodo;
    }

    private java.lang.Long id;

    /**
     * 
     */
    public java.lang.Long getId()
    {
        return this.id;
    }

    public void setId(java.lang.Long id)
    {
        this.id = id;
    }

    private es.pode.buscar.negocio.administrar.dominio.Ccaa ccaa;

    /**
     * 
     */
    public es.pode.buscar.negocio.administrar.dominio.Ccaa getCcaa()
    {
        return this.ccaa;
    }

    public void setCcaa(es.pode.buscar.negocio.administrar.dominio.Ccaa ccaa)
    {
        this.ccaa = ccaa;
    }

    private java.util.Collection servicio = new java.util.HashSet();

    /**
     * 
     */
    public java.util.Collection getServicio()
    {
        return this.servicio;
    }

    public void setServicio(java.util.Collection servicio)
    {
        this.servicio = servicio;
    }

    /**
     * Returns <code>true</code> if the argument is an Nodo instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Nodo))
        {
            return false;
        }
        final Nodo that = (Nodo)object;
        if (this.id == null || that.id == null || !this.id.equals(that.id))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (id == null ? 0 : id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link es.pode.buscar.negocio.administrar.dominio.Nodo}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link es.pode.buscar.negocio.administrar.dominio.Nodo}.
         */
        public static es.pode.buscar.negocio.administrar.dominio.Nodo newInstance()
        {
            return new es.pode.buscar.negocio.administrar.dominio.NodoImpl();
        }
    }

// HibernateEntity.vsl merge-point
}