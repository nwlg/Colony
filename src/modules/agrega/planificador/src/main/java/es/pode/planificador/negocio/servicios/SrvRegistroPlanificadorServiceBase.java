// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.planificador.negocio.servicios;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService
 */
public abstract class SrvRegistroPlanificadorServiceBase
    implements es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService
{

		 protected static final Logger logger = Logger.getLogger(SrvRegistroPlanificadorServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    private es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao registroTareaEjecutadaDao;

    /**
     * Sets the reference to <code>registroTareaEjecutada</code>'s DAO.
     */
    public void setRegistroTareaEjecutadaDao(es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao registroTareaEjecutadaDao)
    {
        this.registroTareaEjecutadaDao = registroTareaEjecutadaDao;
    }

    /**
     * Gets the reference to <code>registroTareaEjecutada</code>'s DAO.
     */
    protected es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao getRegistroTareaEjecutadaDao()
    {
        return this.registroTareaEjecutadaDao;
    }

    private es.pode.planificador.negocio.dominio.TareaEjecutadaDao tareaEjecutadaDao;

    /**
     * Sets the reference to <code>tareaEjecutada</code>'s DAO.
     */
    public void setTareaEjecutadaDao(es.pode.planificador.negocio.dominio.TareaEjecutadaDao tareaEjecutadaDao)
    {
        this.tareaEjecutadaDao = tareaEjecutadaDao;
    }

    /**
     * Gets the reference to <code>tareaEjecutada</code>'s DAO.
     */
    protected es.pode.planificador.negocio.dominio.TareaEjecutadaDao getTareaEjecutadaDao()
    {
        return this.tareaEjecutadaDao;
    }


    /**
     * @see es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService#registrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO)
     */
    public java.lang.Long registrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajo)
        throws es.pode.planificador.negocio.servicios.RegistrarTrabajoException
    {
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleRegistrarTrabajo(trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.RegistrarTrabajoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #registrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO)}
      */
    protected abstract java.lang.Long handleRegistrarTrabajo(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService#registrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO)
     */
    public java.lang.Long registrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO trabajoHijo)
        throws es.pode.planificador.negocio.servicios.RegistrarTrabajoException
    {
        if (trabajoHijo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO trabajoHijo) - 'trabajoHijo' can not be null");
        }
        try
        {
            return this.handleRegistrarTrabajoHijo(trabajoHijo);
        }
        catch (es.pode.planificador.negocio.servicios.RegistrarTrabajoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO trabajoHijo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #registrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO)}
      */
    protected abstract java.lang.Long handleRegistrarTrabajoHijo(es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO trabajoHijo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService#registrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO)
     */
    public java.lang.Long registrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajoEjecutado)
    {
        if (trabajoEjecutado == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajoEjecutado) - 'trabajoEjecutado' can not be null");
        }
        try
        {
            return this.handleRegistrarTrabajoFechaFin(trabajoEjecutado);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajoEjecutado)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #registrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO)}
      */
    protected abstract java.lang.Long handleRegistrarTrabajoFechaFin(es.pode.planificador.negocio.servicios.TareaEjecutadaVO trabajoEjecutado)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService#registrarTrabajoInterrumpido()
     */
    public java.lang.Long registrarTrabajoInterrumpido()
    {
        try
        {
            return this.handleRegistrarTrabajoInterrumpido();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService.registrarTrabajoInterrumpido()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #registrarTrabajoInterrumpido()}
      */
    protected abstract java.lang.Long handleRegistrarTrabajoInterrumpido()
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.PrincipalStore.get();
    }
}