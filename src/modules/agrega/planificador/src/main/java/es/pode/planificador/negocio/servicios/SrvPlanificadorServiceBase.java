// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package es.pode.planificador.negocio.servicios;

import net.sf.dozer.util.mapping.MapperIF;

import org.apache.log4j.Logger;


/**
 * <p>
 * Spring Service base class for <code>es.pode.planificador.negocio.servicios.SrvPlanificadorService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService
 */
public abstract class SrvPlanificadorServiceBase
    implements es.pode.planificador.negocio.servicios.SrvPlanificadorService
{

		 protected static final Logger logger = Logger.getLogger(SrvPlanificadorServiceBase.class);


	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


	
	        
    
	    	    private es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService srvRegistroPlanificadorService;
	
	    /**
	     * Sets the reference to <code>srvRegistroPlanificadorService</code>.
	     */
	    public void setSrvRegistroPlanificadorService(es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService srvRegistroPlanificadorService)
	    {
	        this.srvRegistroPlanificadorService = srvRegistroPlanificadorService;
	    }
	
	    /**
	     * Gets the reference to <code>srvRegistroPlanificadorService</code>.
	     */
	    protected es.pode.planificador.negocio.servicios.SrvRegistroPlanificadorService getSrvRegistroPlanificadorService()
	    {
	        return this.srvRegistroPlanificadorService;
	    }
	    
	        
	
			
    protected final es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService getSrvAgregadorRssService()
	        throws java.lang.Exception
	    {
            String srvAgregadorRssServiceFile="importedServices.properties";	    
	          java.io.InputStream srvAgregadorRssServiceInputStream=SrvPlanificadorServiceBase.class.getClassLoader().getResourceAsStream(srvAgregadorRssServiceFile);
	          java.util.Properties srvAgregadorRssServiceProperties = new java.util.Properties();
	          srvAgregadorRssServiceProperties.load(srvAgregadorRssServiceInputStream);
	          String srvAgregadorRssServiceEndPointAddress="";
	          srvAgregadorRssServiceEndPointAddress=(String) srvAgregadorRssServiceProperties.get("srvAgregadorRssServicePort");
			  logger.debug("srvAgregadorRssServiceEndPointAddress del fichero --> " + srvAgregadorRssServiceEndPointAddress);
			  es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceService srvAgregadorRssService = new es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvAgregadorRssServiceEndPointAddress.length()>0) 
					  ((es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssServiceServiceLocator)srvAgregadorRssService).setSrvAgregadorRssServiceEndpointAddress(srvAgregadorRssServiceEndPointAddress);
	    	    es.pode.agregador.negocio.agregador.servicio.SrvAgregadorRssService port = srvAgregadorRssService.getSrvAgregadorRssService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.contenidos.negocio.generacionDinamica.servicio.SrvGeneracionDinamicaService getSrvGeneracionDinamicaService()
	        throws java.lang.Exception
	    {
            String srvGeneracionDinamicaServiceFile="importedServices.properties";	    
	          java.io.InputStream srvGeneracionDinamicaServiceInputStream=SrvPlanificadorServiceBase.class.getClassLoader().getResourceAsStream(srvGeneracionDinamicaServiceFile);
	          java.util.Properties srvGeneracionDinamicaServiceProperties = new java.util.Properties();
	          srvGeneracionDinamicaServiceProperties.load(srvGeneracionDinamicaServiceInputStream);
	          String srvGeneracionDinamicaServiceEndPointAddress="";
	          srvGeneracionDinamicaServiceEndPointAddress=(String) srvGeneracionDinamicaServiceProperties.get("srvGeneracionDinamicaServicePort");
			  logger.debug("srvGeneracionDinamicaServiceEndPointAddress del fichero --> " + srvGeneracionDinamicaServiceEndPointAddress);
			  es.pode.contenidos.negocio.generacionDinamica.servicio.SrvGeneracionDinamicaServiceService srvGeneracionDinamicaService = new es.pode.contenidos.negocio.generacionDinamica.servicio.SrvGeneracionDinamicaServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvGeneracionDinamicaServiceEndPointAddress.length()>0) 
					  ((es.pode.contenidos.negocio.generacionDinamica.servicio.SrvGeneracionDinamicaServiceServiceLocator)srvGeneracionDinamicaService).setSrvGeneracionDinamicaServiceEndpointAddress(srvGeneracionDinamicaServiceEndPointAddress);
	    	    es.pode.contenidos.negocio.generacionDinamica.servicio.SrvGeneracionDinamicaService port = srvGeneracionDinamicaService.getSrvGeneracionDinamicaService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.sitemap.negocio.servicios.SrvSitemapService getSrvSitemapService()
	        throws java.lang.Exception
	    {
            String srvSitemapServiceFile="importedServices.properties";	    
	          java.io.InputStream srvSitemapServiceInputStream=SrvPlanificadorServiceBase.class.getClassLoader().getResourceAsStream(srvSitemapServiceFile);
	          java.util.Properties srvSitemapServiceProperties = new java.util.Properties();
	          srvSitemapServiceProperties.load(srvSitemapServiceInputStream);
	          String srvSitemapServiceEndPointAddress="";
	          srvSitemapServiceEndPointAddress=(String) srvSitemapServiceProperties.get("srvSitemapServicePort");
			  logger.debug("srvSitemapServiceEndPointAddress del fichero --> " + srvSitemapServiceEndPointAddress);
			  es.pode.sitemap.negocio.servicios.SrvSitemapServiceService srvSitemapService = new es.pode.sitemap.negocio.servicios.SrvSitemapServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvSitemapServiceEndPointAddress.length()>0) 
					  ((es.pode.sitemap.negocio.servicios.SrvSitemapServiceServiceLocator)srvSitemapService).setSrvSitemapServiceEndpointAddress(srvSitemapServiceEndPointAddress);
	    	    es.pode.sitemap.negocio.servicios.SrvSitemapService port = srvSitemapService.getSrvSitemapService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.publicacion.negocio.servicios.SrvPublicacionService getSrvPublicacionService()
	        throws java.lang.Exception
	    {
            String srvPublicacionServiceFile="importedServices.properties";	    
	          java.io.InputStream srvPublicacionServiceInputStream=SrvPlanificadorServiceBase.class.getClassLoader().getResourceAsStream(srvPublicacionServiceFile);
	          java.util.Properties srvPublicacionServiceProperties = new java.util.Properties();
	          srvPublicacionServiceProperties.load(srvPublicacionServiceInputStream);
	          String srvPublicacionServiceEndPointAddress="";
	          srvPublicacionServiceEndPointAddress=(String) srvPublicacionServiceProperties.get("srvPublicacionServicePort");
			  logger.debug("srvPublicacionServiceEndPointAddress del fichero --> " + srvPublicacionServiceEndPointAddress);
			  es.pode.publicacion.negocio.servicios.SrvPublicacionServiceService srvPublicacionService = new es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator();                                                                                                                                                                                                                                                    
            if (srvPublicacionServiceEndPointAddress.length()>0) 
					  ((es.pode.publicacion.negocio.servicios.SrvPublicacionServiceServiceLocator)srvPublicacionService).setSrvPublicacionServiceEndpointAddress(srvPublicacionServiceEndPointAddress);
	    	    es.pode.publicacion.negocio.servicios.SrvPublicacionService port = srvPublicacionService.getSrvPublicacionService();	    
	          return port;
	    }

    
    
	
			
    protected final es.pode.auditoria.negocio.servicios.SrvAuditoriaServicio getSrvAuditoriaServicio()
	        throws java.lang.Exception
	    {
            String srvAuditoriaServicioFile="importedServices.properties";	    
	          java.io.InputStream srvAuditoriaServicioInputStream=SrvPlanificadorServiceBase.class.getClassLoader().getResourceAsStream(srvAuditoriaServicioFile);
	          java.util.Properties srvAuditoriaServicioProperties = new java.util.Properties();
	          srvAuditoriaServicioProperties.load(srvAuditoriaServicioInputStream);
	          String srvAuditoriaServicioEndPointAddress="";
	          srvAuditoriaServicioEndPointAddress=(String) srvAuditoriaServicioProperties.get("srvAuditoriaServicioPort");
			  logger.debug("srvAuditoriaServicioEndPointAddress del fichero --> " + srvAuditoriaServicioEndPointAddress);
			  es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioService srvAuditoriaServicio = new es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioServiceLocator();                                                                                                                                                                                                                                                    
            if (srvAuditoriaServicioEndPointAddress.length()>0) 
					  ((es.pode.auditoria.negocio.servicios.SrvAuditoriaServicioServiceLocator)srvAuditoriaServicio).setSrvAuditoriaServicioEndpointAddress(srvAuditoriaServicioEndPointAddress);
	    	    es.pode.auditoria.negocio.servicios.SrvAuditoriaServicio port = srvAuditoriaServicio.getSrvAuditoriaServicio();	    
	          return port;
	    }

    
    
    private es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao registroTareaEjecutadaDao;

    /**
     * Sets the reference to <code>registroTareaEjecutada</code>'s DAO.
     */
    public void setRegistroTareaEjecutadaDao(es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao registroTareaEjecutadaDao)
    {
        this.registroTareaEjecutadaDao = registroTareaEjecutadaDao;
    }

    /**
     * Gets the reference to <code>registroTareaEjecutada</code>'s DAO.
     */
    protected es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaDao getRegistroTareaEjecutadaDao()
    {
        return this.registroTareaEjecutadaDao;
    }

    private es.pode.planificador.negocio.dominio.TareaEjecutadaDao tareaEjecutadaDao;

    /**
     * Sets the reference to <code>tareaEjecutada</code>'s DAO.
     */
    public void setTareaEjecutadaDao(es.pode.planificador.negocio.dominio.TareaEjecutadaDao tareaEjecutadaDao)
    {
        this.tareaEjecutadaDao = tareaEjecutadaDao;
    }

    /**
     * Gets the reference to <code>tareaEjecutada</code>'s DAO.
     */
    protected es.pode.planificador.negocio.dominio.TareaEjecutadaDao getTareaEjecutadaDao()
    {
        return this.tareaEjecutadaDao;
    }


    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO)
     */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (tarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO tarea) - 'tarea' can not be null");
        }
        try
        {
            return this.handleObtenerTareaModificarCargaODEs(tarea);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO tarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaCargaODEsVO handleObtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO)
     */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (tarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO tarea) - 'tarea' can not be null");
        }
        try
        {
            return this.handleObtenerTareaReindexado(tarea);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO tarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaReindexadoVO handleObtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO)
     */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaCargaODEs(datosTarea);
        }
        catch (es.pode.planificador.negocio.servicios.CrearTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaCargaODEsVO handleCrearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaReindexado(datosTarea);
        }
        catch (es.pode.planificador.negocio.servicios.CrearTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaReindexadoVO handleCrearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerInformeTrabajo(java.lang.Long)
     */
    public es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] obtenerInformeTrabajo(java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.ObtenerInformeException
    {
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerInformeTrabajo(java.lang.Long idTarea) - 'idTarea' can not be null");
        }
        try
        {
            return this.handleObtenerInformeTrabajo(idTarea);
        }
        catch (es.pode.planificador.negocio.servicios.ObtenerInformeException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerInformeTrabajo(java.lang.Long idTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerInformeTrabajo(java.lang.Long)}
      */
    protected abstract es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] handleObtenerInformeTrabajo(java.lang.Long idTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerInformeTrabajoErroneos(java.lang.Long)
     */
    public es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] obtenerInformeTrabajoErroneos(java.lang.Long id)
        throws es.pode.planificador.negocio.servicios.ObtenerInformeException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerInformeTrabajoErroneos(java.lang.Long id) - 'id' can not be null");
        }
        try
        {
            return this.handleObtenerInformeTrabajoErroneos(id);
        }
        catch (es.pode.planificador.negocio.servicios.ObtenerInformeException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerInformeTrabajoErroneos(java.lang.Long id)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerInformeTrabajoErroneos(java.lang.Long)}
      */
    protected abstract es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] handleObtenerInformeTrabajoErroneos(java.lang.Long id)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#eliminarTrabajoEjecutado(java.lang.Long[])
     */
    public java.lang.Boolean eliminarTrabajoEjecutado(java.lang.Long[] idTrabajo)
        throws es.pode.planificador.negocio.servicios.EliminarTrabajoEjecException
    {
        if (idTrabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTrabajoEjecutado(java.lang.Long[] idTrabajo) - 'idTrabajo' can not be null");
        }
        try
        {
            return this.handleEliminarTrabajoEjecutado(idTrabajo);
        }
        catch (es.pode.planificador.negocio.servicios.EliminarTrabajoEjecException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTrabajoEjecutado(java.lang.Long[] idTrabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarTrabajoEjecutado(java.lang.Long[])}
      */
    protected abstract java.lang.Boolean handleEliminarTrabajoEjecutado(java.lang.Long[] idTrabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTrabajoEjecutado(java.lang.Long)
     */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO obtenerTrabajoEjecutado(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTrabajoEjecutado(java.lang.Long id) - 'id' can not be null");
        }
        try
        {
            return this.handleObtenerTrabajoEjecutado(id);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTrabajoEjecutado(java.lang.Long id)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTrabajoEjecutado(java.lang.Long)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEjecutadaVO handleObtenerTrabajoEjecutado(java.lang.Long id)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTrabajosEjecutados()
     */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] obtenerTrabajosEjecutados()
    {
        try
        {
            return this.handleObtenerTrabajosEjecutados();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTrabajosEjecutados()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTrabajosEjecutados()}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] handleObtenerTrabajosEjecutados()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO)
     */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO fechas)
    {
        if (fechas == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO fechas) - 'fechas' can not be null");
        }
        try
        {
            return this.handleObtenerTrabajosEjecutadosDesdeHasta(fechas);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO fechas)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] handleObtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO fechas)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[])
     */
    public java.lang.Boolean eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[] tareas)
        throws es.pode.planificador.negocio.servicios.EliminarTareaException
    {
        if (tareas == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[] tareas) - 'tareas' can not be null");
        }
        try
        {
            return this.handleEliminarTareas(tareas);
        }
        catch (es.pode.planificador.negocio.servicios.EliminarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[] tareas)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[])}
      */
    protected abstract java.lang.Boolean handleEliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[] tareas)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[])
     */
    public java.lang.Boolean eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[] trabajo)
        throws es.pode.planificador.negocio.servicios.EliminarTareaException
    {
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[] trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleEliminarTareasAdm(trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.EliminarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[] trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[])}
      */
    protected abstract java.lang.Boolean handleEliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[] trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareasPendientesTodas()
     */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasPendientesTodas()
    {
        try
        {
            return this.handleObtenerTareasPendientesTodas();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareasPendientesTodas()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareasPendientesTodas()}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaVO[] handleObtenerTareasPendientesTodas()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO)
     */
    public java.lang.Boolean lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.LanzarTrabajoException
    {
        if (tarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO tarea) - 'tarea' can not be null");
        }
        try
        {
            return this.handleLanzarTarea(tarea);
        }
        catch (es.pode.planificador.negocio.servicios.LanzarTrabajoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO tarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO)}
      */
    protected abstract java.lang.Boolean handleLanzarTarea(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareasEnEjecucion()
     */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasEnEjecucion()
    {
        try
        {
            return this.handleObtenerTareasEnEjecucion();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareasEnEjecucion()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareasEnEjecucion()}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaVO[] handleObtenerTareasEnEjecucion()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareasPendientes()
     */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasPendientes()
    {
        try
        {
            return this.handleObtenerTareasPendientes();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareasPendientes()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareasPendientes()}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaVO[] handleObtenerTareasPendientes()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public java.lang.Boolean pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO job)
        throws es.pode.planificador.negocio.servicios.PararTrabajoException
    {
        if (job == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO job) - 'job' can not be null");
        }
        try
        {
            return this.handlePararTarea(job);
        }
        catch (es.pode.planificador.negocio.servicios.PararTrabajoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO job)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract java.lang.Boolean handlePararTarea(es.pode.planificador.negocio.servicios.TrabajoVO job)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#reiniciarPlanificador()
     */
    public java.lang.Boolean reiniciarPlanificador()
    {
        try
        {
            return this.handleReiniciarPlanificador();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.reiniciarPlanificador()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #reiniciarPlanificador()}
      */
    protected abstract java.lang.Boolean handleReiniciarPlanificador()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#iniciarPlanificador()
     */
    public java.lang.Boolean iniciarPlanificador()
        throws es.pode.planificador.negocio.servicios.IniciarPlanificadorException
    {
        try
        {
            return this.handleIniciarPlanificador();
        }
        catch (es.pode.planificador.negocio.servicios.IniciarPlanificadorException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.iniciarPlanificador()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #iniciarPlanificador()}
      */
    protected abstract java.lang.Boolean handleIniciarPlanificador()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#pararPlanificador()
     */
    public java.lang.Boolean pararPlanificador()
        throws es.pode.planificador.negocio.servicios.PararPlanificadorException
    {
        try
        {
            return this.handlePararPlanificador();
        }
        catch (es.pode.planificador.negocio.servicios.PararPlanificadorException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.pararPlanificador()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #pararPlanificador()}
      */
    protected abstract java.lang.Boolean handlePararPlanificador()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#estaIniciado()
     */
    public java.lang.Boolean estaIniciado()
    {
        try
        {
            return this.handleEstaIniciado();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.estaIniciado()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #estaIniciado()}
      */
    protected abstract java.lang.Boolean handleEstaIniciado()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#publicarPIF(javax.activation.DataHandler, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     */
    public java.lang.String publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo)
    {
        if (pif == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo) - 'pif' can not be null");
        }
        if (idUsuario == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo) - 'idUsuario' can not be null");
        }
        if (comentarios == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo) - 'comentarios' can not be null");
        }
        if (sobrescribir == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo) - 'sobrescribir' can not be null");
        }
        if (titulo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo) - 'titulo' can not be null");
        }
        try
        {
            return this.handlePublicarPIF(pif, idUsuario, comentarios, sobrescribir, titulo);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #publicarPIF(javax.activation.DataHandler, java.lang.String, java.lang.String, java.lang.String, java.lang.String)}
      */
    protected abstract java.lang.String handlePublicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#reindexado(java.lang.String, java.lang.Long)
     */
    public java.lang.Long reindexado(java.lang.String repositorio, java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.ReindexadoException
    {
        if (repositorio == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.reindexado(java.lang.String repositorio, java.lang.Long idTarea) - 'repositorio' can not be null");
        }
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.reindexado(java.lang.String repositorio, java.lang.Long idTarea) - 'idTarea' can not be null");
        }
        try
        {
            return this.handleReindexado(repositorio, idTarea);
        }
        catch (es.pode.planificador.negocio.servicios.ReindexadoException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.reindexado(java.lang.String repositorio, java.lang.Long idTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #reindexado(java.lang.String, java.lang.Long)}
      */
    protected abstract java.lang.Long handleReindexado(java.lang.String repositorio, java.lang.Long idTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public java.lang.String obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.TipoTareaException
    {
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleObtenerTipoTarea(trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.TipoTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract java.lang.String handleObtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public java.lang.Boolean existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
    {
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleExisteTrabajo(trabajo);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract java.lang.Boolean handleExisteTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (datosTareaCargaODE == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTareaCargaODE' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaCargaODEs(datosTareaCargaODE, trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaCargaODEsVO handleModificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTarea' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaReindexado(datosTarea, trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaReindexadoVO handleModificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO)
     */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaEliminarNoDisponibles(datosTarea);
        }
        catch (es.pode.planificador.negocio.servicios.CrearTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO handleCrearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTarea' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaEliminarNoDisponibles(datosTarea, trabajo);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO handleModificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO)
     */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException
    {
        if (tarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO tarea) - 'tarea' can not be null");
        }
        try
        {
            return this.handleObtenerTareaEliminarrNoDisponibles(tarea);
        }
        catch (es.pode.planificador.negocio.servicios.ModificarTareaException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO tarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO handleObtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#eliminarNoDisponibles(java.util.Calendar, java.util.Calendar, java.lang.Long)
     */
    public java.lang.String eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.EliminarNoDisponiblesException
    {
        if (fechaInicio == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea) - 'fechaInicio' can not be null");
        }
        if (fechaHasta == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea) - 'fechaHasta' can not be null");
        }
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea) - 'idTarea' can not be null");
        }
        try
        {
            return this.handleEliminarNoDisponibles(fechaInicio, fechaHasta, idTarea);
        }
        catch (es.pode.planificador.negocio.servicios.EliminarNoDisponiblesException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #eliminarNoDisponibles(java.util.Calendar, java.util.Calendar, java.lang.Long)}
      */
    protected abstract java.lang.String handleEliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaInformes(datosTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleCrearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO tarea)
    {
        if (tarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO tarea) - 'tarea' can not be null");
        }
        try
        {
            return this.handleObtenerTareaInformes(tarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO tarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleObtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO tarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTarea' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaInformes(datosTarea, trabajo);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleModificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO, java.lang.Long)
     */
    public void generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)
    {
        if (datosInforme == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea) - 'datosInforme' can not be null");
        }
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea) - 'idTarea' can not be null");
        }
        try
        {
            this.handleGenerarInforme(datosInforme, idTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO, java.lang.Long)}
      */
    protected abstract void handleGenerarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO)
     */
    public es.pode.planificador.negocio.servicios.TareaModificacionVO crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaModificacion(datosTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaModificacionVO handleCrearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO)
     */
    public es.pode.planificador.negocio.servicios.TareaModificacionVO modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleModificarTareaModificacion(datosTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaModificacionVO handleModificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#lanzarRSS()
     */
    public void lanzarRSS()
    {
        try
        {
            this.handleLanzarRSS();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.lanzarRSS()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #lanzarRSS()}
      */
    protected abstract void handleLanzarRSS()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#informesPortada()
     */
    public void informesPortada()
    {
        try
        {
            this.handleInformesPortada();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.informesPortada()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #informesPortada()}
      */
    protected abstract void handleInformesPortada()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#portadaODE()
     */
    public void portadaODE()
    {
        try
        {
            this.handlePortadaODE();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.portadaODE()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #portadaODE()}
      */
    protected abstract void handlePortadaODE()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#generarSitemaps()
     */
    public void generarSitemaps()
    {
        try
        {
            this.handleGenerarSitemaps();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarSitemaps()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarSitemaps()}
      */
    protected abstract void handleGenerarSitemaps()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#generarCatalogo()
     */
    public void generarCatalogo()
    {
        try
        {
            this.handleGenerarCatalogo();
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarCatalogo()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarCatalogo()}
      */
    protected abstract void handleGenerarCatalogo()
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO, java.lang.Long)
     */
    public void generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)
    {
        if (datosInforme == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea) - 'datosInforme' can not be null");
        }
        if (idTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea) - 'idTarea' can not be null");
        }
        try
        {
            this.handleGenerarInformeFederado(datosInforme, idTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO, java.lang.Long)}
      */
    protected abstract void handleGenerarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaInformesFederado(datosTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleCrearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea) - 'datosTarea' can not be null");
        }
        try
        {
            return this.handleCrearTareaInformesCatalogo(datosTarea);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleCrearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTarea' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaInformesCatalogo(datosTarea, trabajo);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleModificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * @see es.pode.planificador.negocio.servicios.SrvPlanificadorService#modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)
     */
    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
    {
        if (datosTarea == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'datosTarea' can not be null");
        }
        if (trabajo == null)
        {
            throw new IllegalArgumentException(
                "es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo) - 'trabajo' can not be null");
        }
        try
        {
            return this.handleModificarTareaInformesFederado(datosTarea, trabajo);
        }
        catch (Throwable th)
        {
            throw new es.pode.planificador.negocio.servicios.SrvPlanificadorServiceException(
                "Error performing 'es.pode.planificador.negocio.servicios.SrvPlanificadorService.modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO, es.pode.planificador.negocio.servicios.TrabajoVO)}
      */
    protected abstract es.pode.planificador.negocio.servicios.TareaInformesVO handleModificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return es.pode.PrincipalStore.get();
    }
}