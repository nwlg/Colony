// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package es.pode.planificador.negocio.dominio;

/**
 * <p>
 * Los trabajos ejecutados pueden estar compuestos de tareas más
 * pequeñas. Esta entidad registra los datos de los subtrabajos
 * dependientes de un trabajo padre.
 * </p>
 */
public abstract class RegistroTareaEjecutada
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -1455228418084816393L;

    private java.lang.String descripcion;

  /**
   * <p>
   * Descripción del subtrabajo.
   * </p>
   * @return java.lang.String
   */
    public java.lang.String getDescripcion()
    {
        return this.descripcion;
    }

  /**
   * <p>
   * Descripción del subtrabajo.
   * </p>
   *  @param descripcion  Descripción del subtrabajo. 
   */
    public void setDescripcion(java.lang.String descripcion)
    {
        this.descripcion = descripcion;
    }
    private java.util.Calendar fecha;

  /**
   * <p>
   * Fecha de ejecución del subtrabajo.
   * </p>
   * @return java.util.Calendar
   */
    public java.util.Calendar getFecha()
    {
        return this.fecha;
    }

  /**
   * <p>
   * Fecha de ejecución del subtrabajo.
   * </p>
   *  @param fecha  Fecha de ejecución del subtrabajo. 
   */
    public void setFecha(java.util.Calendar fecha)
    {
        this.fecha = fecha;
    }
    private java.lang.String estado;

  /**
   * <p>
   * Campo que indica como ha ido la ejecucion del subtrabajo
   * (ERROR/OK)
   * </p>
   * @return java.lang.String
   */
    public java.lang.String getEstado()
    {
        return this.estado;
    }

  /**
   * <p>
   * Campo que indica como ha ido la ejecucion del subtrabajo
   * (ERROR/OK)
   * </p>
   *  @param estado  Campo que indica como ha ido la ejecucion del subtrabajo (ERROR/OK) 
   */
    public void setEstado(java.lang.String estado)
    {
        this.estado = estado;
    }
    private java.lang.String codigo;

    public java.lang.String getCodigo()
    {
        return this.codigo;
    }

    public void setCodigo(java.lang.String codigo)
    {
        this.codigo = codigo;
    }
    private java.lang.Long id;

    public java.lang.Long getId()
    {
        return this.id;
    }

    public void setId(java.lang.Long id)
    {
        this.id = id;
    }
  /**
   * <p>
   * Entidad que nos sirve de auditoría inicándonos los parámetros
   * del trabajo ejecutado
   * </p>
   */
    private es.pode.planificador.negocio.dominio.TareaEjecutada tarea_ejecutada;

  /**
   * Getter of tarea_ejecutada.  
   * @return es.pode.planificador.negocio.dominio.TareaEjecutada  Entidad que nos sirve de auditoría inicándonos los parámetros del trabajo ejecutado
   */
    public es.pode.planificador.negocio.dominio.TareaEjecutada getTarea_ejecutada()
    {
        return this.tarea_ejecutada;
    }

  /**
   * Setter of tarea_ejecutada  
   *  @param tarea_ejecutada  Entidad que nos sirve de auditoría inicándonos los parámetros del trabajo ejecutado 
   */
    public void setTarea_ejecutada(es.pode.planificador.negocio.dominio.TareaEjecutada tarea_ejecutada)
    {
        this.tarea_ejecutada = tarea_ejecutada;
    }



    /**
     * Returns <code>true</code> if the argument is an RegistroTareaEjecutada instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     *
     * @param object The object to compare
     * @return boolean
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof RegistroTareaEjecutada))
        {
            return false;
        }
        final RegistroTareaEjecutada that = (RegistroTareaEjecutada)object;
        if (this.id == null || that.id == null || !this.id.equals(that.id))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     * @return int
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (id == null ? 0 : id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link es.pode.planificador.negocio.dominio.RegistroTareaEjecutada}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link es.pode.planificador.negocio.dominio.RegistroTareaEjecutada}.
         * @return es.pode.planificador.negocio.dominio.RegistroTareaEjecutada
         */
        public static es.pode.planificador.negocio.dominio.RegistroTareaEjecutada newInstance()
        {
            return new es.pode.planificador.negocio.dominio.RegistroTareaEjecutadaImpl();
        }
    }

// HibernateEntity.vsl merge-point
}