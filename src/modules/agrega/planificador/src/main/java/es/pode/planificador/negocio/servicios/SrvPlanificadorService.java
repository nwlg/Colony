// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.planificador.negocio.servicios;

/**
 * 
 */
public interface SrvPlanificadorService
{
  /**
   * <p>
   * Obtención de la tarea que se encarga de cargar los ODEs en la
   * plataforma
   * </p>
      * @param tarea  Datos identificativos necesarios para recuperar la tarea
      * @return es.pode.planificador.negocio.servicios.TareaCargaODEsVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO obtenerTareaModificarCargaODEs(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Obtención de la tarea de reindexado de índices
   * </p>
      * @param tarea  Datos identificativos necesarios para recuperar la tarea
      * @return es.pode.planificador.negocio.servicios.TareaReindexadoVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO obtenerTareaReindexado(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Creación de la tarea de carga de Objetos Digitales Educativos
   * </p>
      * @param datosTarea  Los datos de la tarea a crear
      * @return es.pode.planificador.negocio.servicios.TareaCargaODEsVO
   * @throws throws es.pode.planificador.negocio.servicios.CrearTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO crearTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException;

  /**
   * <p>
   * Creación de la tarea de reindexado
   * </p>
      * @param datosTarea  Los datos de la tarea a crear
      * @return es.pode.planificador.negocio.servicios.TareaReindexadoVO
   * @throws throws es.pode.planificador.negocio.servicios.CrearTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO crearTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException;

  /**
   * <p>
   * Recuperamos el informe de la ejecucion de un trabajo.
   * </p>
      * @param idTarea  Identificador de la tarea
      * @return es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[]
   * @throws throws es.pode.planificador.negocio.servicios.ObtenerInformeException Exception
   */
    public es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] obtenerInformeTrabajo(java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.ObtenerInformeException;

  /**
   * <p>
   * Informe de los trabajo que no se han ejecutado correctamente
   * </p>
      * @param id  Identificador de la tarea ejecutada para la cual queremos recuperar los informes erróneos
      * @return es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[]
   * @throws throws es.pode.planificador.negocio.servicios.ObtenerInformeException Exception
   */
    public es.pode.planificador.negocio.servicios.RegistroTareaEjecutadaVO[] obtenerInformeTrabajoErroneos(java.lang.Long id)
        throws es.pode.planificador.negocio.servicios.ObtenerInformeException;

  /**
   * <p>
   * Se elimina la informacion relativa a un trabajo ejecutado
   * incluyendo el informe de la ejecucion
   * </p>
      * @param idTrabajo  Identificadores de los trabajos ejecutados a eliminar
      * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.EliminarTrabajoEjecException Exception
   */
    public java.lang.Boolean eliminarTrabajoEjecutado(java.lang.Long[] idTrabajo)
        throws es.pode.planificador.negocio.servicios.EliminarTrabajoEjecException;

  /**
   * <p>
   * Obtención de los trabajos ejecutados
   * </p>
      * @param id  Identificador de la tarea
      * @return es.pode.planificador.negocio.servicios.TareaEjecutadaVO
   */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO obtenerTrabajoEjecutado(java.lang.Long id);

  /**
   * <p>
   * Obtención de los trabajos ya ejecutados.
   * </p>
   * @return es.pode.planificador.negocio.servicios.TareaEjecutadaVO[]
   */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] obtenerTrabajosEjecutados();

  /**
   * <p>
   * Trabajos ejecutados entre dos fechas
   * </p>
      * @return es.pode.planificador.negocio.servicios.TareaEjecutadaVO[]
   */
    public es.pode.planificador.negocio.servicios.TareaEjecutadaVO[] obtenerTrabajosEjecutadosDesdeHasta(es.pode.planificador.negocio.servicios.ParametrosVO fechas);

  /**
   * <p>
   * Eliminación de las tareas programadas
   * </p>
      * @param tareas  Array con los trabajos y los grupos de los trabajos que se van a eliminar
      * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.EliminarTareaException Exception
   */
    public java.lang.Boolean eliminarTareas(es.pode.planificador.negocio.servicios.TrabajoVO[] tareas)
        throws es.pode.planificador.negocio.servicios.EliminarTareaException;

  /**
   * <p>
   * Eliminación unicamente las tareas del grupo por defecto del
   * administrador
   * </p>
      * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.EliminarTareaException Exception
   */
    public java.lang.Boolean eliminarTareasAdm(es.pode.planificador.negocio.servicios.TrabajoVO[] trabajo)
        throws es.pode.planificador.negocio.servicios.EliminarTareaException;

  /**
   * <p>
   * Se recuperan todos los trabajos pendientes.
   * </p>
   * @return es.pode.planificador.negocio.servicios.TareaVO[]
   */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasPendientesTodas();

  /**
   * <p>
   * Se ejecuta un trabajo manualmente.
   * </p>
      * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.LanzarTrabajoException Exception
   */
    public java.lang.Boolean lanzarTarea(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.LanzarTrabajoException;

  /**
   * <p>
   * Recuperamos las tareas en ejecucion
   * </p>
   * @return es.pode.planificador.negocio.servicios.TareaVO[]
   */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasEnEjecucion();

  /**
   * <p>
   * Devuelve un listado con los trabajos pendientes de ejecución y
   * pertenecientes al grupo por defecto.
   * </p>
   * <p>
   * El planificador permite programar tareas propias del sistema que
   * puede que no sea interesante mostrarlas en la pantalla de
   * administración de tareas
   * </p>
   * <p>
   * Ver: handleObtenerTareasPendientesTodas
   * </p>
   * @return es.pode.planificador.negocio.servicios.TareaVO[]
   */
    public es.pode.planificador.negocio.servicios.TareaVO[] obtenerTareasPendientes();

  /**
   * <p>
   * Parada de un trabajo en ejecucion.
   * </p>
      * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.PararTrabajoException Exception
   */
    public java.lang.Boolean pararTarea(es.pode.planificador.negocio.servicios.TrabajoVO job)
        throws es.pode.planificador.negocio.servicios.PararTrabajoException;

  /**
   * <p>
   * Se reinicia el planificador
   * </p>
   * @return java.lang.Boolean
   */
    public java.lang.Boolean reiniciarPlanificador();

  /**
   * <p>
   * Inicio del planificador
   * </p>
   * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.IniciarPlanificadorException Exception
   */
    public java.lang.Boolean iniciarPlanificador()
        throws es.pode.planificador.negocio.servicios.IniciarPlanificadorException;

  /**
   * <p>
   * Parada del planificador
   * </p>
   * @return java.lang.Boolean
   * @throws throws es.pode.planificador.negocio.servicios.PararPlanificadorException Exception
   */
    public java.lang.Boolean pararPlanificador()
        throws es.pode.planificador.negocio.servicios.PararPlanificadorException;

  /**
   * <p>
   * Consulta para conocer si el planificador está iniciado
   * </p>
   * @return java.lang.Boolean
   */
    public java.lang.Boolean estaIniciado();

  /**
   * <p>
   * Método fachada para la publicación del ODEs
   * </p>
                  * @return java.lang.String
   */
    public java.lang.String publicarPIF(javax.activation.DataHandler pif, java.lang.String idUsuario, java.lang.String comentarios, java.lang.String sobrescribir, java.lang.String titulo);

  /**
   * <p>
   * Método fachada para llamar al servicio de reindexado simple de
   * índices.
   * </p>
   * <p>
   * Retorna -1 si ha ido mal y el número de objetos indexados si ha
   * ido bien.
   * </p>
      * @param repositorio  Los repositorios de índices dependerán de los idiomas. Códigos: es_ES, en_US, all, gl_ES, ca_ES y eu_ES
         * @param idTarea  Identificador de la tarea
      * @return java.lang.Long
   * @throws throws es.pode.planificador.negocio.servicios.ReindexadoException Exception
   */
    public java.lang.Long reindexado(java.lang.String repositorio, java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.ReindexadoException;

  /**
   * <p>
   * Devuelve el tipo de la tarea
   * </p>
      * @return java.lang.String
   * @throws throws es.pode.planificador.negocio.servicios.TipoTareaException Exception
   */
    public java.lang.String obtenerTipoTarea(es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.TipoTareaException;

  /**
   * <p>
   * Consulta para saber si existe ya existe un trabajo con ese
   * nombre y grupo
   * </p>
      * @return java.lang.Boolean
   */
    public java.lang.Boolean existeTrabajo(es.pode.planificador.negocio.servicios.TrabajoVO trabajo);

  /**
   * <p>
   * Modificacion de la trabajo de carga de Objetos Digitales
   * Educativos en la plataforma
   * </p>
      * @param datosTareaCargaODE  Los datos de la tarea que se quieren modificar
         * @param trabajo  Los datos identificativos (trabajo y grupo de trabajo) de la tarea a modificar
      * @return es.pode.planificador.negocio.servicios.TareaCargaODEsVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaCargaODEsVO modificarTareaCargaODEs(es.pode.planificador.negocio.servicios.TareaCargaODEsVO datosTareaCargaODE, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Modificación del trabajo de reindexado de índices en la
   * plataforma
   * </p>
      * @param datosTarea  Los datos de la tarea que se quieren modificar
         * @param trabajo  Los datos identificativos (trabajo y grupo de trabajo) de la tarea a modificar
      * @return es.pode.planificador.negocio.servicios.TareaReindexadoVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaReindexadoVO modificarTareaReindexado(es.pode.planificador.negocio.servicios.TareaReindexadoVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Metodo que se encarga de crear una tarea de eliminacion de ODEs
   * en estado no disponible.
   * </p>
      * @param datosTarea  Parametros de la tarea de eliminacion de ODEs no publicados.
      * @return es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO
   * @throws throws es.pode.planificador.negocio.servicios.CrearTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO crearTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea)
        throws es.pode.planificador.negocio.servicios.CrearTareaException;

  /**
   * <p>
   * Este metodo modifica una tarea de eliminacion de ODEs no
   * disponibles.
   * </p>
      * @param datosTarea  Nuevos datos de la tarea de eliminar ODEs no disponibles.
         * @param trabajo  Datos para referenciar a la tarea de eliminacion de ODEs no disponibles que se quiere modificar.
      * @return es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO modificarTareaEliminarNoDisponibles(es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Este metodo devuelve la tarea de eliminacion de ODEs no
   * disponibles que coincida con la tarea.
   * </p>
      * @param tarea  Tarea que se quiere obtener.
      * @return es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO
   * @throws throws es.pode.planificador.negocio.servicios.ModificarTareaException Exception
   */
    public es.pode.planificador.negocio.servicios.TareaEliminaNoDisponiblesVO obtenerTareaEliminarrNoDisponibles(es.pode.planificador.negocio.servicios.TareaVO tarea)
        throws es.pode.planificador.negocio.servicios.ModificarTareaException;

  /**
   * <p>
   * Metodo fachada para la eliminacion de los ODEs en estado no
   * disponible que hayan pasado a dicho estado en un periodo
   * concreto de tiempo.
   * </p>
   * <p>
   * Devuelve lo mismo que la correspondiente llamada al servicio de
   * publicacion.
   * </p>
      * @param fechaInicio  Periodo de inicio desde el que se esta interesado en borrar ODEs no disponibles.
         * @param fechaHasta  Periodo de fin desde el que se esta interesado en borrar ODEs no disponibles.
         * @param idTarea  Identificador de la tarea.
      * @return java.lang.String
   * @throws throws es.pode.planificador.negocio.servicios.EliminarNoDisponiblesException Exception
   */
    public java.lang.String eliminarNoDisponibles(java.util.Calendar fechaInicio, java.util.Calendar fechaHasta, java.lang.Long idTarea)
        throws es.pode.planificador.negocio.servicios.EliminarNoDisponiblesException;

  /**
   * <p>
   * Método para crear la tarea de informes
   * </p>
      * @param datosTarea  Datos de la tarea a crear
      * @return es.pode.planificador.negocio.servicios.TareaInformesVO
   */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea);

  /**
   * <p>
   * Se recupera una tarea de informes
   * </p>
      * @param tarea  Datos para identificar la tarea a obtener
      * @return es.pode.planificador.negocio.servicios.TareaInformesVO
   */
    public es.pode.planificador.negocio.servicios.TareaInformesVO obtenerTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO tarea);

  /**
   * <p>
   * Modifica una tarea de informes
   * </p>
      * @param datosTarea  Datos de la tarea a modificar
         * @param trabajo  El trabajo que se modifica
      * @return es.pode.planificador.negocio.servicios.TareaInformesVO
   */
    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformes(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo);

  /**
   * <p>
   * Método para generar informe
   * </p>
      * @param datosInforme  Datos necesarios para la generación del informe
         * @param idTarea  Identificador de la tarea a ejecutar
      */
    public void generarInforme(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea);

  /**
   * <p>
   * Registra en el planificador una tarea de modificacion de odes.
   * </p>
      * @return es.pode.planificador.negocio.servicios.TareaModificacionVO
   */
    public es.pode.planificador.negocio.servicios.TareaModificacionVO crearTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea);

  /**
   * <p>
   * Modifica en el planificador una tarea de modificacion de odes.
   * </p>
      * @return es.pode.planificador.negocio.servicios.TareaModificacionVO
   */
    public es.pode.planificador.negocio.servicios.TareaModificacionVO modificarTareaModificacion(es.pode.planificador.negocio.servicios.TareaModificacionVO datosTarea);

  /**
   * <p>
   * Método que crea los RSS
   * </p>
   */
    public void lanzarRSS();

  /**
   * <p>
   * Método que crea los informes que se van a visualizar en el
   * enlace de Informes de la portada
   * </p>
   */
    public void informesPortada();

  /**
   * <p>
   * Método que genera la imágen aleatoria para las sites externos
   * </p>
   */
    public void portadaODE();

  /**
   * <p>
   * Método que genera los ficheros sitemaps.xml con las url de las
   * fichas de los ODEs
   * </p>
   */
    public void generarSitemaps();

  /**
   * <p>
   * Método de generación del informe con el catálogo del repositorio
   * </p>
   */
    public void generarCatalogo();

    public void generarInformeFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosInforme, java.lang.Long idTarea);

  /**
   * <p>
   * metodo que crea una tarea de informes federada
   * </p>
      * @return es.pode.planificador.negocio.servicios.TareaInformesVO
   */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea);

  /**
   * <p>
   * metodo que crea una tarea con el informe del catalogo
   * </p>
      * @return es.pode.planificador.negocio.servicios.TareaInformesVO
   */
    public es.pode.planificador.negocio.servicios.TareaInformesVO crearTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea);

    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformesCatalogo(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo);

    public es.pode.planificador.negocio.servicios.TareaInformesVO modificarTareaInformesFederado(es.pode.planificador.negocio.servicios.TareaInformesVO datosTarea, es.pode.planificador.negocio.servicios.TrabajoVO trabajo);

}
