// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package es.pode.publicacion.negocio.dominio;

import net.sf.dozer.util.mapping.MapperIF;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>es.pode.publicacion.negocio.dominio.Transicion</code>.
 * </p>
 *
 * @see es.pode.publicacion.negocio.dominio.Transicion
 */
public abstract class TransicionDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements es.pode.publicacion.negocio.dominio.TransicionDao
{



	

	/**
	 * Constant that identifies a mapping between an 
	 * entity (Transicion) and a VO (TransicionVO)
	 */
	public final static String DEF_MAPPING_TRANSICION_TRANSICIONVO = "DEF_MAPPING_TRANSICION_TRANSICIONVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (TransicionVO) and an entity (Transicion)
	 */
	public final static String DEF_MAPPING_TRANSICIONVO_TRANSICION = "DEF_MAPPING_TRANSICIONVO_TRANSICION";
	

	/**
	 * Constant that identifies a mapping between an 
	 * entity (Transicion) and a VO (IdUsuarioVO)
	 */
	public final static String DEF_MAPPING_TRANSICION_IDUSUARIOVO = "DEF_MAPPING_TRANSICION_IDUSUARIOVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (IdUsuarioVO) and an entity (Transicion)
	 */
	public final static String DEF_MAPPING_IDUSUARIOVO_TRANSICION = "DEF_MAPPING_IDUSUARIOVO_TRANSICION";
	

	/**
	 * Constant that identifies a mapping between an 
	 * entity (Transicion) and a VO (TransicionAutorVO)
	 */
	public final static String DEF_MAPPING_TRANSICION_TRANSICIONAUTORVO = "DEF_MAPPING_TRANSICION_TRANSICIONAUTORVO";
	
	/**
	 * Constant that identifies a mapping between a 
	 * VO (TransicionAutorVO) and an entity (Transicion)
	 */
	public final static String DEF_MAPPING_TRANSICIONAUTORVO_TRANSICION = "DEF_MAPPING_TRANSICIONAUTORVO_TRANSICION";
	
	/**
	 * Reference to the dozer bean mapper used in the application (singleton).
	 */
	private MapperIF beanMapper;
	
	/**
	 * Gets the reference to the dozer bean mapper used in the application (singleton).
	 * @return MapperIF
	 */
    protected MapperIF getBeanMapper() {
		return beanMapper;
	}

    /**
     * Sets the instance of the Dozer bean mapper to be used.
     * @param beanMapper
     */
	public void setBeanMapper(MapperIF beanMapper) {
		this.beanMapper = beanMapper;
	}


    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#load(int, java.lang.Long)
     */
    public Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Transicion.load - 'id' can not be null");
        }
        final java.util.List list = this.getHibernateTemplate().find(
            "from es.pode.publicacion.negocio.dominio.Transicion as entity where entity.id = ?", id);
        final Object entity = list != null && !list.isEmpty() ? list.iterator().next() : null;
        return transformEntity(transform, (es.pode.publicacion.negocio.dominio.Transicion)entity);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#load(java.lang.Long)
     */
    public es.pode.publicacion.negocio.dominio.Transicion load(java.lang.Long id)
    {
        return (es.pode.publicacion.negocio.dominio.Transicion)this.load(TRANSFORM_NONE, id);
    }
    
    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }
    
    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(es.pode.publicacion.negocio.dominio.TransicionImpl.class);
        this.transformEntities(transform, results);
        return results;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(es.pode.publicacion.negocio.dominio.Transicion)
     */
    public es.pode.publicacion.negocio.dominio.Transicion create(es.pode.publicacion.negocio.dominio.Transicion transicion)
    {
        return (es.pode.publicacion.negocio.dominio.Transicion)this.create(TRANSFORM_NONE, transicion);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(int transform, es.pode.publicacion.negocio.dominio.Transicion)
     */
    public Object create(final int transform, final es.pode.publicacion.negocio.dominio.Transicion transicion)
    {
        if (transicion == null)
        {
            throw new IllegalArgumentException(
                "Transicion.create - 'transicion' can not be null");
        }
        Object identifier = this.getHibernateTemplate().save(transicion);
        transicion.setId((java.lang.Long)identifier);
        return this.transformEntity(transform, transicion);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Transicion.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (es.pode.publicacion.negocio.dominio.Transicion)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(int, java.util.Calendar,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,java.lang.Boolean)
     */
    public es.pode.publicacion.negocio.dominio.Transicion create(
 java.util.Calendar fecha, java.lang.String comentarios, java.lang.String idODE, java.lang.String idUsuario, java.lang.String titulo, java.lang.String idUsuarioCreacion, java.lang.Long milisegundos, java.lang.Boolean compartido)
    {
         return (es.pode.publicacion.negocio.dominio.Transicion)this.create(TRANSFORM_NONE,  fecha, comentarios, idODE, idUsuario, titulo, idUsuarioCreacion, milisegundos, compartido);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(int, java.util.Calendar,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,java.lang.Boolean)
     */
    public Object create(
        final int transform,
 java.util.Calendar fecha, java.lang.String comentarios, java.lang.String idODE, java.lang.String idUsuario, java.lang.String titulo, java.lang.String idUsuarioCreacion, java.lang.Long milisegundos, java.lang.Boolean compartido)
    {
        es.pode.publicacion.negocio.dominio.Transicion entity = new es.pode.publicacion.negocio.dominio.TransicionImpl();
        entity.setFecha(fecha);
        entity.setComentarios(comentarios);
        entity.setIdODE(idODE);
        entity.setIdUsuario(idUsuario);
        entity.setTitulo(titulo);
        entity.setIdUsuarioCreacion(idUsuarioCreacion);
        entity.setMilisegundos(milisegundos);
        entity.setCompartido(compartido);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(java.lang.Boolean,)es.pode.publicacion.negocio.dominio.Estado,)java.util.Calendar,)java.lang.String,)java.lang.String,)java.lang.String,)java.lang.Long     */
    public es.pode.publicacion.negocio.dominio.Transicion create(
		java.util.Calendar fecha,
		java.lang.String comentarios,
		java.lang.String idODE,
		java.lang.String idUsuario,
		java.lang.String titulo,
		java.lang.String idUsuarioCreacion,
		java.lang.Long milisegundos,
		java.lang.Boolean compartido,
		es.pode.publicacion.negocio.dominio.Estado estadoTransitado,
		es.pode.publicacion.negocio.dominio.Estado estadoActual)
    {
        return (es.pode.publicacion.negocio.dominio.Transicion)this.create(TRANSFORM_NONE,
																  fecha,
																  comentarios,
																  idODE,
																  idUsuario,
																  titulo,
																  idUsuarioCreacion,
																  milisegundos,
																  compartido,
		                                                          estadoTransitado,
		                                                          estadoActual);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#create(int, java.lang.Boolean, es.pode.publicacion.negocio.dominio.Estado, java.util.Calendar, java.lang.String, java.lang.String, java.lang.String, java.lang.Long)
     */
    public Object create(
        final int transform,
		java.util.Calendar fecha,
		java.lang.String comentarios,
		java.lang.String idODE,
		java.lang.String idUsuario,
		java.lang.String titulo,
		java.lang.String idUsuarioCreacion,
		java.lang.Long milisegundos,
		java.lang.Boolean compartido,
		es.pode.publicacion.negocio.dominio.Estado estadoTransitado,
		es.pode.publicacion.negocio.dominio.Estado estadoActual)
    {
        es.pode.publicacion.negocio.dominio.Transicion entity = new es.pode.publicacion.negocio.dominio.TransicionImpl();
		entity.setFecha(fecha);
		entity.setComentarios(comentarios);
		entity.setIdODE(idODE);
		entity.setIdUsuario(idUsuario);
		entity.setTitulo(titulo);
		entity.setIdUsuarioCreacion(idUsuarioCreacion);
		entity.setMilisegundos(milisegundos);
		entity.setCompartido(compartido);
		entity.setEstadoTransitado(estadoTransitado);
		entity.setEstadoActual(estadoActual);
        return this.create(transform, entity);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#update(es.pode.publicacion.negocio.dominio.Transicion)
     */
    public void update(es.pode.publicacion.negocio.dominio.Transicion transicion)
    {
        if (transicion == null)
        {
            throw new IllegalArgumentException(
                "Transicion.update - 'transicion' can not be null");
        }
        this.getHibernateTemplate().update(transicion);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Transicion.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((es.pode.publicacion.negocio.dominio.Transicion)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#remove(es.pode.publicacion.negocio.dominio.Transicion)
     */
    public void remove(es.pode.publicacion.negocio.dominio.Transicion transicion)
    {
        if (transicion == null)
        {
            throw new IllegalArgumentException(
                "Transicion.remove - 'transicion' can not be null");
        }
        this.getHibernateTemplate().delete(transicion);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Transicion.remove - 'id' can not be null");
        }
        es.pode.publicacion.negocio.dominio.Transicion entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Transicion.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODE(java.lang.String)
     */
    public java.util.List buscarHistorialPorIdODE(java.lang.String idODE)
    {
        return this.buscarHistorialPorIdODE(TRANSFORM_NONE, idODE);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODE(java.lang.String, java.lang.String)
     */
    public java.util.List buscarHistorialPorIdODE(final java.lang.String queryString, final java.lang.String idODE)
    {
        return this.buscarHistorialPorIdODE(TRANSFORM_NONE, queryString, idODE);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODE(int, java.lang.String)
     */
    public java.util.List buscarHistorialPorIdODE(final int transform, final java.lang.String idODE)
    {
        return this.buscarHistorialPorIdODE(transform, "from es.pode.publicacion.negocio.dominio.Transicion as transicion where transicion.idODE = :idODE", idODE);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODE(int, java.lang.String, java.lang.String)
     */
    public java.util.List buscarHistorialPorIdODE(final int transform, final java.lang.String queryString, final java.lang.String idODE)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("idODE", idODE);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarEstadoPorCriterioIdODE(es.pode.publicacion.negocio.dominio.IdODECriteria)
     */
    public java.util.List buscarEstadoPorCriterioIdODE(es.pode.publicacion.negocio.dominio.IdODECriteria criterio)
    {
        return this.buscarEstadoPorCriterioIdODE(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarEstadoPorCriterioIdODE(int, java.lang.String, es.pode.publicacion.negocio.dominio.IdODECriteria)
     */
    public java.util.List buscarEstadoPorCriterioIdODE(final int transform, final es.pode.publicacion.negocio.dominio.IdODECriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdODE(),
                    "idODE", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarEstadoPorCriterioIdODE(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarEstadoPorCriterioIdODE (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstado(es.pode.publicacion.negocio.dominio.EstadoCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstado(es.pode.publicacion.negocio.dominio.EstadoCriteria criterio)
    {
        return this.buscarODEsPorCriterioEstado(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstado(int, java.lang.String, es.pode.publicacion.negocio.dominio.EstadoCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstado(final int transform, final es.pode.publicacion.negocio.dominio.EstadoCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioEstado(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioEstado (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuario(es.pode.publicacion.negocio.dominio.UsuarioCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuario(es.pode.publicacion.negocio.dominio.UsuarioCriteria criterio)
    {
        return this.buscarODEsPorCriterioUsuario(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuario(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuario(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuario(),
                    "idUsuario", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioUsuario(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioUsuario (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoUsuario(es.pode.publicacion.negocio.dominio.UsuarioEstadoCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoUsuario(es.pode.publicacion.negocio.dominio.UsuarioEstadoCriteria criterio)
    {
        return this.buscarODEsPorCriterioEstadoUsuario(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoUsuario(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioEstadoCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoUsuario(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioEstadoCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuario(),
                    "idUsuario", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioEstadoUsuario(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioEstadoUsuario (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoUsuarioIdODE(es.pode.publicacion.negocio.dominio.UsuarioEstadoODECriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoUsuarioIdODE(es.pode.publicacion.negocio.dominio.UsuarioEstadoODECriteria criterio)
    {
        return this.buscarODEsPorCriterioEstadoUsuarioIdODE(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoUsuarioIdODE(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioEstadoODECriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoUsuarioIdODE(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioEstadoODECriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuario(),
                    "idUsuario", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdODE(),
                    "idODE", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioEstadoUsuarioIdODE(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioEstadoUsuarioIdODE (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoFecha(es.pode.publicacion.negocio.dominio.EstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoFecha(es.pode.publicacion.negocio.dominio.EstadoFechaCriteria criterio)
    {
        return this.buscarODEsPorCriterioEstadoFecha(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoFecha(int, java.lang.String, es.pode.publicacion.negocio.dominio.EstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoFecha(final int transform, final es.pode.publicacion.negocio.dominio.EstadoFechaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFecha(),
                    "fecha");
            parameter3.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_DESC);
            parameter3.setOrderRelevance(1);
            criteriaSearch.addParameter(parameter3);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioEstadoFecha(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioEstadoFecha (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODEFecha(es.pode.publicacion.negocio.dominio.IdODEFechaCriteria)
     */
    public java.util.List buscarHistorialPorIdODEFecha(es.pode.publicacion.negocio.dominio.IdODEFechaCriteria criterio)
    {
        return this.buscarHistorialPorIdODEFecha(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarHistorialPorIdODEFecha(int, java.lang.String, es.pode.publicacion.negocio.dominio.IdODEFechaCriteria)
     */
    public java.util.List buscarHistorialPorIdODEFecha(final int transform, final es.pode.publicacion.negocio.dominio.IdODEFechaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdODE(),
                    "idODE", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFecha(),
                    "fecha");
            parameter2.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_DESC);
            parameter2.setOrderRelevance(1);
            criteriaSearch.addParameter(parameter2);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarHistorialPorIdODEFecha(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarHistorialPorIdODEFecha (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuarioCreacionEstadoFecha(es.pode.publicacion.negocio.dominio.UsuarioCreacionEstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuarioCreacionEstadoFecha(es.pode.publicacion.negocio.dominio.UsuarioCreacionEstadoFechaCriteria criterio)
    {
        return this.buscarODEsPorCriterioUsuarioCreacionEstadoFecha(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuarioCreacionEstadoFecha(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioCreacionEstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuarioCreacionEstadoFecha(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioCreacionEstadoFechaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuarioCreacion(),
                    "idUsuarioCreacion", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFecha(),
                    "fecha");
            parameter4.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_DESC);
            parameter4.setOrderRelevance(1);
            criteriaSearch.addParameter(parameter4);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioUsuarioCreacionEstadoFecha(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioUsuarioCreacionEstadoFecha (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuarioEstadoDesdeHasta(es.pode.publicacion.negocio.dominio.UsuarioEstadoDesdeHastaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuarioEstadoDesdeHasta(es.pode.publicacion.negocio.dominio.UsuarioEstadoDesdeHastaCriteria criterio)
    {
        return this.buscarODEsPorCriterioUsuarioEstadoDesdeHasta(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuarioEstadoDesdeHasta(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioEstadoDesdeHastaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuarioEstadoDesdeHasta(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioEstadoDesdeHastaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuarioCreacion(),
                    "idUsuarioCreacion", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaDesde(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            parameter4.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_ASC);
            parameter4.setOrderRelevance(-1);
            criteriaSearch.addParameter(parameter4);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter5 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaHasta(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter5);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioUsuarioEstadoDesdeHasta(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioUsuarioEstadoDesdeHasta (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoDesdeHasta(es.pode.publicacion.negocio.dominio.EstadoDesdeHastaCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoDesdeHasta(es.pode.publicacion.negocio.dominio.EstadoDesdeHastaCriteria criterio)
    {
        return this.buscarODEsPorCriterioEstadoDesdeHasta(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioEstadoDesdeHasta(int, java.lang.String, es.pode.publicacion.negocio.dominio.EstadoDesdeHastaCriteria)
     */
    public java.util.List buscarODEsPorCriterioEstadoDesdeHasta(final int transform, final es.pode.publicacion.negocio.dominio.EstadoDesdeHastaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaDesde(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            parameter3.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_ASC);
            parameter3.setOrderRelevance(-1);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaHasta(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter4);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioEstadoDesdeHasta(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioEstadoDesdeHasta (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarTransicionesPorCriterioDesdeHasta(es.pode.publicacion.negocio.dominio.ActividadDesdeHastaCriteria)
     */
    public java.util.List buscarTransicionesPorCriterioDesdeHasta(es.pode.publicacion.negocio.dominio.ActividadDesdeHastaCriteria criterio)
    {
        return this.buscarTransicionesPorCriterioDesdeHasta(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarTransicionesPorCriterioDesdeHasta(int, java.lang.String, es.pode.publicacion.negocio.dominio.ActividadDesdeHastaCriteria)
     */
    public java.util.List buscarTransicionesPorCriterioDesdeHasta(final int transform, final es.pode.publicacion.negocio.dominio.ActividadDesdeHastaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstado(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaDesde(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaHasta(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarTransicionesPorCriterioDesdeHasta(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarTransicionesPorCriterioDesdeHasta (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#obtenerTransicionesFinalesFecha(java.util.Calendar)
     */
    public java.util.List obtenerTransicionesFinalesFecha(java.util.Calendar fecha)
    {
        return this.obtenerTransicionesFinalesFecha(TRANSFORM_NONE, fecha);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#obtenerTransicionesFinalesFecha(java.lang.String, java.util.Calendar)
     */
    public java.util.List obtenerTransicionesFinalesFecha(final java.lang.String queryString, final java.util.Calendar fecha)
    {
        return this.obtenerTransicionesFinalesFecha(TRANSFORM_NONE, queryString, fecha);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#obtenerTransicionesFinalesFecha(int, java.util.Calendar)
     */
    public java.util.List obtenerTransicionesFinalesFecha(final int transform, final java.util.Calendar fecha)
    {
        return this.obtenerTransicionesFinalesFecha(transform, "from TransicionImpl T where T.fecha <= :fecha and T.milisegundos = (select max(T2.milisegundos) from TransicionImpl T2 where T.idODE = T2.idODE and T2.fecha <= :fecha) ", fecha);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#obtenerTransicionesFinalesFecha(int, java.lang.String, java.util.Calendar)
     */
    public java.util.List obtenerTransicionesFinalesFecha(final int transform, final java.lang.String queryString, final java.util.Calendar fecha)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("fecha", fecha);
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarTransicionesPorCriterioActividad(es.pode.publicacion.negocio.dominio.UsuarioActividadCriteria)
     */
    public java.util.List buscarTransicionesPorCriterioActividad(es.pode.publicacion.negocio.dominio.UsuarioActividadCriteria criterio)
    {
        return this.buscarTransicionesPorCriterioActividad(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarTransicionesPorCriterioActividad(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuarioActividadCriteria)
     */
    public java.util.List buscarTransicionesPorCriterioActividad(final int transform, final es.pode.publicacion.negocio.dominio.UsuarioActividadCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdUsuario(),
                    "idUsuarioCreacion", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaDesde(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            parameter3.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_ASC);
            parameter3.setOrderRelevance(-1);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFechaHasta(),
                    "fecha", es.pode.publicacion.negocio.CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter4);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarTransicionesPorCriterioActividad(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarTransicionesPorCriterioActividad (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuariosCreacionEstadoFecha(es.pode.publicacion.negocio.dominio.UsuariosCreacionEstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuariosCreacionEstadoFecha(es.pode.publicacion.negocio.dominio.UsuariosCreacionEstadoFechaCriteria criterio)
    {
        return this.buscarODEsPorCriterioUsuariosCreacionEstadoFecha(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarODEsPorCriterioUsuariosCreacionEstadoFecha(int, java.lang.String, es.pode.publicacion.negocio.dominio.UsuariosCreacionEstadoFechaCriteria)
     */
    public java.util.List buscarODEsPorCriterioUsuariosCreacionEstadoFecha(final int transform, final es.pode.publicacion.negocio.dominio.UsuariosCreacionEstadoFechaCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdsUsuarios(),
                    "idUsuarioCreacion", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            parameter1.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_ASC);
            parameter1.setOrderRelevance(2);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getFecha(),
                    "fecha");
            parameter4.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_DESC);
            parameter4.setOrderRelevance(1);
            criteriaSearch.addParameter(parameter4);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarODEsPorCriterioUsuariosCreacionEstadoFecha(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarODEsPorCriterioUsuariosCreacionEstadoFecha (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarOdesPorEstadoCompartidoUsuarios(es.pode.publicacion.negocio.dominio.EstadoCompartidoUsuariosCriteria)
     */
    public java.util.List buscarOdesPorEstadoCompartidoUsuarios(es.pode.publicacion.negocio.dominio.EstadoCompartidoUsuariosCriteria criterio)
    {
        return this.buscarOdesPorEstadoCompartidoUsuarios(TRANSFORM_NONE, criterio);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarOdesPorEstadoCompartidoUsuarios(int, java.lang.String, es.pode.publicacion.negocio.dominio.EstadoCompartidoUsuariosCriteria)
     */
    public java.util.List buscarOdesPorEstadoCompartidoUsuarios(final int transform, final es.pode.publicacion.negocio.dominio.EstadoCompartidoUsuariosCriteria criterio)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criterio.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criterio.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criterio.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getCompartido(),
                    "compartido", true, es.pode.publicacion.negocio.CriteriaSearchParameter.LIKE_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getEstadoTransitado(),
                    "estadoTransitado", true, es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter4 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criterio.getIdsUsuarios(),
                    "idUsuarioCreacion", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            parameter4.setOrderDirection(es.pode.publicacion.negocio.CriteriaSearchParameter.ORDER_ASC);
            parameter4.setOrderRelevance(-1);
            criteriaSearch.addParameter(parameter4);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarOdesPorEstadoCompartidoUsuarios(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarOdesPorEstadoCompartidoUsuarios (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarOdesPorEstadoCompartido(es.pode.publicacion.negocio.dominio.EstadoCompartidoCriteria)
     */
    public java.util.List buscarOdesPorEstadoCompartido(es.pode.publicacion.negocio.dominio.EstadoCompartidoCriteria criteria)
    {
        return this.buscarOdesPorEstadoCompartido(TRANSFORM_NONE, criteria);
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.Transicion#buscarOdesPorEstadoCompartido(int, java.lang.String, es.pode.publicacion.negocio.dominio.EstadoCompartidoCriteria)
     */
    public java.util.List buscarOdesPorEstadoCompartido(final int transform, final es.pode.publicacion.negocio.dominio.EstadoCompartidoCriteria criteria)
    {
        try
        {
            es.pode.publicacion.negocio.CriteriaSearch criteriaSearch = new es.pode.publicacion.negocio.CriteriaSearch(super.getSession(false), es.pode.publicacion.negocio.dominio.TransicionImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criteria.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criteria.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criteria.getMaximumResultSize());
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter1 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criteria.getCompartido(),
                    "compartido", true, es.pode.publicacion.negocio.CriteriaSearchParameter.LIKE_COMPARATOR);
            criteriaSearch.addParameter(parameter1);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter2 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criteria.getEstadoActual(),
                    "estadoActual", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
									            es.pode.publicacion.negocio.CriteriaSearchParameter parameter3 =
                new es.pode.publicacion.negocio.CriteriaSearchParameter(
                    criteria.getEstadoTransitado(),
                    "estadoTransitado", es.pode.publicacion.negocio.CriteriaSearchParameter.EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            // Call this method to include any modification to the criteria, default implementation is void.
            criteriaSearch = modifybuscarOdesPorEstadoCompartido(criteriaSearch);
            java.util.List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }
    
    /**
     * Defauly implementation. Overrride to include any distinct search.
     * 
     * @param criteriaSearch The criteriaSearch to modify.          
     */
    protected es.pode.publicacion.negocio.CriteriaSearch modifybuscarOdesPorEstadoCompartido (es.pode.publicacion.negocio.CriteriaSearch criteriaSearch){
        return criteriaSearch;
    }
    

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>es.pode.publicacion.negocio.dominio.TransicionDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p/>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link es.pode.publicacion.negocio.dominio.Transicion} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link es.pode.publicacion.negocio.servicios.TransicionVO} - {@link TRANSFORM_TRANSICIONVO}</li>
     *   <li>{@link es.pode.publicacion.negocio.servicios.IdUsuarioVO} - {@link TRANSFORM_IDUSUARIOVO}</li>
     *   <li>{@link es.pode.publicacion.negocio.servicios.TransicionAutorVO} - {@link TRANSFORM_TRANSICIONAUTORVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link es.pode.publicacion.negocio.dominio.TransicionDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    private final Object transformEntity(final int transform, final es.pode.publicacion.negocio.dominio.Transicion entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_TRANSICIONVO :
                    target = toTransicionVO(entity);
                    break;
                case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_IDUSUARIOVO :
                    target = toIdUsuarioVO(entity);
                    break;
                case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_TRANSICIONAUTORVO :
                    target = toTransicionAutorVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,es.pode.publicacion.negocio.dominio.Transicion)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>es.pode.publicacion.negocio.dominio.TransicionDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int,es.pode.publicacion.negocio.dominio.Transicion)
     */
    private final void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_TRANSICIONVO :
                toTransicionVOCollection(entities);
                break;
            case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_IDUSUARIOVO :
                toIdUsuarioVOCollection(entities);
                break;
            case es.pode.publicacion.negocio.dominio.TransicionDao.TRANSFORM_TRANSICIONAUTORVO :
                toTransicionAutorVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toTransicionVOCollection(java.util.Collection)
     */
    public final void toTransicionVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, TRANSICIONVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link TransicionDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toTransicionVO(es.pode.publicacion.negocio.dominio.Transicion)
     */
    protected es.pode.publicacion.negocio.servicios.TransicionVO toTransicionVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.publicacion.negocio.servicios.TransicionVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer TRANSICIONVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.publicacion.negocio.dominio.Transicion)
                {
                    result = toTransicionVO((es.pode.publicacion.negocio.dominio.Transicion)input);
                }
                else if (input instanceof Object[])
                {
                    result = toTransicionVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.publicacion.negocio.dominio.Transicion fromTransicionVO(final es.pode.publicacion.negocio.servicios.TransicionVO vo) {
        //default mapping between VO and entity
        return (es.pode.publicacion.negocio.dominio.Transicion) 
                  this.getBeanMapper().map(vo, es.pode.publicacion.negocio.dominio.TransicionImpl.class, DEF_MAPPING_TRANSICIONVO_TRANSICION);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromTransicionVO(es.pode.publicacion.negocio.servicios.TransicionVO vo, es.pode.publicacion.negocio.dominio.Transicion entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_TRANSICIONVO_TRANSICION);
    }
		
		
    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toIdUsuarioVOCollection(java.util.Collection)
     */
    public final void toIdUsuarioVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, IDUSUARIOVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link TransicionDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toIdUsuarioVO(es.pode.publicacion.negocio.dominio.Transicion)
     */
    protected es.pode.publicacion.negocio.servicios.IdUsuarioVO toIdUsuarioVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.publicacion.negocio.servicios.IdUsuarioVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer IDUSUARIOVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.publicacion.negocio.dominio.Transicion)
                {
                    result = toIdUsuarioVO((es.pode.publicacion.negocio.dominio.Transicion)input);
                }
                else if (input instanceof Object[])
                {
                    result = toIdUsuarioVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.publicacion.negocio.dominio.Transicion fromIdUsuarioVO(final es.pode.publicacion.negocio.servicios.IdUsuarioVO vo) {
        //default mapping between VO and entity
        return (es.pode.publicacion.negocio.dominio.Transicion) 
                  this.getBeanMapper().map(vo, es.pode.publicacion.negocio.dominio.TransicionImpl.class, DEF_MAPPING_IDUSUARIOVO_TRANSICION);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromIdUsuarioVO(es.pode.publicacion.negocio.servicios.IdUsuarioVO vo, es.pode.publicacion.negocio.dominio.Transicion entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_IDUSUARIOVO_TRANSICION);
    }
		
		
    /**
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toTransicionAutorVOCollection(java.util.Collection)
     */
    public final void toTransicionAutorVOCollection(java.util.Collection entities)
    {
        if (entities == null)
        {
            entities = java.util.Collections.EMPTY_LIST;
        }
        else
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, TRANSICIONAUTORVO_TRANSFORMER);
        }
    }

    /**
     * Base implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link TransicionDaoImpl} class if you intend to use reporting queries.
     * @see es.pode.publicacion.negocio.dominio.TransicionDao#toTransicionAutorVO(es.pode.publicacion.negocio.dominio.Transicion)
     */
    protected es.pode.publicacion.negocio.servicios.TransicionAutorVO toTransicionAutorVO(Object[] row)
    {
        return null;
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link es.pode.publicacion.negocio.servicios.TransicionAutorVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private final org.apache.commons.collections.Transformer TRANSICIONAUTORVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof es.pode.publicacion.negocio.dominio.Transicion)
                {
                    result = toTransicionAutorVO((es.pode.publicacion.negocio.dominio.Transicion)input);
                }
                else if (input instanceof Object[])
                {
                    result = toTransicionAutorVO((Object[])input);
                }
                return result;
            }
        };

	/**
	 * Copy a VO to a new entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @return A new entity created with the values extracted from the vo.
	 */
	public es.pode.publicacion.negocio.dominio.Transicion fromTransicionAutorVO(final es.pode.publicacion.negocio.servicios.TransicionAutorVO vo) {
        //default mapping between VO and entity
        return (es.pode.publicacion.negocio.dominio.Transicion) 
                  this.getBeanMapper().map(vo, es.pode.publicacion.negocio.dominio.TransicionImpl.class, DEF_MAPPING_TRANSICIONAUTORVO_TRANSICION);
    }

	/**
	 * Copy a VO to an existing entity using the default Dozer mappings.
	 * @param vo The source bean (VO)
	 * @param entity The destination bean (an existing entity)
	 */
    public void fromTransicionAutorVO(es.pode.publicacion.negocio.servicios.TransicionAutorVO vo, es.pode.publicacion.negocio.dominio.Transicion entity) {
        //default mapping between VO and entity
        this.getBeanMapper().map(vo, entity, DEF_MAPPING_TRANSICIONAUTORVO_TRANSICION);
    }
		
		
}