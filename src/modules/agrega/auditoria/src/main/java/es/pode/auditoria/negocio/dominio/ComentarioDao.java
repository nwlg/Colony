// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package es.pode.auditoria.negocio.dominio;

/**
 * @see es.pode.auditoria.negocio.dominio.Comentario
 */
public interface ComentarioDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p/>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link es.pode.auditoria.negocio.servicios.ComentarioVO}.
     */
    public final static int TRANSFORM_COMENTARIOVO = 1;
    
    
    /**
     * Converts this DAO's entity to an object of type {@link es.pode.auditoria.negocio.servicios.ComentarioVO}.
     * @param entity es.pode.auditoria.negocio.dominio.Comentario
     * @return es.pode.auditoria.negocio.servicios.ComentarioVO
     */
    public es.pode.auditoria.negocio.servicios.ComentarioVO toComentarioVO(es.pode.auditoria.negocio.dominio.Comentario entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link es.pode.auditoria.negocio.servicios.ComentarioVO}.
     * @param entities java.util.Collection
     */
    public void toComentarioVOCollection(java.util.Collection entities);

    public es.pode.auditoria.negocio.dominio.Comentario fromComentarioVO(es.pode.auditoria.negocio.servicios.ComentarioVO vo);
    
    public void fromComentarioVO(es.pode.auditoria.negocio.servicios.ComentarioVO vo, es.pode.auditoria.negocio.dominio.Comentario entity);


    /**
     * Loads an instance of es.pode.auditoria.negocio.dominio.Comentario from the persistent store.
     * @param id java.lang.Long
     * @return es.pode.auditoria.negocio.dominio.Comentario
     */
    public es.pode.auditoria.negocio.dominio.Comentario load(java.lang.Long id);

    /**
     * <p>
     *   Does the same thing as {@link #load(java.lang.Long)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     *   optionally transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     * @param transform int   
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);
    
    /**
     * Loads all entities of type {@link es.pode.auditoria.negocio.dominio.Comentario}.
     * 
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();
    
    /** 
     * <p>
     *   Does the same thing as {@link #loadAll()} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     * 
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * Creates an instance of es.pode.auditoria.negocio.dominio.Comentario and adds it to the persistent store.
     * @param comentario es.pode.auditoria.negocio.dominio.Comentario
     * @return es.pode.auditoria.negocio.dominio.Comentario
     */
    public es.pode.auditoria.negocio.dominio.Comentario create(es.pode.auditoria.negocio.dominio.Comentario comentario);

    /**
     * <p>
     *   Does the same thing as {@link #create(es.pode.auditoria.negocio.dominio.Comentario)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     * @param transform int
     * @param comentario es.pode.auditoria.negocio.dominio.Comentario
     * @return Object     
     */
    public Object create(int transform, es.pode.auditoria.negocio.dominio.Comentario comentario);

    /**
     * Creates a new instance of es.pode.auditoria.negocio.dominio.Comentario and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of es.pode.auditoria.negocio.dominio.Comentario
     *        instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     *   Does the same thing as {@link #create(es.pode.auditoria.negocio.dominio.Comentario)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entities (into value objects for example).  By default, transformation does
     *   not occur.
     * </p>
     * @param transform int
     * @param entities java.util.Collection
     * @return java.util.Collection        
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     *   Creates a new <code>es.pode.auditoria.negocio.dominio.Comentario</code>
     *   instance from <strong>all</strong> attributes and adds it to
     *   the persistent store.
     * </p>
					 * @param comentario java.lang.String  
						    		 * @param fecha java.util.Calendar  
						    		 * @param idODE java.lang.String  
						    		 * @param idiomaODE java.lang.String  
						    		 * @param usuario java.lang.String  
			     * @return es.pode.auditoria.negocio.dominio.Comentario
     */
    public es.pode.auditoria.negocio.dominio.Comentario create(
					java.lang.String comentario 
						,		java.util.Calendar fecha 
						,		java.lang.String idODE 
						,		java.lang.String idiomaODE 
						,		java.lang.String usuario 
			);



    /**
     * <p>
     *   Does the same thing as {@link #create(java.lang.String, java.util.Calendar, java.lang.String, java.lang.String, java.lang.String)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   the returned entity will <strong>NOT</strong> be transformed.  If this flag is any of the other constants
     *   defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entity (into a value object for example).  By default, transformation does
     *   not occur.
     * </p>
     * @param int
					 * @param comentario java.lang.String 
						    		 * @param fecha java.util.Calendar 
						    		 * @param idODE java.lang.String 
						    		 * @param idiomaODE java.lang.String 
						    		 * @param usuario java.lang.String 
			     * @return Object
     */
    public Object create(int transform,
					java.lang.String comentario 
						,		java.util.Calendar fecha 
						,		java.lang.String idODE 
						,		java.lang.String idiomaODE 
						,		java.lang.String usuario 
			);



    /**
     * Updates the <code>comentario</code> instance in the persistent store.
     * @param comentario es.pode.auditoria.negocio.dominio.Comentario
     */
    public void update(es.pode.auditoria.negocio.dominio.Comentario comentario);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities java.util.Collection
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of es.pode.auditoria.negocio.dominio.Comentario from the persistent store.
     * @param comentario es.pode.auditoria.negocio.dominio.Comentario
     */
    public void remove(es.pode.auditoria.negocio.dominio.Comentario comentario);

    /**
     * Removes the instance of es.pode.auditoria.negocio.dominio.Comentario having the given
     * <code>identifier</code> from the persistent store.
     * @param id java.lang.Long
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities<code> collection.
     * @param entities java.util.Collection
     */
    public void remove(java.util.Collection entities);


    /**
     * TODO: document it
     * @param fechaDesde
     * @param fechaHasta
     * @return
     */
    public Long totalComentariosBetweenDates(java.util.Calendar fechaDesde, java.util.Calendar fechaHasta);



  /**
   * <p>
   * Este metodo devuelve los comentarios asociados al criterio de
   * busqueda que le pasan.
   * </p>
   * <p>
   * El criterio de busqueda selecciona los comentarios de un ODE
   * ordenados por fecha.
   * </p>
      * @param criterio  Criterio de busqueda de comentarios asociadas a un ODE ordenadas por fecha.
      * @return java.util.List
   */
    public java.util.List buscarComentariosPorCriterioODE(es.pode.auditoria.negocio.dominio.IdODEFechaCriteria criterio);





    /**
     * <p>
     *   Does the same thing as {@link #buscarComentariosPorCriterioODE(es.pode.auditoria.negocio.dominio.IdODEFechaCriteria)} with an
     *   additional flag called <code>transform</code>.  If this flag is set to <code>TRANSFORM_NONE</code> then
     *   finder results will <strong>NOT</strong> be transformed during retrieval.
     *   If this flag is any of the other constants defined here
     *   then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     *   transform the entities (into value objects for example).  By default, transformation does
     *   not occur.
     * </p>
     * @param transform int
        * @param criterio  Criterio de busqueda de comentarios asociadas a un ODE ordenadas por fecha.
        * @return java.util.List
     */
    public java.util.List buscarComentariosPorCriterioODE(final int transform, final es.pode.auditoria.negocio.dominio.IdODEFechaCriteria criterio);


    /**
     * TODO: document it
     * @param fechaDesde
     * @param fechaHasta
     * @return
     */
    public java.util.List listTopUsersComentario(java.util.Calendar fechaDesde, java.util.Calendar fechaHasta);




}
