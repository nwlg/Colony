// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringService.vsl in andromda-spring-cartridge.
//
package es.pode.auditoria.negocio.servicios;

/**
 * 
 */
public interface SrvAuditoriaServicio
{
  /**
   * <p>
   * Registro de un trabajo planificado
   * </p>
      * @return java.lang.Long
   */
    public java.lang.Long registrarTrabajoPlan(es.pode.auditoria.negocio.servicios.TareaEjecutadaPlanVO trabajo);

  /**
   * <p>
   * Registro de la fecha de finalización de un trabajo ejecutado
   * </p>
      * @return java.lang.Long
   */
    public java.lang.Long registrarTrabajoFechaFinPlan(es.pode.auditoria.negocio.servicios.TareaEjecutadaPlanVO trabajo);

  /**
   * <p>
   * Regostro de la subtarea de una tarea
   * </p>
      * @return java.lang.Long
   */
    public java.lang.Long registrarTrabajoHijoPlan(es.pode.auditoria.negocio.servicios.RegistroTareaEjecPlanVO trabajoHijo);

  /**
   * <p>
   * Se registra el trabajo que se ha interrumpido
   * </p>
   * @return java.lang.Long
   */
    public java.lang.Long registrarTrabajoInterrPlan();

  /**
   * <p>
   * Almacena en BD las distintas operaciones que se van realizando
   * (previsualizar, descargar, visualizar....) en la plataforma
   * </p>
      */
    public void registrarOperacion(es.pode.auditoria.negocio.servicios.OperacionVO operacion);

  /**
   * <p>
   * Obtiene un VO con las operaciones realizadas (previsualizar,
   * visualizar, descargar,....) entre una fecha de inicio y una
   * fecha de fin
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeOperacionVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeOperacionVO[] informeOperacionesRealizadas(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);

  /**
   * <p>
   * Obtiene un VO con la información del informe de odes por nivel
   * de agregación entre dos fechas concretas, estas fechas serán las
   * fechas de publicación de los odes.
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeNivelAgregacionVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeNivelAgregacionVO[] informeNivelAgregacion(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que obtiene un VO con toda la información necesaria para
   * obtener el informe de odes por cobertura curricular
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeCoberturaCurricularVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeCoberturaCurricularVO[] informeCoberturaCurricular(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que devuelve un VO con toda la información necesaria para
   * obtener el informe de términos buscados
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeTerminoBusquedaVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeTerminoBusquedaVO[] informeTerminosBusqueda(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que devuelve las operaciones que ha realizado un usuario
   * entre dos fechas concretas
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeOdeUsuarioVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeOdeUsuarioVO[] informeOdeUsuario(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);




    /**
     * TODO: document it
     * @param parametroInformeVO
     * @return
     */

    public es.pode.auditoria.negocio.servicios.InformeOdeUsuarioPLUSVO[] informeOdeUsuarioPLUS(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);







  /**
   * <p>
   * Método que devuelve un array de objetos InformeEstadoVO con el
   * número de odes que se encuentran en cada uno de los estados
   * posibles.
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeEstadoOdesVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeEstadoOdesVO[] informeEstadoOdes(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que almacena en BD los términos que han sido buscados así
   * como el ámbito y el usuario que realiza la búsqueda
   * </p>
      */
    public void registrarBusqueda(es.pode.auditoria.negocio.servicios.BusquedaVO busqueda);

  /**
   * <p>
   * Método que devuelve un array de InformeLicenciaOdesVO con el
   * número de odes que hay por licencia para un rango de fechas en
   * concreto
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeLicenciasOdesVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeLicenciasOdesVO[] informeLicenciasOdes(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que devuelve un array de InformeUsuariosVO con todos los
   * datos de los usuarios activos entre un rango de fechas concreto
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeUsuariosVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeUsuariosVO[] informeUsuarios(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);



    /**
     * TODO: document it
     * @param parametroInformeVO
     * @return
     */
    public es.pode.auditoria.negocio.servicios.ReportSiteWideActivityVO[] reportSiteWideActivity(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);




    /**
     * TODO: document it
     * @param parametroInformeVO
     * @return
     */
    public es.pode.auditoria.negocio.servicios.MostActiveUsersVO[] mostActiveUsers(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametroInformeVO);



  /**
   * <p>
   * Método que devuelve un array de InformeProcesoPlanificado con
   * los procesos planificados entre un rango de fechas concretos
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeProcesoPlanificadoVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeProcesoPlanificadoVO[] informeProcesosPlanificados(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Método que devuelve un array de InformeMasValoradoVO con los
   * odes más valorados. El número de odes que devolverá este métodos
   * dependerá de lo que se le pase por parámetro
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasValoradoVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasValoradoVO[] informeMasValorado(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Devuelve un VO con el número de odes que se le pasa por
   * parámetro más mostrados
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasVO[] informeMasMostrado(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Devuelve un VO con el número de odes que se le pasa por
   * parámetro más previsualizados
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasVO[] informeMasPrevisualizados(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Devuelve un VO con el número de odes que se le pasa por
   * parámetro más visualizados
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasVO[] informeMasVisualizados(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Devuelve un VO con el número de odes que se le pasa por
   * parámetro más descargados
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasVO[] informeMasDescargados(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Devuelve un array de InformeMasPesadosVO con los odes más
   * pesados.
   * </p>
      * @return es.pode.auditoria.negocio.servicios.InformeMasPesadosVO[]
   */
    public es.pode.auditoria.negocio.servicios.InformeMasPesadosVO[] informeMasPesados(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

    public void almacenarBusquedaBD(es.pode.auditoria.negocio.servicios.BusquedaVO busqueda);

    public void almacenarOperacionBD(es.pode.auditoria.negocio.servicios.OperacionVO operacion);

    public java.lang.String[] obtenerInformes();

    public void crearGuardarInforme(es.pode.auditoria.negocio.servicios.ParametroCrearInformeVO parametroCrearInformeVO);

    public es.pode.auditoria.negocio.servicios.InformeOperacionUsuarioVO[] informeOperacionUsuario(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

    public es.pode.auditoria.negocio.servicios.InformeEstadoOdesVO[] informeEstadoOdesTransicciones(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

    public javax.activation.DataHandler crearInforme(es.pode.auditoria.negocio.servicios.ParametroCrearInformeVO parametrosCrearInforme);

    public es.pode.auditoria.negocio.servicios.InformeOdeUsuarioVO[] informeOdeUsuarioOperacion(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * Obtiene todo el contenido del repositorio
   * </p>
   * @return es.pode.auditoria.negocio.servicios.RepositorioVO[]
   */
    public es.pode.auditoria.negocio.servicios.RepositorioVO[] repositorio();

  /**
   * <p>
   * Obtiene los informes de tipo 'Mas' que aparecerán en la portada.
   * Será el método que se invocará desde la tarea planificada
   * </p>
   */
    public void crearInformesPortada();

  /**
   * <p>
   * Genera un informe con toda la información del repositorio. Será
   * invocado a través de una tarea programada
   * </p>
   */
    public void crearInformeRepositorio();

  /**
   * <p>
   * Nos devuelve un array de numeroOperacionesVO
   * </p>
      * @param identificador  Un identificador del ODE
      * @return es.pode.auditoria.negocio.servicios.NumeroOperacionesVO[]
   */
    public es.pode.auditoria.negocio.servicios.NumeroOperacionesVO[] obtenNumeroOperaciones(java.lang.String identificador);

    public es.pode.auditoria.negocio.servicios.InformeMasVO[] informeMasEnviado(es.pode.auditoria.negocio.servicios.ParametrosInformeVO parametrosInformeVO);

  /**
   * <p>
   * metodo que se encarga de llamar al metodo que crear el informe y
   * lo guarda en el lugar correspondiente
   * </p>
      */
    public void crearGuardarInformeFederado(es.pode.auditoria.negocio.servicios.ParametroCrearInformeVO parametroCrearInformeVO);

}
